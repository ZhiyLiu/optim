// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "P3DUserInterface.h"

void P3DUserInterface::cb_modelWindow_i(movable_Fl_Window*, void*) {
  modelWindow->hide();
}
void P3DUserInterface::cb_modelWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_modelWindow_i(o,v);
}

void P3DUserInterface::cb_axialViewBtn_i(Fl_Button*, void*) {
  callback->setAxialView();
}
void P3DUserInterface::cb_axialViewBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_axialViewBtn_i(o,v);
}

void P3DUserInterface::cb_saggitalViewBtn_i(Fl_Button*, void*) {
  callback->setSaggitalView();
}
void P3DUserInterface::cb_saggitalViewBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_saggitalViewBtn_i(o,v);
}

void P3DUserInterface::cb_coronalViewBtn_i(Fl_Button*, void*) {
  callback->setCoronalView();
}
void P3DUserInterface::cb_coronalViewBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_coronalViewBtn_i(o,v);
}

void P3DUserInterface::cb_centerBtn_i(Fl_Button*, void*) {
  callback->setCenterThing();
}
void P3DUserInterface::cb_centerBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_centerBtn_i(o,v);
}

void P3DUserInterface::cb_rotateLeft90_i(Fl_Button*, void*) {
  callback->rotateLeft90();
}
void P3DUserInterface::cb_rotateLeft90(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_rotateLeft90_i(o,v);
}

void P3DUserInterface::cb_rotateHorizontal180_i(Fl_Button*, void*) {
  callback->rotateHorizontal180();
}
void P3DUserInterface::cb_rotateHorizontal180(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_rotateHorizontal180_i(o,v);
}

void P3DUserInterface::cb_rotateVertical180_i(Fl_Button*, void*) {
  callback->rotateVertical180();
}
void P3DUserInterface::cb_rotateVertical180(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_rotateVertical180_i(o,v);
}

void P3DUserInterface::cb_rotateRight90_i(Fl_Button*, void*) {
  callback->rotateRight90();
}
void P3DUserInterface::cb_rotateRight90(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_rotateRight90_i(o,v);
}

void P3DUserInterface::cb_mainWindow_i(movable_Fl_Window*, void*) {
  callback->closeWindowsAndExit();
}
void P3DUserInterface::cb_mainWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_mainWindow_i(o,v);
}

void P3DUserInterface::cb_New_i(Fl_Menu_*, void*) {
  callback->newModel();
}
void P3DUserInterface::cb_New(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void P3DUserInterface::cb_Load_i(Fl_Menu_*, void*) {
  callback->loadModel();
}
void P3DUserInterface::cb_Load(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void P3DUserInterface::cb_Load1_i(Fl_Menu_*, void*) {
  callback->loadSimTransform();
}
void P3DUserInterface::cb_Load1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

void P3DUserInterface::cb_Save_i(Fl_Menu_*, void*) {
  callback->saveModel();
}
void P3DUserInterface::cb_Save(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void P3DUserInterface::cb_Save1_i(Fl_Menu_*, void*) {
  callback->saveModelAs();
}
void P3DUserInterface::cb_Save1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void P3DUserInterface::cb_Export_i(Fl_Menu_*, void*) {
  callback->exportToImage();
}
void P3DUserInterface::cb_Export(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Export_i(o,v);
}

void P3DUserInterface::cb_Export1_i(Fl_Menu_*, void*) {
  callback->exportToBYUTiles();
}
void P3DUserInterface::cb_Export1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Export1_i(o,v);
}

void P3DUserInterface::cb_Load2_i(Fl_Menu_*, void*) {
  callback->loadImage(true);
}
void P3DUserInterface::cb_Load2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Load2_i(o,v);
}

void P3DUserInterface::cb_Load3_i(Fl_Menu_*, void*) {
  callback->loadImage(true, true);
}
void P3DUserInterface::cb_Load3(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Load3_i(o,v);
}

void P3DUserInterface::cb_Clear_i(Fl_Menu_*, void*) {
  callback->discardImage();
}
void P3DUserInterface::cb_Clear(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Clear_i(o,v);
}

void P3DUserInterface::cb_Save2_i(Fl_Menu_*, void*) {
  callback->saveBlur();
}
void P3DUserInterface::cb_Save2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void P3DUserInterface::cb_loadDistMap_i(Fl_Menu_*, void*) {
  callback->loadDistMap();
}
void P3DUserInterface::cb_loadDistMap(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_loadDistMap_i(o,v);
}

void P3DUserInterface::cb_imageToDistanceMap_i(Fl_Menu_*, void*) {
  callback->distMapAs();
}
void P3DUserInterface::cb_imageToDistanceMap(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_imageToDistanceMap_i(o,v);
}

void P3DUserInterface::cb_loadLandMarkModel_i(Fl_Menu_*, void*) {
  callback->loadLandmarkModel();
}
void P3DUserInterface::cb_loadLandMarkModel(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_loadLandMarkModel_i(o,v);
}

void P3DUserInterface::cb_clearLandMarkModel_i(Fl_Menu_*, void*) {
  callback->newLandmarkModel();
}
void P3DUserInterface::cb_clearLandMarkModel(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_clearLandMarkModel_i(o,v);
}

void P3DUserInterface::cb_Load4_i(Fl_Menu_*, void*) {
  callback->loadTileSet();
}
void P3DUserInterface::cb_Load4(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Load4_i(o,v);
}

void P3DUserInterface::cb_Generate_i(Fl_Menu_*, void*) {
  callback->generateTileSet();
}
void P3DUserInterface::cb_Generate(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Generate_i(o,v);
}

void P3DUserInterface::cb_Save3_i(Fl_Menu_*, void*) {
  callback->saveTileSetAs();
}
void P3DUserInterface::cb_Save3(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Save3_i(o,v);
}

void P3DUserInterface::cb_fileMenuLoadPCASurface_i(Fl_Menu_*, void*) {
  callback->loadAuxTileSet();
  callback->viewAuxTileSet(1);
}
void P3DUserInterface::cb_fileMenuLoadPCASurface(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_fileMenuLoadPCASurface_i(o,v);
}

void P3DUserInterface::cb_fileMenuLoadPCAResidues_i(Fl_Menu_*, void*) {
  callback->loadPCAFile();
}
void P3DUserInterface::cb_fileMenuLoadPCAResidues(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_fileMenuLoadPCAResidues_i(o,v);
}

void P3DUserInterface::cb_Exit_i(Fl_Menu_*, void*) {
  callback->closeWindowsAndExit();
}
void P3DUserInterface::cb_Exit(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void P3DUserInterface::cb_Undo_i(Fl_Menu_*, void*) {
  callback->undo();
}
void P3DUserInterface::cb_Undo(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Undo_i(o,v);
}

void P3DUserInterface::cb_Redo_i(Fl_Menu_*, void*) {
  callback->redo();
}
void P3DUserInterface::cb_Redo(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Redo_i(o,v);
}

void P3DUserInterface::cb_addQuadFigurePulldown_i(Fl_Menu_*, void*) {
  addQuadFigureDlg->show();
  addQuadFigureDlg->activate();
}
void P3DUserInterface::cb_addQuadFigurePulldown(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_addQuadFigurePulldown_i(o,v);
}

void P3DUserInterface::cb_attachSubfigurePulldown_i(Fl_Menu_*, void*) {
  callback->initializeAttachSubfigureDialog();
  attachSubfigureDialog->show();
}
void P3DUserInterface::cb_attachSubfigurePulldown(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_attachSubfigurePulldown_i(o,v);
}

void P3DUserInterface::cb_detachSubfigurePulldown_i(Fl_Menu_*, void*) {
  callback->detachSubfigure();
}
void P3DUserInterface::cb_detachSubfigurePulldown(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_detachSubfigurePulldown_i(o,v);
}

void P3DUserInterface::cb_Remove_i(Fl_Menu_*, void*) {
  callback->removeSelectedFigures();
}
void P3DUserInterface::cb_Remove(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Remove_i(o,v);
}

void P3DUserInterface::cb_Reorder_i(Fl_Menu_*, void*) {
  callback->reorderModel();
}
void P3DUserInterface::cb_Reorder(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Reorder_i(o,v);
}

void P3DUserInterface::cb_editLandmarksMenuItem_i(Fl_Menu_*, void*) {
  callback->startEditLandmarks();
}
void P3DUserInterface::cb_editLandmarksMenuItem(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_editLandmarksMenuItem_i(o,v);
}

void P3DUserInterface::cb_Model_i(Fl_Menu_*, void*) {
  modelNameCells = NULL;
  callback->editModelProperties();
}
void P3DUserInterface::cb_Model(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Model_i(o,v);
}

void P3DUserInterface::cb_Select_i(Fl_Menu_*, void*) {
  callback->selectAll();
}
void P3DUserInterface::cb_Select(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Select_i(o,v);
}

void P3DUserInterface::cb_Deselect_i(Fl_Menu_*, void*) {
  callback->deselectAll();
}
void P3DUserInterface::cb_Deselect(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Deselect_i(o,v);
}

void P3DUserInterface::cb_Toggle_i(Fl_Menu_*, void*) {
  callback->toggleAll();
}
void P3DUserInterface::cb_Toggle(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Toggle_i(o,v);
}

void P3DUserInterface::cb_applyTransMenuItem_i(Fl_Menu_*, void*) {
  callback->applyLoadedTransformation();
}
void P3DUserInterface::cb_applyTransMenuItem(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_applyTransMenuItem_i(o,v);
}

void P3DUserInterface::cb_Atom_i(Fl_Menu_*, void*) {
  callback->setSelectionType(SELECT_PRIMITIVE);
}
void P3DUserInterface::cb_Atom(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Atom_i(o,v);
}

void P3DUserInterface::cb_Figure_i(Fl_Menu_*, void*) {
  callback->setSelectionType(SELECT_FIGURE);
}
void P3DUserInterface::cb_Figure(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Figure_i(o,v);
}

void P3DUserInterface::cb_elongationPulldown_i(Fl_Menu_*, void*) {
  callback->initializeElongater();
}
void P3DUserInterface::cb_elongationPulldown(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_elongationPulldown_i(o,v);
}

void P3DUserInterface::cb_atomEditorPulldown_i(Fl_Menu_*, void*) {
  callback->showPrimitiveEditor();
}
void P3DUserInterface::cb_atomEditorPulldown(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_atomEditorPulldown_i(o,v);
}

void P3DUserInterface::cb_Copy_i(Fl_Menu_*, void*) {
  callback->copy();
}
void P3DUserInterface::cb_Copy(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Copy_i(o,v);
}

void P3DUserInterface::cb_Paste_i(Fl_Menu_*, void*) {
  callback->paste();
}
void P3DUserInterface::cb_Paste(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Paste_i(o,v);
}

void P3DUserInterface::cb_Mirror_i(Fl_Menu_*, void*) {
  callback->mirror();
}
void P3DUserInterface::cb_Mirror(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Mirror_i(o,v);
}

void P3DUserInterface::cb_Gaussian_i(Fl_Menu_*, void*) {
  callback->gaussBlur();
}
void P3DUserInterface::cb_Gaussian(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Gaussian_i(o,v);
}

void P3DUserInterface::cb_constraintsPulldown_i(Fl_Menu_*, void*) {
  if (callback->constraintsWindowSetup())
      constraintsWindow->show();
}
void P3DUserInterface::cb_constraintsPulldown(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_constraintsPulldown_i(o,v);
}

void P3DUserInterface::cb_Preferences_i(Fl_Menu_*, void*) {
  preferencesEditorWindow->show();
  callback->showPreferencesEditor();
}
void P3DUserInterface::cb_Preferences(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Preferences_i(o,v);
}

void P3DUserInterface::cb_Display_i(Fl_Menu_*, void*) {
  if (displayControlWindow != NULL)
      displayControlWindow->show();
}
void P3DUserInterface::cb_Display(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Display_i(o,v);
}

void P3DUserInterface::cb_Model1_i(Fl_Menu_*, void*) {
  if (modelWindow != NULL)
      modelWindow->show();
}
void P3DUserInterface::cb_Model1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Model1_i(o,v);
}

void P3DUserInterface::cb_Atom1_i(Fl_Menu_*, void*) {
  cutPlanesControlWindow->show();
  cutPlaneWindowCheckBox->value(1);
}
void P3DUserInterface::cb_Atom1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Atom1_i(o,v);
}

void P3DUserInterface::cb_Visibility_i(Fl_Menu_*, void*) {
  if (visibilityControlWindow != NULL) {
      visibilityControlWindow->show();
      visibilityWindowCheckBox->value(1);
  };
}
void P3DUserInterface::cb_Visibility(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Visibility_i(o,v);
}

void P3DUserInterface::cb_windowsOptControlWin_i(Fl_Menu_*, void*) {
  optimizerControlDialog->show();
}
void P3DUserInterface::cb_windowsOptControlWin(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_windowsOptControlWin_i(o,v);
}

void P3DUserInterface::cb_windowsOptSettingsWin_i(Fl_Menu_*, void*) {
  optimizerSettingsDialog->show();
}
void P3DUserInterface::cb_windowsOptSettingsWin(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_windowsOptSettingsWin_i(o,v);
}

void P3DUserInterface::cb_windowsOptVisWin_i(Fl_Menu_*, void*) {
  callback->openOptimizationVisualizer();
}
void P3DUserInterface::cb_windowsOptVisWin(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_windowsOptVisWin_i(o,v);
}

void P3DUserInterface::cb_About_i(Fl_Menu_*, void*) {
  callback->showAboutPabloWindow();
}
void P3DUserInterface::cb_About(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void P3DUserInterface::cb_runScriptMenuItem_i(Fl_Menu_*, void*) {
  callback->loadBinaryPabloScript();
}
void P3DUserInterface::cb_runScriptMenuItem(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_runScriptMenuItem_i(o,v);
}

void P3DUserInterface::cb_Output_i(Fl_Menu_*, void*) {
  callback->outputHistogram();
}
void P3DUserInterface::cb_Output(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Output_i(o,v);
}

void P3DUserInterface::cb_Export2_i(Fl_Menu_*, void*) {
  callback->outputPOVRay();
}
void P3DUserInterface::cb_Export2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Export2_i(o,v);
}

void P3DUserInterface::cb_Model2_i(Fl_Menu_*, void*) {
  callback->screenDump();
}
void P3DUserInterface::cb_Model2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Model2_i(o,v);
}

void P3DUserInterface::cb_makeMovieToggle_i(Fl_Menu_*, void*) {
  callback->makeMovie();
}
void P3DUserInterface::cb_makeMovieToggle(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_makeMovieToggle_i(o,v);
}

void P3DUserInterface::cb_Model3_i(Fl_Menu_*, void*) {
  callback->startModelTileSlideShow();
  modelSlideShowDialog->show();
}
void P3DUserInterface::cb_Model3(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Model3_i(o,v);
}

void P3DUserInterface::cb_PGA_i(Fl_Menu_*, void*) {
  callback->pgaInitDeformationWindow();
  pgaDialog->show();
}
void P3DUserInterface::cb_PGA(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_PGA_i(o,v);
}

void P3DUserInterface::cb_CPNS_i(Fl_Menu_*, void*) {
  callback->cpnsInitDeformationWindow();
  cpnsDialog->show();
}
void P3DUserInterface::cb_CPNS(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_CPNS_i(o,v);
}

void P3DUserInterface::cb_optAngle(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_optAngle_i(o,v);
}
void P3DUserInterface::cb_optAngle_i(Fl_Menu_*, void*) {
  callback->optAngle();
}

void P3DUserInterface::cb_optAll(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_optAll_i(o,v);
}
void P3DUserInterface::cb_optAll_i(Fl_Menu_*, void*) {
  callback->optAll();
}

void P3DUserInterface::cb_optLength(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_optLength_i(o,v);
}
void P3DUserInterface::cb_optLength_i(Fl_Menu_*, void*) {
  callback->optLength();
}

void P3DUserInterface::cb_toolsMenuPCA_Deformation_i(Fl_Menu_*, void*) {
  callback->initPCADeform();
}
void P3DUserInterface::cb_toolsMenuPCA_Deformation(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_toolsMenuPCA_Deformation_i(o,v);
}

void P3DUserInterface::cb_Transformation_i(Fl_Menu_*, void*) {
  transformationRecordingTestDialog->show();
}
void P3DUserInterface::cb_Transformation(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Transformation_i(o,v);
}

void P3DUserInterface::cb_Load5_i(Fl_Menu_*, void*) {
  callback->loadOldModel();
}
void P3DUserInterface::cb_Load5(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Load5_i(o,v);
}

void P3DUserInterface::cb_Export3_i(Fl_Menu_*, void*) {
  callback->exportDistanceMap();
}
void P3DUserInterface::cb_Export3(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Export3_i(o,v);
}

void P3DUserInterface::cb_Regularize_i(Fl_Menu_*, void*) {
  regularizerWindow->show();
}
void P3DUserInterface::cb_Regularize(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Regularize_i(o,v);
}

void P3DUserInterface::cb_Interpolate_i(Fl_Menu_*, void*) {
  interpolatedPrimitiveWindow->show();
}
void P3DUserInterface::cb_Interpolate(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Interpolate_i(o,v);
}

void P3DUserInterface::cb_debugSubfigureTransWin_i(Fl_Menu_*, void*) {
  subfigureTransformationTestDialog->show();
}
void P3DUserInterface::cb_debugSubfigureTransWin(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_debugSubfigureTransWin_i(o,v);
}

void P3DUserInterface::cb_debugTestConstrsWin_i(Fl_Menu_*, void*) {
  testConstraintsDialog->show();
}
void P3DUserInterface::cb_debugTestConstrsWin(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_debugTestConstrsWin_i(o,v);
}

void P3DUserInterface::cb_Export4_i(Fl_Menu_*, void*) {
  callback->exportSeuratUVPhi();
}
void P3DUserInterface::cb_Export4(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Export4_i(o,v);
}

void P3DUserInterface::cb_Test_i(Fl_Menu_*, void*) {
  testSeuratDialog->show();
}
void P3DUserInterface::cb_Test(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Test_i(o,v);
}

void P3DUserInterface::cb_useFlatTiles_i(Fl_Menu_*, void*) {
  callback->toggleTileType();
}
void P3DUserInterface::cb_useFlatTiles(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_useFlatTiles_i(o,v);
}

void P3DUserInterface::cb_showBlendingRegion_i(Fl_Menu_*, void*) {
  callback->toggleBlendingRegionDisplay();
}
void P3DUserInterface::cb_showBlendingRegion(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_showBlendingRegion_i(o,v);
}

void P3DUserInterface::cb_openLoadSurfaceValuesWindow_i(Fl_Menu_*, void*) {
  callback->importSurfaceValues();
}
void P3DUserInterface::cb_openLoadSurfaceValuesWindow(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_openLoadSurfaceValuesWindow_i(o,v);
}

void P3DUserInterface::cb_openLoadSurfaceColormapWindow_i(Fl_Menu_*, void*) {
  callback->importSurfaceColorMap();
}
void P3DUserInterface::cb_openLoadSurfaceColormapWindow(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_openLoadSurfaceColormapWindow_i(o,v);
}

void P3DUserInterface::cb_openSurfaceVisualizationWindow_i(Fl_Menu_*, void*) {
  callback->openMatchSurfacesWindow();
}
void P3DUserInterface::cb_openSurfaceVisualizationWindow(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_openSurfaceVisualizationWindow_i(o,v);
}

void P3DUserInterface::cb_Print_i(Fl_Menu_*, void*) {
  callback->printModel(0);
}
void P3DUserInterface::cb_Print(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Print_i(o,v);
}

void P3DUserInterface::cb_Print1_i(Fl_Menu_*, void*) {
  callback->printModel(1);
}
void P3DUserInterface::cb_Print1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Print1_i(o,v);
}

void P3DUserInterface::cb_Print2_i(Fl_Menu_*, void*) {
  callback->printImage();
}
void P3DUserInterface::cb_Print2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Print2_i(o,v);
}

void P3DUserInterface::cb_alignModel0Moment_i(Fl_Menu_*, void*) {
  callback->binaryPabloAlignModel();
}
void P3DUserInterface::cb_alignModel0Moment(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_alignModel0Moment_i(o,v);
}

Fl_Menu_Item P3DUserInterface::menu_menuBar[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 5, 12, 0},
 {"New Model", 0x4006e,  (Fl_Callback*)P3DUserInterface::cb_New, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Model(s)...", 0x4006c,  (Fl_Callback*)P3DUserInterface::cb_Load, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Similarity Transformation...", 0x40078,  (Fl_Callback*)P3DUserInterface::cb_Load1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Save Model", 0x40073,  (Fl_Callback*)P3DUserInterface::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Save Model As...", 0,  (Fl_Callback*)P3DUserInterface::cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Export Model To Image...", 0,  (Fl_Callback*)P3DUserInterface::cb_Export, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Export Model To BYU Tiles...", 0,  (Fl_Callback*)P3DUserInterface::cb_Export1, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Image...", 0x40069,  (Fl_Callback*)P3DUserInterface::cb_Load2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Stacked Image...", 0x50069,  (Fl_Callback*)P3DUserInterface::cb_Load3, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Clear Image", 0,  (Fl_Callback*)P3DUserInterface::cb_Clear, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Save Blurred Image...", 0,  (Fl_Callback*)P3DUserInterface::cb_Save2, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Distance Map", 0,  (Fl_Callback*)P3DUserInterface::cb_loadDistMap, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Image to Distance Map", 0,  (Fl_Callback*)P3DUserInterface::cb_imageToDistanceMap, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Image Landmark Model...", 0,  (Fl_Callback*)P3DUserInterface::cb_loadLandMarkModel, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Clear Image Landmark Model...", 0,  (Fl_Callback*)P3DUserInterface::cb_clearLandMarkModel, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Tile Set...", 0x40074,  (Fl_Callback*)P3DUserInterface::cb_Load4, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Generate Tile Set From Image", 0x40067,  (Fl_Callback*)P3DUserInterface::cb_Generate, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Save Tile Set As...", 0,  (Fl_Callback*)P3DUserInterface::cb_Save3, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load PCA Surface...", 0,  (Fl_Callback*)P3DUserInterface::cb_fileMenuLoadPCASurface, 0, 16, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load PCA Residues...", 0,  (Fl_Callback*)P3DUserInterface::cb_fileMenuLoadPCAResidues, 0, 16, FL_NORMAL_LABEL, 0, 12, 0},
 {"Exit", 0x40071,  (Fl_Callback*)P3DUserInterface::cb_Exit, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Edit", 0,  0, 0, 64, FL_NORMAL_LABEL, 5, 12, 0},
 {"Undo", 0x4007a,  (Fl_Callback*)P3DUserInterface::cb_Undo, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Redo", 0x40079,  (Fl_Callback*)P3DUserInterface::cb_Redo, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Add Quad Figure", 0x40061,  (Fl_Callback*)P3DUserInterface::cb_addQuadFigurePulldown, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Attach a Subfigure...", 0,  (Fl_Callback*)P3DUserInterface::cb_attachSubfigurePulldown, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Detach Marked Subfigure", 0x80064,  (Fl_Callback*)P3DUserInterface::cb_detachSubfigurePulldown, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Remove Selected Figures", 0x40072,  (Fl_Callback*)P3DUserInterface::cb_Remove, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Reorder Figures", 0,  (Fl_Callback*)P3DUserInterface::cb_Reorder, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Landmarks...", 0x4006b,  (Fl_Callback*)P3DUserInterface::cb_editLandmarksMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Model Properties...", 0x40070,  (Fl_Callback*)P3DUserInterface::cb_Model, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Select All", 0x50073,  (Fl_Callback*)P3DUserInterface::cb_Select, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Deselect All", 0x50064,  (Fl_Callback*)P3DUserInterface::cb_Deselect, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Toggle All", 0x50074,  (Fl_Callback*)P3DUserInterface::cb_Toggle, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Apply Loaded Similarity Transform", 0x50074,  (Fl_Callback*)P3DUserInterface::cb_applyTransMenuItem, 0, 1, FL_NORMAL_LABEL, 0, 12, 0},
 {"Selection Type", 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 12, 0},
 {"Atom", 0,  (Fl_Callback*)P3DUserInterface::cb_Atom, 0, 12, FL_NORMAL_LABEL, 0, 12, 0},
 {"Figure", 0,  (Fl_Callback*)P3DUserInterface::cb_Figure, 0, 8, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Elongation...", 0,  (Fl_Callback*)P3DUserInterface::cb_elongationPulldown, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Atom Editor...", 0,  (Fl_Callback*)P3DUserInterface::cb_atomEditorPulldown, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Copy", 0x40063,  (Fl_Callback*)P3DUserInterface::cb_Copy, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Paste", 0x40076,  (Fl_Callback*)P3DUserInterface::cb_Paste, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Mirror", 0x4006d,  (Fl_Callback*)P3DUserInterface::cb_Mirror, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gaussian Blur Image", 0x40062,  (Fl_Callback*)P3DUserInterface::cb_Gaussian, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Constraints...", 0,  (Fl_Callback*)P3DUserInterface::cb_constraintsPulldown, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Preferences...", 0,  (Fl_Callback*)P3DUserInterface::cb_Preferences, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Windows", 0,  0, 0, 64, FL_NORMAL_LABEL, 5, 12, 0},
 {"Display Control", 0,  (Fl_Callback*)P3DUserInterface::cb_Display, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Model Window", 0,  (Fl_Callback*)P3DUserInterface::cb_Model1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Atom Cut Planes", 0,  (Fl_Callback*)P3DUserInterface::cb_Atom1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Visibility Control", 0,  (Fl_Callback*)P3DUserInterface::cb_Visibility, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Optimizer Control", 0x4006f,  (Fl_Callback*)P3DUserInterface::cb_windowsOptControlWin, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Optimizer Settings", 0,  (Fl_Callback*)P3DUserInterface::cb_windowsOptSettingsWin, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Optimization Visualizer", 0,  (Fl_Callback*)P3DUserInterface::cb_windowsOptVisWin, 0, 16, FL_NORMAL_LABEL, 0, 12, 0},
 {"About Pablo", 0,  (Fl_Callback*)P3DUserInterface::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Tools", 0,  0, 0, 64, FL_NORMAL_LABEL, 5, 12, 0},
 {"Optimize Angle and Radii", 0,  (Fl_Callback*)P3DUserInterface::cb_optAll, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Optimize Angle of s-rep", 0,  (Fl_Callback*)P3DUserInterface::cb_optAngle, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Optimize Length of s-rep", 0,  (Fl_Callback*)P3DUserInterface::cb_optLength, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Run Binary Pablo Script", 0,  (Fl_Callback*)P3DUserInterface::cb_runScriptMenuItem, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Output Histogram...", 0,  (Fl_Callback*)P3DUserInterface::cb_Output, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Export to POV-Ray...", 0,  (Fl_Callback*)P3DUserInterface::cb_Export2, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Model Window Dump", 0x40064,  (Fl_Callback*)P3DUserInterface::cb_Model2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Make Movie", 0,  (Fl_Callback*)P3DUserInterface::cb_makeMovieToggle, 0, 2, FL_NORMAL_LABEL, 0, 12, 0},
 {"Model/Tile Slide Show", 0x40068,  (Fl_Callback*)P3DUserInterface::cb_Model3, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"PGA Deformation...", 0,  (Fl_Callback*)P3DUserInterface::cb_PGA, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"CPNS Deformation...", 0,  (Fl_Callback*)P3DUserInterface::cb_CPNS, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"PCA Deformation...", 0,  (Fl_Callback*)P3DUserInterface::cb_toolsMenuPCA_Deformation, 0, 16, FL_NORMAL_LABEL, 0, 12, 0},
 {"Transformation Recording...", 0,  (Fl_Callback*)P3DUserInterface::cb_Transformation, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Test/Debug", 0,  0, 0, 64, FL_NORMAL_LABEL, 5, 12, 0},
 {"Load Old Model...", 0,  (Fl_Callback*)P3DUserInterface::cb_Load5, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Export Distance Map...", 0,  (Fl_Callback*)P3DUserInterface::cb_Export3, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Regularize Model...", 0,  (Fl_Callback*)P3DUserInterface::cb_Regularize, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Interpolate Atom...", 0,  (Fl_Callback*)P3DUserInterface::cb_Interpolate, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Subfigure Transformations...", 0,  (Fl_Callback*)P3DUserInterface::cb_debugSubfigureTransWin, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Test Constraints...", 0,  (Fl_Callback*)P3DUserInterface::cb_debugTestConstrsWin, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Export seurat u v phi...", 0,  (Fl_Callback*)P3DUserInterface::cb_Export4, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Test Seurat...", 0,  (Fl_Callback*)P3DUserInterface::cb_Test, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Render With Flat Tiles ", 0,  (Fl_Callback*)P3DUserInterface::cb_useFlatTiles, 0, 2, FL_NORMAL_LABEL, 0, 12, 0},
 {"Display Blending Region ", 0,  (Fl_Callback*)P3DUserInterface::cb_showBlendingRegion, 0, 130, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Surface Values...", 0,  (Fl_Callback*)P3DUserInterface::cb_openLoadSurfaceValuesWindow, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load Surface Colormap...", 0,  (Fl_Callback*)P3DUserInterface::cb_openLoadSurfaceColormapWindow, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Surface Visualization Control...", 0,  (Fl_Callback*)P3DUserInterface::cb_openSurfaceVisualizationWindow, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Print Model (Model Coords)", 0,  (Fl_Callback*)P3DUserInterface::cb_Print, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Print Model (World Coords)", 0,  (Fl_Callback*)P3DUserInterface::cb_Print1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Print Image Properties", 0,  (Fl_Callback*)P3DUserInterface::cb_Print2, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Align Model 0th Moment", 0,  (Fl_Callback*)P3DUserInterface::cb_alignModel0Moment, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* P3DUserInterface::loadDistMap = P3DUserInterface::menu_menuBar + 12;
Fl_Menu_Item* P3DUserInterface::imageToDistanceMap = P3DUserInterface::menu_menuBar + 13;
Fl_Menu_Item* P3DUserInterface::loadLandMarkModel = P3DUserInterface::menu_menuBar + 14;
Fl_Menu_Item* P3DUserInterface::clearLandMarkModel = P3DUserInterface::menu_menuBar + 15;
Fl_Menu_Item* P3DUserInterface::fileMenuLoadPCASurface = P3DUserInterface::menu_menuBar + 19;
Fl_Menu_Item* P3DUserInterface::fileMenuLoadPCAResidues = P3DUserInterface::menu_menuBar + 20;
Fl_Menu_Item* P3DUserInterface::addQuadFigurePulldown = P3DUserInterface::menu_menuBar + 26;
Fl_Menu_Item* P3DUserInterface::attachSubfigurePulldown = P3DUserInterface::menu_menuBar + 27;
Fl_Menu_Item* P3DUserInterface::detachSubfigurePulldown = P3DUserInterface::menu_menuBar + 28;
Fl_Menu_Item* P3DUserInterface::editLandmarksMenuItem = P3DUserInterface::menu_menuBar + 31;
Fl_Menu_Item* P3DUserInterface::applyTransMenuItem = P3DUserInterface::menu_menuBar + 36;
Fl_Menu_Item* P3DUserInterface::elongationPulldown = P3DUserInterface::menu_menuBar + 41;
Fl_Menu_Item* P3DUserInterface::atomEditorPulldown = P3DUserInterface::menu_menuBar + 42;
Fl_Menu_Item* P3DUserInterface::constraintsPulldown = P3DUserInterface::menu_menuBar + 47;
Fl_Menu_Item* P3DUserInterface::windowsOptControlWin = P3DUserInterface::menu_menuBar + 55;
Fl_Menu_Item* P3DUserInterface::windowsOptSettingsWin = P3DUserInterface::menu_menuBar + 56;
Fl_Menu_Item* P3DUserInterface::windowsOptVisWin = P3DUserInterface::menu_menuBar + 57;
Fl_Menu_Item* P3DUserInterface::runScriptMenuItem = P3DUserInterface::menu_menuBar + 61;
Fl_Menu_Item* P3DUserInterface::makeMovieToggle = P3DUserInterface::menu_menuBar + 65;
Fl_Menu_Item* P3DUserInterface::toolsMenuPCA_Deformation = P3DUserInterface::menu_menuBar + 68;
Fl_Menu_Item* P3DUserInterface::test_debug_menu = P3DUserInterface::menu_menuBar + 71;
Fl_Menu_Item* P3DUserInterface::debugSubfigureTransWin = P3DUserInterface::menu_menuBar + 76;
Fl_Menu_Item* P3DUserInterface::debugTestConstrsWin = P3DUserInterface::menu_menuBar + 77;
Fl_Menu_Item* P3DUserInterface::useFlatTiles = P3DUserInterface::menu_menuBar + 80;
Fl_Menu_Item* P3DUserInterface::showBlendingRegion = P3DUserInterface::menu_menuBar + 81;
Fl_Menu_Item* P3DUserInterface::openLoadSurfaceValuesWindow = P3DUserInterface::menu_menuBar + 82;
Fl_Menu_Item* P3DUserInterface::openLoadSurfaceColormapWindow = P3DUserInterface::menu_menuBar + 83;
Fl_Menu_Item* P3DUserInterface::openSurfaceVisualizationWindow = P3DUserInterface::menu_menuBar + 84;
Fl_Menu_Item* P3DUserInterface::alignModel0Moment = P3DUserInterface::menu_menuBar + 88;

void P3DUserInterface::cb_secretButton_i(Fl_Button*, void*) {
  callback->secretAction();
}
void P3DUserInterface::cb_secretButton(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_secretButton_i(o,v);
}

void P3DUserInterface::cb_displayControlWindow_i(movable_Fl_Window*, void*) {
  displayControlWindow->hide();
}
void P3DUserInterface::cb_displayControlWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_displayControlWindow_i(o,v);
}

void P3DUserInterface::cb_unitCubeCheckBox_i(Fl_Check_Button*, void*) {
  callback->toggleUnitCube(unitCubeCheckBox->value());
}
void P3DUserInterface::cb_unitCubeCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_unitCubeCheckBox_i(o,v);
}

void P3DUserInterface::cb_stdAxesCheckBox_i(Fl_Check_Button*, void*) {
  callback->toggleStdAxes(stdAxesCheckBox->value());
}
void P3DUserInterface::cb_stdAxesCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_stdAxesCheckBox_i(o,v);
}

void P3DUserInterface::cb_stdRockingCheckBox_i(Fl_Check_Button*, void*) {
  callback->toggleRocking(stdRockingCheckBox->value());
}
void P3DUserInterface::cb_stdRockingCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_stdRockingCheckBox_i(o,v);
}

void P3DUserInterface::cb_visibilityWindowCheckBox_i(Fl_Check_Button*, void*) {
  if (visibilityWindowCheckBox->value()) {
      visibilityControlWindow->show();
      visibilityWindowCheckBox->value(1);
  }
  else {
      visibilityControlWindow->hide();
      visibilityWindowCheckBox->value(0);
  };
}
void P3DUserInterface::cb_visibilityWindowCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_visibilityWindowCheckBox_i(o,v);
}

void P3DUserInterface::cb_cutPlaneWindowCheckBox_i(Fl_Check_Button*, void*) {
  if (cutPlaneWindowCheckBox->value() == 1) {
      cutPlanesControlWindow->show();
      cutPlaneWindowCheckBox->value(1);
  }
  else {
      cutPlanesControlWindow->hide();
      cutPlaneWindowCheckBox->value(0);
  };
}
void P3DUserInterface::cb_cutPlaneWindowCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cutPlaneWindowCheckBox_i(o,v);
}

void P3DUserInterface::cb_SurfaceLevel_0Btn_i(Fl_Check_Button*, void*) {
  callback->setSurfaceLevel(0);
}
void P3DUserInterface::cb_SurfaceLevel_0Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_SurfaceLevel_0Btn_i(o,v);
}

void P3DUserInterface::cb_SurfaceLevel_1Btn_i(Fl_Check_Button*, void*) {
  callback->setSurfaceLevel(1);
}
void P3DUserInterface::cb_SurfaceLevel_1Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_SurfaceLevel_1Btn_i(o,v);
}

void P3DUserInterface::cb_SurfaceLevel_2Btn_i(Fl_Check_Button*, void*) {
  callback->setSurfaceLevel(2);
}
void P3DUserInterface::cb_SurfaceLevel_2Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_SurfaceLevel_2Btn_i(o,v);
}

void P3DUserInterface::cb_SurfaceLevel_3Btn_i(Fl_Check_Button*, void*) {
  callback->setSurfaceLevel(3);
}
void P3DUserInterface::cb_SurfaceLevel_3Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_SurfaceLevel_3Btn_i(o,v);
}

void P3DUserInterface::cb_noneBtn_i(Fl_Check_Button*, void*) {
  callback->setSurfaceStyle(M3D_NONE);
}
void P3DUserInterface::cb_noneBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_noneBtn_i(o,v);
}

void P3DUserInterface::cb_pointcloudBtn_i(Fl_Check_Button*, void*) {
  callback->setSurfaceStyle(M3D_POINTCLOUD);
}
void P3DUserInterface::cb_pointcloudBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_pointcloudBtn_i(o,v);
}

void P3DUserInterface::cb_wireframeBtn_i(Fl_Check_Button*, void*) {
  callback->setSurfaceStyle(M3D_WIREFRAME);
}
void P3DUserInterface::cb_wireframeBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_wireframeBtn_i(o,v);
}

void P3DUserInterface::cb_solidBtn_i(Fl_Check_Button*, void*) {
  callback->setSurfaceStyle(M3D_SOLID);
}
void P3DUserInterface::cb_solidBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_solidBtn_i(o,v);
}

void P3DUserInterface::cb_blendFiguresBtn_i(Fl_Check_Button*, void*) {
  callback->toggleBlendSubfigures(blendFiguresBtn->value());
}
void P3DUserInterface::cb_blendFiguresBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_blendFiguresBtn_i(o,v);
}

void P3DUserInterface::cb_drawBoundaryBtn_i(Fl_Check_Button*, void*) {
  callback->toggleDrawBoundary(drawBoundaryBtn->value());
}
void P3DUserInterface::cb_drawBoundaryBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_drawBoundaryBtn_i(o,v);
}

void P3DUserInterface::cb_drawFigureNamesBtn_i(Fl_Check_Button*, void*) {
  callback->toggleDrawFigureNames(drawFigureNamesBtn->value());
}
void P3DUserInterface::cb_drawFigureNamesBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_drawFigureNamesBtn_i(o,v);
}

void P3DUserInterface::cb_drawBoundaryBtn2_i(Fl_Check_Button*, void*) {
  callback->toggleDrawBoundary(drawBoundaryBtn2->value());
}
void P3DUserInterface::cb_drawBoundaryBtn2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_drawBoundaryBtn2_i(o,v);
}

void P3DUserInterface::cb_xImagePlaneCheckBox_i(Fl_Check_Button*, void*) {
  callback->viewXImagePlane(xImagePlaneCheckBox->value());
}
void P3DUserInterface::cb_xImagePlaneCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_xImagePlaneCheckBox_i(o,v);
}

void P3DUserInterface::cb_xImagePlanePositionRoller_i(Fl_Roller*, void*) {
  callback->setXImagePlanePosition();
}
void P3DUserInterface::cb_xImagePlanePositionRoller(Fl_Roller* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_xImagePlanePositionRoller_i(o,v);
}

void P3DUserInterface::cb_yImagePlaneCheckBox_i(Fl_Check_Button*, void*) {
  callback->viewYImagePlane(yImagePlaneCheckBox->value());
}
void P3DUserInterface::cb_yImagePlaneCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_yImagePlaneCheckBox_i(o,v);
}

void P3DUserInterface::cb_yImagePlanePositionRoller_i(Fl_Roller*, void*) {
  callback->setYImagePlanePosition();
}
void P3DUserInterface::cb_yImagePlanePositionRoller(Fl_Roller* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_yImagePlanePositionRoller_i(o,v);
}

void P3DUserInterface::cb_zImagePlaneCheckBox_i(Fl_Check_Button*, void*) {
  callback->viewZImagePlane(zImagePlaneCheckBox->value());
}
void P3DUserInterface::cb_zImagePlaneCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_zImagePlaneCheckBox_i(o,v);
}

void P3DUserInterface::cb_zImagePlanePositionRoller_i(Fl_Roller*, void*) {
  callback->setZImagePlanePosition();
}
void P3DUserInterface::cb_zImagePlanePositionRoller(Fl_Roller* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_zImagePlanePositionRoller_i(o,v);
}

void P3DUserInterface::cb_intensityMinSlider_i(Fl_Slider*, void*) {
  callback->intensityWindowSliderChanged();
}
void P3DUserInterface::cb_intensityMinSlider(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intensityMinSlider_i(o,v);
}

void P3DUserInterface::cb_intensityMinValuator_i(Fl_Value_Input*, void*) {
  callback->intensityWindowValuatorChanged();
}
void P3DUserInterface::cb_intensityMinValuator(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intensityMinValuator_i(o,v);
}

void P3DUserInterface::cb_intensityMaxSlider_i(Fl_Slider*, void*) {
  callback->intensityWindowSliderChanged();
}
void P3DUserInterface::cb_intensityMaxSlider(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intensityMaxSlider_i(o,v);
}

void P3DUserInterface::cb_intensityMaxValuator_i(Fl_Value_Input*, void*) {
  callback->intensityWindowValuatorChanged();
}
void P3DUserInterface::cb_intensityMaxValuator(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intensityMaxValuator_i(o,v);
}

void P3DUserInterface::cb_viewTileSetCheckBox_i(Fl_Check_Button*, void*) {
  callback->viewTileSet(viewTileSetCheckBox->value());
}
void P3DUserInterface::cb_viewTileSetCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_viewTileSetCheckBox_i(o,v);
}

void P3DUserInterface::cb_tileSetColorCheckBox_i(Fl_Check_Button*, void*) {
  callback->useDefaultColor(tileSetColorCheckBox->value());
}
void P3DUserInterface::cb_tileSetColorCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_tileSetColorCheckBox_i(o,v);
}

void P3DUserInterface::cb_tileAlphaSlider_i(Fl_Value_Slider*, void*) {
  callback->setTileAlpha(tileAlphaSlider->value());
}
void P3DUserInterface::cb_tileAlphaSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_tileAlphaSlider_i(o,v);
}

void P3DUserInterface::cb_tileSetSolidCheckBox_i(Fl_Check_Button*, void*) {
  callback->tileSetSolid(tileSetSolidCheckBox->value());
}
void P3DUserInterface::cb_tileSetSolidCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_tileSetSolidCheckBox_i(o,v);
}

void P3DUserInterface::cb_tileSetBrightCheckBox_i(Fl_Round_Button*, void*) {
  callback->tileSetBright(tileSetBrightCheckBox->value());
}
void P3DUserInterface::cb_tileSetBrightCheckBox(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileSetBrightCheckBox_i(o,v);
}

void P3DUserInterface::cb_tileSetNormalCheckBox_i(Fl_Round_Button*, void*) {
  callback->tileSetBright(0);
}
void P3DUserInterface::cb_tileSetNormalCheckBox(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileSetNormalCheckBox_i(o,v);
}

void P3DUserInterface::cb_tileSetDarkCheckBox_i(Fl_Round_Button*, void*) {
  callback->tileSetDark(tileSetDarkCheckBox->value());
}
void P3DUserInterface::cb_tileSetDarkCheckBox(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileSetDarkCheckBox_i(o,v);
}

void P3DUserInterface::cb_tileSetMobileCheckBox_i(Fl_Check_Button*, void*) {
  callback->tileSetMobile(tileSetMobileCheckBox->value());
}
void P3DUserInterface::cb_tileSetMobileCheckBox(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_tileSetMobileCheckBox_i(o,v);
}

void P3DUserInterface::cb_tileMobileFig0_i(Fl_Check_Button*, void*) {
  callback->tileMobileToggleFigure(0);
}
void P3DUserInterface::cb_tileMobileFig0(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileMobileFig0_i(o,v);
}

void P3DUserInterface::cb_tileMobileFig1_i(Fl_Check_Button*, void*) {
  callback->tileMobileToggleFigure(1);
}
void P3DUserInterface::cb_tileMobileFig1(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileMobileFig1_i(o,v);
}

void P3DUserInterface::cb_tileMobileFig2_i(Fl_Check_Button*, void*) {
  callback->tileMobileToggleFigure(2);
}
void P3DUserInterface::cb_tileMobileFig2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileMobileFig2_i(o,v);
}

void P3DUserInterface::cb_tileMobileFig3_i(Fl_Check_Button*, void*) {
  callback->tileMobileToggleFigure(3);
}
void P3DUserInterface::cb_tileMobileFig3(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileMobileFig3_i(o,v);
}

void P3DUserInterface::cb_tileMobileFig4_i(Fl_Check_Button*, void*) {
  callback->tileMobileToggleFigure(4);
}
void P3DUserInterface::cb_tileMobileFig4(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileMobileFig4_i(o,v);
}

void P3DUserInterface::cb_tileMobileFig5_i(Fl_Check_Button*, void*) {
  callback->tileMobileToggleFigure(5);
}
void P3DUserInterface::cb_tileMobileFig5(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tileMobileFig5_i(o,v);
}

void P3DUserInterface::cb_clipCapture0_i(Fl_Button*, void*) {
  callback->clipCaptureView0();
}
void P3DUserInterface::cb_clipCapture0(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipCapture0_i(o,v);
}

void P3DUserInterface::cb_clipCapture1_i(Fl_Button*, void*) {
  callback->clipCaptureView1();
}
void P3DUserInterface::cb_clipCapture1(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipCapture1_i(o,v);
}

void P3DUserInterface::cb_clipCapture2_i(Fl_Button*, void*) {
  callback->clipCaptureView2();
}
void P3DUserInterface::cb_clipCapture2(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipCapture2_i(o,v);
}

void P3DUserInterface::cb_clipEnable0_i(Fl_Check_Button*, void*) {
  callback->clipToggleEnable(0);
}
void P3DUserInterface::cb_clipEnable0(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnable0_i(o,v);
}

void P3DUserInterface::cb_clipEnable1_i(Fl_Check_Button*, void*) {
  callback->clipToggleEnable(1);
}
void P3DUserInterface::cb_clipEnable1(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnable1_i(o,v);
}

void P3DUserInterface::cb_clipEnable2_i(Fl_Check_Button*, void*) {
  callback->clipToggleEnable(2);
}
void P3DUserInterface::cb_clipEnable2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnable2_i(o,v);
}

void P3DUserInterface::cb_clipA0_i(Fl_Value_Input*, void*) {
  callback->clipAValuatorChanged(0);
}
void P3DUserInterface::cb_clipA0(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipA0_i(o,v);
}

void P3DUserInterface::cb_clipB0_i(Fl_Value_Input*, void*) {
  callback->clipBValuatorChanged(0);
}
void P3DUserInterface::cb_clipB0(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipB0_i(o,v);
}

void P3DUserInterface::cb_clipC0_i(Fl_Value_Input*, void*) {
  callback->clipCValuatorChanged(0);
}
void P3DUserInterface::cb_clipC0(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipC0_i(o,v);
}

void P3DUserInterface::cb_clipD0_i(Fl_Value_Input*, void*) {
  callback->clipDValuatorChanged(0);
}
void P3DUserInterface::cb_clipD0(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipD0_i(o,v);
}

void P3DUserInterface::cb_clipA1_i(Fl_Value_Input*, void*) {
  callback->clipAValuatorChanged(1);
}
void P3DUserInterface::cb_clipA1(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipA1_i(o,v);
}

void P3DUserInterface::cb_clipB1_i(Fl_Value_Input*, void*) {
  callback->clipBValuatorChanged(1);
}
void P3DUserInterface::cb_clipB1(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipB1_i(o,v);
}

void P3DUserInterface::cb_clipC1_i(Fl_Value_Input*, void*) {
  callback->clipCValuatorChanged(1);
}
void P3DUserInterface::cb_clipC1(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipC1_i(o,v);
}

void P3DUserInterface::cb_clipD1_i(Fl_Value_Input*, void*) {
  callback->clipDValuatorChanged(1);
}
void P3DUserInterface::cb_clipD1(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipD1_i(o,v);
}

void P3DUserInterface::cb_clipA2_i(Fl_Value_Input*, void*) {
  callback->clipAValuatorChanged(2);
}
void P3DUserInterface::cb_clipA2(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipA2_i(o,v);
}

void P3DUserInterface::cb_clipB2_i(Fl_Value_Input*, void*) {
  callback->clipBValuatorChanged(2);
}
void P3DUserInterface::cb_clipB2(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipB2_i(o,v);
}

void P3DUserInterface::cb_clipC2_i(Fl_Value_Input*, void*) {
  callback->clipCValuatorChanged(2);
}
void P3DUserInterface::cb_clipC2(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipC2_i(o,v);
}

void P3DUserInterface::cb_clipD2_i(Fl_Value_Input*, void*) {
  callback->clipDValuatorChanged(2);
}
void P3DUserInterface::cb_clipD2(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipD2_i(o,v);
}

void P3DUserInterface::cb_clipFlip0_i(Fl_Button*, void*) {
  callback->clipFlipView0();
}
void P3DUserInterface::cb_clipFlip0(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipFlip0_i(o,v);
}

void P3DUserInterface::cb_clipFlip1_i(Fl_Button*, void*) {
  callback->clipFlipView1();
}
void P3DUserInterface::cb_clipFlip1(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipFlip1_i(o,v);
}

void P3DUserInterface::cb_clipFlip2_i(Fl_Button*, void*) {
  callback->clipFlipView2();
}
void P3DUserInterface::cb_clipFlip2(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipFlip2_i(o,v);
}

void P3DUserInterface::cb_clipCapture3_i(Fl_Button*, void*) {
  callback->clipCaptureView3();
}
void P3DUserInterface::cb_clipCapture3(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipCapture3_i(o,v);
}

void P3DUserInterface::cb_clipCapture4_i(Fl_Button*, void*) {
  callback->clipCaptureView4();
}
void P3DUserInterface::cb_clipCapture4(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipCapture4_i(o,v);
}

void P3DUserInterface::cb_clipCapture5_i(Fl_Button*, void*) {
  callback->clipCaptureView5();
}
void P3DUserInterface::cb_clipCapture5(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipCapture5_i(o,v);
}

void P3DUserInterface::cb_clipEnable3_i(Fl_Check_Button*, void*) {
  callback->clipToggleEnable(3);
}
void P3DUserInterface::cb_clipEnable3(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnable3_i(o,v);
}

void P3DUserInterface::cb_clipEnable4_i(Fl_Check_Button*, void*) {
  callback->clipToggleEnable(4);
}
void P3DUserInterface::cb_clipEnable4(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnable4_i(o,v);
}

void P3DUserInterface::cb_clipEnable5_i(Fl_Check_Button*, void*) {
  callback->clipToggleEnable(5);
}
void P3DUserInterface::cb_clipEnable5(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnable5_i(o,v);
}

void P3DUserInterface::cb_clipA3_i(Fl_Value_Input*, void*) {
  callback->clipAValuatorChanged(3);
}
void P3DUserInterface::cb_clipA3(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipA3_i(o,v);
}

void P3DUserInterface::cb_clipB3_i(Fl_Value_Input*, void*) {
  callback->clipBValuatorChanged(3);
}
void P3DUserInterface::cb_clipB3(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipB3_i(o,v);
}

void P3DUserInterface::cb_clipC3_i(Fl_Value_Input*, void*) {
  callback->clipCValuatorChanged(3);
}
void P3DUserInterface::cb_clipC3(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipC3_i(o,v);
}

void P3DUserInterface::cb_clipD3_i(Fl_Value_Input*, void*) {
  callback->clipDValuatorChanged(3);
}
void P3DUserInterface::cb_clipD3(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipD3_i(o,v);
}

void P3DUserInterface::cb_clipA4_i(Fl_Value_Input*, void*) {
  callback->clipAValuatorChanged(4);
}
void P3DUserInterface::cb_clipA4(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipA4_i(o,v);
}

void P3DUserInterface::cb_clipB4_i(Fl_Value_Input*, void*) {
  callback->clipBValuatorChanged(4);
}
void P3DUserInterface::cb_clipB4(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipB4_i(o,v);
}

void P3DUserInterface::cb_clipC4_i(Fl_Value_Input*, void*) {
  callback->clipCValuatorChanged(4);
}
void P3DUserInterface::cb_clipC4(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipC4_i(o,v);
}

void P3DUserInterface::cb_clipD4_i(Fl_Value_Input*, void*) {
  callback->clipDValuatorChanged(4);
}
void P3DUserInterface::cb_clipD4(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipD4_i(o,v);
}

void P3DUserInterface::cb_clipA5_i(Fl_Value_Input*, void*) {
  callback->clipAValuatorChanged(5);
}
void P3DUserInterface::cb_clipA5(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipA5_i(o,v);
}

void P3DUserInterface::cb_clipB5_i(Fl_Value_Input*, void*) {
  callback->clipBValuatorChanged(5);
}
void P3DUserInterface::cb_clipB5(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipB5_i(o,v);
}

void P3DUserInterface::cb_clipC5_i(Fl_Value_Input*, void*) {
  callback->clipCValuatorChanged(5);
}
void P3DUserInterface::cb_clipC5(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipC5_i(o,v);
}

void P3DUserInterface::cb_clipD5_i(Fl_Value_Input*, void*) {
  callback->clipDValuatorChanged(5);
}
void P3DUserInterface::cb_clipD5(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipD5_i(o,v);
}

void P3DUserInterface::cb_clipFlip3_i(Fl_Button*, void*) {
  callback->clipFlipView3();
}
void P3DUserInterface::cb_clipFlip3(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipFlip3_i(o,v);
}

void P3DUserInterface::cb_clipFlip4_i(Fl_Button*, void*) {
  callback->clipFlipView4();
}
void P3DUserInterface::cb_clipFlip4(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipFlip4_i(o,v);
}

void P3DUserInterface::cb_clipFlip5_i(Fl_Button*, void*) {
  callback->clipFlipView5();
}
void P3DUserInterface::cb_clipFlip5(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipFlip5_i(o,v);
}

void P3DUserInterface::cb_clipEnableModel0_i(Fl_Check_Button*, void*) {
  callback->clipToggleModel(0);
}
void P3DUserInterface::cb_clipEnableModel0(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableModel0_i(o,v);
}

void P3DUserInterface::cb_clipEnableModel1_i(Fl_Check_Button*, void*) {
  callback->clipToggleModel(1);
}
void P3DUserInterface::cb_clipEnableModel1(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableModel1_i(o,v);
}

void P3DUserInterface::cb_clipEnableModel2_i(Fl_Check_Button*, void*) {
  callback->clipToggleModel(2);
}
void P3DUserInterface::cb_clipEnableModel2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableModel2_i(o,v);
}

void P3DUserInterface::cb_clipEnableTile0_i(Fl_Check_Button*, void*) {
  callback->clipToggleTile(0);
}
void P3DUserInterface::cb_clipEnableTile0(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableTile0_i(o,v);
}

void P3DUserInterface::cb_clipEnableTile1_i(Fl_Check_Button*, void*) {
  callback->clipToggleTile(1);
}
void P3DUserInterface::cb_clipEnableTile1(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableTile1_i(o,v);
}

void P3DUserInterface::cb_clipEnableTile2_i(Fl_Check_Button*, void*) {
  callback->clipToggleTile(2);
}
void P3DUserInterface::cb_clipEnableTile2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableTile2_i(o,v);
}

void P3DUserInterface::cb_clipEnableImagePlane0_i(Fl_Check_Button*, void*) {
  callback->clipToggleImagePlane(0);
}
void P3DUserInterface::cb_clipEnableImagePlane0(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableImagePlane0_i(o,v);
}

void P3DUserInterface::cb_clipEnableImagePlane1_i(Fl_Check_Button*, void*) {
  callback->clipToggleImagePlane(1);
}
void P3DUserInterface::cb_clipEnableImagePlane1(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableImagePlane1_i(o,v);
}

void P3DUserInterface::cb_clipEnableImagePlane2_i(Fl_Check_Button*, void*) {
  callback->clipToggleImagePlane(2);
}
void P3DUserInterface::cb_clipEnableImagePlane2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableImagePlane2_i(o,v);
}

void P3DUserInterface::cb_clipEnableScene0_i(Fl_Check_Button*, void*) {
  callback->clipToggleScene(0);
}
void P3DUserInterface::cb_clipEnableScene0(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableScene0_i(o,v);
}

void P3DUserInterface::cb_clipEnableScene1_i(Fl_Check_Button*, void*) {
  callback->clipToggleScene(1);
}
void P3DUserInterface::cb_clipEnableScene1(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableScene1_i(o,v);
}

void P3DUserInterface::cb_clipEnableScene2_i(Fl_Check_Button*, void*) {
  callback->clipToggleScene(2);
}
void P3DUserInterface::cb_clipEnableScene2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableScene2_i(o,v);
}

void P3DUserInterface::cb_clipEnableView0_i(Fl_Check_Button*, void*) {
  callback->clipToggleView(0);
}
void P3DUserInterface::cb_clipEnableView0(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableView0_i(o,v);
}

void P3DUserInterface::cb_clipEnableView1_i(Fl_Check_Button*, void*) {
  callback->clipToggleView(1);
}
void P3DUserInterface::cb_clipEnableView1(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableView1_i(o,v);
}

void P3DUserInterface::cb_clipEnableView2_i(Fl_Check_Button*, void*) {
  callback->clipToggleView(2);
}
void P3DUserInterface::cb_clipEnableView2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableView2_i(o,v);
}

void P3DUserInterface::cb_clipEnableModel3_i(Fl_Check_Button*, void*) {
  callback->clipToggleModel(3);
}
void P3DUserInterface::cb_clipEnableModel3(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableModel3_i(o,v);
}

void P3DUserInterface::cb_clipEnableModel4_i(Fl_Check_Button*, void*) {
  callback->clipToggleModel(4);
}
void P3DUserInterface::cb_clipEnableModel4(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableModel4_i(o,v);
}

void P3DUserInterface::cb_clipEnableModel5_i(Fl_Check_Button*, void*) {
  callback->clipToggleModel(5);
}
void P3DUserInterface::cb_clipEnableModel5(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableModel5_i(o,v);
}

void P3DUserInterface::cb_clipEnableTile3_i(Fl_Check_Button*, void*) {
  callback->clipToggleTile(3);
}
void P3DUserInterface::cb_clipEnableTile3(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableTile3_i(o,v);
}

void P3DUserInterface::cb_clipEnableTile4_i(Fl_Check_Button*, void*) {
  callback->clipToggleTile(4);
}
void P3DUserInterface::cb_clipEnableTile4(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableTile4_i(o,v);
}

void P3DUserInterface::cb_clipEnableTile5_i(Fl_Check_Button*, void*) {
  callback->clipToggleTile(5);
}
void P3DUserInterface::cb_clipEnableTile5(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableTile5_i(o,v);
}

void P3DUserInterface::cb_clipEnableImagePlane3_i(Fl_Check_Button*, void*) {
  callback->clipToggleImagePlane(3);
}
void P3DUserInterface::cb_clipEnableImagePlane3(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableImagePlane3_i(o,v);
}

void P3DUserInterface::cb_clipEnableImagePlane4_i(Fl_Check_Button*, void*) {
  callback->clipToggleImagePlane(4);
}
void P3DUserInterface::cb_clipEnableImagePlane4(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableImagePlane4_i(o,v);
}

void P3DUserInterface::cb_clipEnableImagePlane5_i(Fl_Check_Button*, void*) {
  callback->clipToggleImagePlane(5);
}
void P3DUserInterface::cb_clipEnableImagePlane5(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableImagePlane5_i(o,v);
}

void P3DUserInterface::cb_clipEnableScene3_i(Fl_Check_Button*, void*) {
  callback->clipToggleScene(3);
}
void P3DUserInterface::cb_clipEnableScene3(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableScene3_i(o,v);
}

void P3DUserInterface::cb_clipEnableScene4_i(Fl_Check_Button*, void*) {
  callback->clipToggleScene(4);
}
void P3DUserInterface::cb_clipEnableScene4(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableScene4_i(o,v);
}

void P3DUserInterface::cb_clipEnableScene5_i(Fl_Check_Button*, void*) {
  callback->clipToggleScene(5);
}
void P3DUserInterface::cb_clipEnableScene5(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableScene5_i(o,v);
}

void P3DUserInterface::cb_clipEnableView3_i(Fl_Check_Button*, void*) {
  callback->clipToggleView(3);
}
void P3DUserInterface::cb_clipEnableView3(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableView3_i(o,v);
}

void P3DUserInterface::cb_clipEnableView4_i(Fl_Check_Button*, void*) {
  callback->clipToggleView(4);
}
void P3DUserInterface::cb_clipEnableView4(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableView4_i(o,v);
}

void P3DUserInterface::cb_clipEnableView5_i(Fl_Check_Button*, void*) {
  callback->clipToggleView(5);
}
void P3DUserInterface::cb_clipEnableView5(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clipEnableView5_i(o,v);
}

void P3DUserInterface::cb_Reset_i(Fl_Button*, void*) {
  callback->resetView();
}
void P3DUserInterface::cb_Reset(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

void P3DUserInterface::cb_aboutPabloWindow_i(movable_Fl_Window*, void*) {
  aboutPabloWindow->hide();
}
void P3DUserInterface::cb_aboutPabloWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_aboutPabloWindow_i(o,v);
}

void P3DUserInterface::cb_aboutPabloDontShowButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsAboutWindow(0 == aboutPabloDontShowButton->value());
}
void P3DUserInterface::cb_aboutPabloDontShowButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_aboutPabloDontShowButton_i(o,v);
}

void P3DUserInterface::cb_aboutBinaryPabloWindow_i(movable_Fl_Window*, void*) {
  aboutBinaryPabloWindow->hide();
}
void P3DUserInterface::cb_aboutBinaryPabloWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_aboutBinaryPabloWindow_i(o,v);
}

void P3DUserInterface::cb_aboutBinaryPabloDontShowButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsAboutWindow(0 == aboutBinaryPabloDontShowButton->value());
}
void P3DUserInterface::cb_aboutBinaryPabloDontShowButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_aboutBinaryPabloDontShowButton_i(o,v);
}

void P3DUserInterface::cb_preferencesEditorWindow_i(movable_Fl_Window*, void*) {
  preferencesEditorWindow->hide();
}
void P3DUserInterface::cb_preferencesEditorWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_preferencesEditorWindow_i(o,v);
}

void P3DUserInterface::cb_Close_i(Fl_Return_Button*, void*) {
  preferencesEditorWindow->hide();
}
void P3DUserInterface::cb_Close(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void P3DUserInterface::cb_displayPrefsRockingAngle_i(Fl_Value_Slider*, void*) {
  callback->setPrefsRockingAngle(displayPrefsRockingAngle->value());
}
void P3DUserInterface::cb_displayPrefsRockingAngle(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_displayPrefsRockingAngle_i(o,v);
}

void P3DUserInterface::cb_displayPrefsRockingIncrement_i(Fl_Value_Slider*, void*) {
  callback->setPrefsRockingIncrement(displayPrefsRockingIncrement->value());
}
void P3DUserInterface::cb_displayPrefsRockingIncrement(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_displayPrefsRockingIncrement_i(o,v);
}

void P3DUserInterface::cb_displayPrefsRememberPosn_i(Fl_Check_Button*, void*) {
  callback->setPrefsRememberPositions(displayPrefsRememberPosn->value());
}
void P3DUserInterface::cb_displayPrefsRememberPosn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_displayPrefsRememberPosn_i(o,v);
}

void P3DUserInterface::cb_displayPrefsRememberOpen_i(Fl_Check_Button*, void*) {
  callback->setPrefsRememberOpen(displayPrefsRememberOpen->value());
}
void P3DUserInterface::cb_displayPrefsRememberOpen(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_displayPrefsRememberOpen_i(o,v);
}

void P3DUserInterface::cb_Black_i(Fl_Menu_*, void*) {
  callback->setPrefsBackgroundColor(FL_BLACK);
}
void P3DUserInterface::cb_Black(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Black_i(o,v);
}

void P3DUserInterface::cb_White_i(Fl_Menu_*, void*) {
  callback->setPrefsBackgroundColor(FL_WHITE);
}
void P3DUserInterface::cb_White(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_White_i(o,v);
}

void P3DUserInterface::cb_Slate_i(Fl_Menu_*, void*) {
  callback->setPrefsBackgroundColor(FL_DARK3);
}
void P3DUserInterface::cb_Slate(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Slate_i(o,v);
}

void P3DUserInterface::cb_Indigo_i(Fl_Menu_*, void*) {
  callback->setPrefsBackgroundColor((enum Fl_Color) INDIGO);
}
void P3DUserInterface::cb_Indigo(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Indigo_i(o,v);
}

void P3DUserInterface::cb_Custom_i(Fl_Menu_*, void*) {
  callback->setPrefsBackgroundColor();
}
void P3DUserInterface::cb_Custom(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Custom_i(o,v);
}

Fl_Menu_Item P3DUserInterface::menu_Background[] = {
 {"Black", 0,  (Fl_Callback*)P3DUserInterface::cb_Black, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"White", 0,  (Fl_Callback*)P3DUserInterface::cb_White, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Slate", 0,  (Fl_Callback*)P3DUserInterface::cb_Slate, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Indigo", 0,  (Fl_Callback*)P3DUserInterface::cb_Indigo, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Custom", 0,  (Fl_Callback*)P3DUserInterface::cb_Custom, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void P3DUserInterface::cb_displayPrefsStandardAxes_i(Fl_Check_Button*, void*) {
  callback->setPrefsStandardAxes(displayPrefsStandardAxes->value());
}
void P3DUserInterface::cb_displayPrefsStandardAxes(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_displayPrefsStandardAxes_i(o,v);
}

void P3DUserInterface::cb_displayPrefsIconifyIndepButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsIconifyWindow(0);
}
void P3DUserInterface::cb_displayPrefsIconifyIndepButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_displayPrefsIconifyIndepButton_i(o,v);
}

void P3DUserInterface::cb_displayPrefsIconifyMainButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsIconifyWindow(1);
}
void P3DUserInterface::cb_displayPrefsIconifyMainButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_displayPrefsIconifyMainButton_i(o,v);
}

void P3DUserInterface::cb_displayPrefsIconifyAnyButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsIconifyWindow(2);
}
void P3DUserInterface::cb_displayPrefsIconifyAnyButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_displayPrefsIconifyAnyButton_i(o,v);
}

void P3DUserInterface::cb_atomPrefsShowAtomVectors_i(Fl_Check_Button*, void*) {
  callback->setPrefsShowAtomVectors(atomPrefsShowAtomVectors->value());
}
void P3DUserInterface::cb_atomPrefsShowAtomVectors(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_atomPrefsShowAtomVectors_i(o,v);
}

void P3DUserInterface::cb_atomPrefsUseFigureColors_i(Fl_Check_Button*, void*) {
  callback->setPrefsUseFigureColors(atomPrefsUseFigureColors->value());
}
void P3DUserInterface::cb_atomPrefsUseFigureColors(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_atomPrefsUseFigureColors_i(o,v);
}

void P3DUserInterface::cb_atomPrefsAtomVectorsType_i(Fl_Check_Button*, void*) {
  callback->setPrefsAtomVectorsType(atomPrefsAtomVectorsType->value());
}
void P3DUserInterface::cb_atomPrefsAtomVectorsType(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_atomPrefsAtomVectorsType_i(o,v);
}

void P3DUserInterface::cb_atomPrefsExtraAtomVectors_i(Fl_Check_Button*, void*) {
  callback->setPrefsExtraAtomVectors(atomPrefsExtraAtomVectors->value());
}
void P3DUserInterface::cb_atomPrefsExtraAtomVectors(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_atomPrefsExtraAtomVectors_i(o,v);
}

void P3DUserInterface::cb_atomPrefsAtomVectorsWidth_i(Fl_Value_Slider*, void*) {
  callback->setPrefsAtomVectorsWidth((int) atomPrefsAtomVectorsWidth->value());
}
void P3DUserInterface::cb_atomPrefsAtomVectorsWidth(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_atomPrefsAtomVectorsWidth_i(o,v);
}

void P3DUserInterface::cb_atomPrefsShowAtoms_i(Fl_Check_Button*, void*) {
  callback->setPrefsShowAtoms(atomPrefsShowAtoms->value());
}
void P3DUserInterface::cb_atomPrefsShowAtoms(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_atomPrefsShowAtoms_i(o,v);
}

void P3DUserInterface::cb_atomPrefsNoBVectorsButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsAtomBVectorsType(0);
}
void P3DUserInterface::cb_atomPrefsNoBVectorsButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_atomPrefsNoBVectorsButton_i(o,v);
}

void P3DUserInterface::cb_atomPrefsCrestBVectorsButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsAtomBVectorsType(2);
}
void P3DUserInterface::cb_atomPrefsCrestBVectorsButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_atomPrefsCrestBVectorsButton_i(o,v);
}

void P3DUserInterface::cb_atomPrefsAllBVectorsButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsAtomBVectorsType(1);
}
void P3DUserInterface::cb_atomPrefsAllBVectorsButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_atomPrefsAllBVectorsButton_i(o,v);
}

void P3DUserInterface::cb_meshPrefsShowMesh_i(Fl_Check_Button*, void*) {
  callback->setPrefsShowMesh(meshPrefsShowMesh->value());
}
void P3DUserInterface::cb_meshPrefsShowMesh(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_meshPrefsShowMesh_i(o,v);
}

void P3DUserInterface::cb_meshPrefsMeshType_i(Fl_Check_Button*, void*) {
  callback->setPrefsMeshType(meshPrefsMeshType->value());
}
void P3DUserInterface::cb_meshPrefsMeshType(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_meshPrefsMeshType_i(o,v);
}

void P3DUserInterface::cb_meshPrefsMeshConnectorsWidth_i(Fl_Value_Slider*, void*) {
  callback->setPrefsMeshConnectorsWidth((int) meshPrefsMeshConnectorsWidth->value());
}
void P3DUserInterface::cb_meshPrefsMeshConnectorsWidth(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_meshPrefsMeshConnectorsWidth_i(o,v);
}

void P3DUserInterface::cb_Red_i(Fl_Menu_*, void*) {
  callback->setPrefsMeshColor(FL_RED);
}
void P3DUserInterface::cb_Red(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Red_i(o,v);
}

void P3DUserInterface::cb_Green_i(Fl_Menu_*, void*) {
  callback->setPrefsMeshColor(FL_GREEN);
}
void P3DUserInterface::cb_Green(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Green_i(o,v);
}

void P3DUserInterface::cb_Blue_i(Fl_Menu_*, void*) {
  callback->setPrefsMeshColor(FL_BLUE);
}
void P3DUserInterface::cb_Blue(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Blue_i(o,v);
}

void P3DUserInterface::cb_Yellow_i(Fl_Menu_*, void*) {
  callback->setPrefsMeshColor(FL_YELLOW);
}
void P3DUserInterface::cb_Yellow(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Yellow_i(o,v);
}

void P3DUserInterface::cb_Magenta_i(Fl_Menu_*, void*) {
  callback->setPrefsMeshColor(FL_MAGENTA);
}
void P3DUserInterface::cb_Magenta(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Magenta_i(o,v);
}

void P3DUserInterface::cb_Cyan_i(Fl_Menu_*, void*) {
  callback->setPrefsMeshColor(FL_CYAN);
}
void P3DUserInterface::cb_Cyan(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Cyan_i(o,v);
}

void P3DUserInterface::cb_Gray_i(Fl_Menu_*, void*) {
  callback->setPrefsMeshColor(FL_GRAY);
}
void P3DUserInterface::cb_Gray(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Gray_i(o,v);
}

void P3DUserInterface::cb_Custom1_i(Fl_Menu_*, void*) {
  callback->setPrefsMeshColor();
}
void P3DUserInterface::cb_Custom1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Custom1_i(o,v);
}

Fl_Menu_Item P3DUserInterface::menu_Connectors[] = {
 {"Red", 0,  (Fl_Callback*)P3DUserInterface::cb_Red, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Green", 0,  (Fl_Callback*)P3DUserInterface::cb_Green, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Blue", 0,  (Fl_Callback*)P3DUserInterface::cb_Blue, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Yellow", 0,  (Fl_Callback*)P3DUserInterface::cb_Yellow, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Magenta", 0,  (Fl_Callback*)P3DUserInterface::cb_Magenta, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Cyan", 0,  (Fl_Callback*)P3DUserInterface::cb_Cyan, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gray", 0,  (Fl_Callback*)P3DUserInterface::cb_Gray, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Custom", 0,  (Fl_Callback*)P3DUserInterface::cb_Custom1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void P3DUserInterface::cb_surfacePrefsNoneBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsSurfaceStyle(M3D_NONE);
}
void P3DUserInterface::cb_surfacePrefsNoneBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_surfacePrefsNoneBtn_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsPointcloudBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsSurfaceStyle(M3D_POINTCLOUD);
}
void P3DUserInterface::cb_surfacePrefsPointcloudBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_surfacePrefsPointcloudBtn_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsWireframeBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsSurfaceStyle(M3D_WIREFRAME);
}
void P3DUserInterface::cb_surfacePrefsWireframeBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_surfacePrefsWireframeBtn_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsSolidBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsSurfaceStyle(M3D_SOLID);
}
void P3DUserInterface::cb_surfacePrefsSolidBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_surfacePrefsSolidBtn_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsLevel_0Btn_i(Fl_Check_Button*, void*) {
  callback->setPrefsSurfaceLevel(0);
}
void P3DUserInterface::cb_surfacePrefsLevel_0Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_surfacePrefsLevel_0Btn_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsLevel_1Btn_i(Fl_Check_Button*, void*) {
  callback->setPrefsSurfaceLevel(1);
}
void P3DUserInterface::cb_surfacePrefsLevel_1Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_surfacePrefsLevel_1Btn_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsLevel_2Btn_i(Fl_Check_Button*, void*) {
  callback->setPrefsSurfaceLevel(2);
}
void P3DUserInterface::cb_surfacePrefsLevel_2Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_surfacePrefsLevel_2Btn_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsLevel_3Btn_i(Fl_Check_Button*, void*) {
  callback->setPrefsSurfaceLevel(3);
}
void P3DUserInterface::cb_surfacePrefsLevel_3Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_surfacePrefsLevel_3Btn_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsLineWidth_i(Fl_Value_Slider*, void*) {
  callback->setPrefsSurfaceLineWidth((int) surfacePrefsLineWidth->value());
}
void P3DUserInterface::cb_surfacePrefsLineWidth(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_surfacePrefsLineWidth_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsSmoothness_i(Fl_Value_Input*, void*) {
  callback->setPrefsSurfaceSmoothness((int) surfacePrefsSmoothness->value());
}
void P3DUserInterface::cb_surfacePrefsSmoothness(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_surfacePrefsSmoothness_i(o,v);
}

void P3DUserInterface::cb_surfacePrefsUseTwoLights_i(Fl_Check_Button*, void*) {
  callback->setPrefsUseTwoLights(surfacePrefsUseTwoLights->value());
}
void P3DUserInterface::cb_surfacePrefsUseTwoLights(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_surfacePrefsUseTwoLights_i(o,v);
}

void P3DUserInterface::cb_imagePrefsSmoothImages_i(Fl_Check_Button*, void*) {
  callback->setPrefsSmoothImages(imagePrefsSmoothImages->value());
}
void P3DUserInterface::cb_imagePrefsSmoothImages(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsSmoothImages_i(o,v);
}

void P3DUserInterface::cb_imagePrefsCutPlaneBoundary_i(Fl_Check_Button*, void*) {
  callback->setPrefsCutPlaneBoundary(imagePrefsCutPlaneBoundary->value());
}
void P3DUserInterface::cb_imagePrefsCutPlaneBoundary(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsCutPlaneBoundary_i(o,v);
}

void P3DUserInterface::cb_imagePrefsCutPlaneBdryWidth_i(Fl_Value_Slider*, void*) {
  callback->setPrefsCutPlaneBdryWidth((int) imagePrefsCutPlaneBdryWidth->value());
}
void P3DUserInterface::cb_imagePrefsCutPlaneBdryWidth(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsCutPlaneBdryWidth_i(o,v);
}

void P3DUserInterface::cb_imagePrefsXSliceDefault_i(Fl_Check_Button*, void*) {
  callback->setPrefsSliceDefault(1, imagePrefsXSliceDefault->value());
}
void P3DUserInterface::cb_imagePrefsXSliceDefault(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsXSliceDefault_i(o,v);
}

void P3DUserInterface::cb_imagePrefsYSliceDefault_i(Fl_Check_Button*, void*) {
  callback->setPrefsSliceDefault(2, imagePrefsYSliceDefault->value());
}
void P3DUserInterface::cb_imagePrefsYSliceDefault(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsYSliceDefault_i(o,v);
}

void P3DUserInterface::cb_imagePrefsZSliceDefault_i(Fl_Check_Button*, void*) {
  callback->setPrefsSliceDefault(3, imagePrefsZSliceDefault->value());
}
void P3DUserInterface::cb_imagePrefsZSliceDefault(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsZSliceDefault_i(o,v);
}

void P3DUserInterface::cb_imagePrefsCutPlaneMode_i(Fl_Button*, void*) {
  callback->incrementPrefsCutPlaneMode();
}
void P3DUserInterface::cb_imagePrefsCutPlaneMode(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsCutPlaneMode_i(o,v);
}

void P3DUserInterface::cb_imagePrefsRangeDisplayed_i(Fl_Check_Button*, void*) {
  callback->setPrefsRangeDisplayed(imagePrefsRangeDisplayed->value());
}
void P3DUserInterface::cb_imagePrefsRangeDisplayed(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsRangeDisplayed_i(o,v);
}

void P3DUserInterface::cb_imagePrefsCoordsDisplayed_i(Fl_Check_Button*, void*) {
  callback->setPrefsCoordsDisplayed(imagePrefsCoordsDisplayed->value());
}
void P3DUserInterface::cb_imagePrefsCoordsDisplayed(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsCoordsDisplayed_i(o,v);
}

void P3DUserInterface::cb_imagePrefsDrawBoundary_i(Fl_Check_Button*, void*) {
  callback->setPrefsDrawBoundary(imagePrefsDrawBoundary->value());
}
void P3DUserInterface::cb_imagePrefsDrawBoundary(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_imagePrefsDrawBoundary_i(o,v);
}

void P3DUserInterface::cb_Image_i(Fl_Button*, void*) {
  prefsImageFilesWindow->show();
}
void P3DUserInterface::cb_Image(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Image_i(o,v);
}

void P3DUserInterface::cb_Deep_i(Fl_Menu_*, void*) {
  callback->setPrefsTilesColor(FL_RED);
}
void P3DUserInterface::cb_Deep(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Deep_i(o,v);
}

void P3DUserInterface::cb_Forest_i(Fl_Menu_*, void*) {
  callback->setPrefsTilesColor(FL_GREEN);
}
void P3DUserInterface::cb_Forest(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Forest_i(o,v);
}

void P3DUserInterface::cb_Slate1_i(Fl_Menu_*, void*) {
  callback->setPrefsTilesColor(FL_BLUE);
}
void P3DUserInterface::cb_Slate1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Slate1_i(o,v);
}

void P3DUserInterface::cb_Gold_i(Fl_Menu_*, void*) {
  callback->setPrefsTilesColor(FL_YELLOW);
}
void P3DUserInterface::cb_Gold(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Gold_i(o,v);
}

void P3DUserInterface::cb_Brick_i(Fl_Menu_*, void*) {
  callback->setPrefsTilesColor(FL_MAGENTA);
}
void P3DUserInterface::cb_Brick(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Brick_i(o,v);
}

void P3DUserInterface::cb_Aquamarine_i(Fl_Menu_*, void*) {
  callback->setPrefsTilesColor(FL_CYAN);
}
void P3DUserInterface::cb_Aquamarine(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Aquamarine_i(o,v);
}

void P3DUserInterface::cb_Beige_i(Fl_Menu_*, void*) {
  callback->setPrefsTilesColor(FL_GRAY);
}
void P3DUserInterface::cb_Beige(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Beige_i(o,v);
}

void P3DUserInterface::cb_Custom2_i(Fl_Menu_*, void*) {
  callback->setPrefsTilesColor();
}
void P3DUserInterface::cb_Custom2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Custom2_i(o,v);
}

Fl_Menu_Item P3DUserInterface::menu_Tiles[] = {
 {"Deep pink", 0,  (Fl_Callback*)P3DUserInterface::cb_Deep, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Forest green", 0,  (Fl_Callback*)P3DUserInterface::cb_Forest, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Slate blue", 0,  (Fl_Callback*)P3DUserInterface::cb_Slate1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gold", 0,  (Fl_Callback*)P3DUserInterface::cb_Gold, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Brick", 0,  (Fl_Callback*)P3DUserInterface::cb_Brick, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Aquamarine", 0,  (Fl_Callback*)P3DUserInterface::cb_Aquamarine, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Beige", 0,  (Fl_Callback*)P3DUserInterface::cb_Beige, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Custom", 0,  (Fl_Callback*)P3DUserInterface::cb_Custom2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void P3DUserInterface::cb_otherPrefsBYUTrianglesButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsBYUOutputType(0);
}
void P3DUserInterface::cb_otherPrefsBYUTrianglesButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsBYUTrianglesButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsBYUQuadsButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsBYUOutputType(1);
}
void P3DUserInterface::cb_otherPrefsBYUQuadsButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsBYUQuadsButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsBYUModelCoordButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsBYUOutputType(2);
}
void P3DUserInterface::cb_otherPrefsBYUModelCoordButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsBYUModelCoordButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsBYUWorldCoordButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsBYUOutputType(3);
}
void P3DUserInterface::cb_otherPrefsBYUWorldCoordButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsBYUWorldCoordButton_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsShowConstraints_i(Fl_Check_Button*, void*) {
  callback->setPrefsShowConstraints(constraintPrefsShowConstraints->value());
}
void P3DUserInterface::cb_constraintPrefsShowConstraints(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_constraintPrefsShowConstraints_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsNoneBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialSurfaceStyle(M3D_NONE);
}
void P3DUserInterface::cb_constraintPrefsNoneBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsNoneBtn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsPointcloudBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialSurfaceStyle(M3D_POINTCLOUD);
}
void P3DUserInterface::cb_constraintPrefsPointcloudBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsPointcloudBtn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsWireframeBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialSurfaceStyle(M3D_WIREFRAME);
}
void P3DUserInterface::cb_constraintPrefsWireframeBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsWireframeBtn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsSolidBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialSurfaceStyle(M3D_SOLID);
}
void P3DUserInterface::cb_constraintPrefsSolidBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsSolidBtn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsLevel_0Btn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialSurfaceLevel(0);
}
void P3DUserInterface::cb_constraintPrefsLevel_0Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsLevel_0Btn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsLevel_1Btn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialSurfaceLevel(1);
}
void P3DUserInterface::cb_constraintPrefsLevel_1Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsLevel_1Btn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsLevel_2Btn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialSurfaceLevel(2);
}
void P3DUserInterface::cb_constraintPrefsLevel_2Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsLevel_2Btn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsLevel_3Btn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialSurfaceLevel(3);
}
void P3DUserInterface::cb_constraintPrefsLevel_3Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsLevel_3Btn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsPartiallyBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialRendering(0);
}
void P3DUserInterface::cb_constraintPrefsPartiallyBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsPartiallyBtn_i(o,v);
}

void P3DUserInterface::cb_constraintPrefsFullyBtn_i(Fl_Check_Button*, void*) {
  callback->setPrefsPartialRendering(1);
}
void P3DUserInterface::cb_constraintPrefsFullyBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_constraintPrefsFullyBtn_i(o,v);
}

void P3DUserInterface::cb_Pink_i(Fl_Menu_*, void*) {
  callback->setPrefsPartialSurfaceColor(FL_RED);
}
void P3DUserInterface::cb_Pink(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Pink_i(o,v);
}

void P3DUserInterface::cb_Tan_i(Fl_Menu_*, void*) {
  callback->setPrefsPartialSurfaceColor(FL_GREEN);
}
void P3DUserInterface::cb_Tan(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Tan_i(o,v);
}

void P3DUserInterface::cb_Light_i(Fl_Menu_*, void*) {
  callback->setPrefsPartialSurfaceColor(FL_BLUE);
}
void P3DUserInterface::cb_Light(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Light_i(o,v);
}

void P3DUserInterface::cb_Lime_i(Fl_Menu_*, void*) {
  callback->setPrefsPartialSurfaceColor(FL_YELLOW);
}
void P3DUserInterface::cb_Lime(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Lime_i(o,v);
}

void P3DUserInterface::cb_Olive_i(Fl_Menu_*, void*) {
  callback->setPrefsPartialSurfaceColor(FL_MAGENTA);
}
void P3DUserInterface::cb_Olive(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Olive_i(o,v);
}

void P3DUserInterface::cb_Orange_i(Fl_Menu_*, void*) {
  callback->setPrefsPartialSurfaceColor(FL_CYAN);
}
void P3DUserInterface::cb_Orange(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Orange_i(o,v);
}

void P3DUserInterface::cb_Gray1_i(Fl_Menu_*, void*) {
  callback->setPrefsPartialSurfaceColor(FL_GRAY);
}
void P3DUserInterface::cb_Gray1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Gray1_i(o,v);
}

void P3DUserInterface::cb_Custom3_i(Fl_Menu_*, void*) {
  callback->setPrefsPartialSurfaceColor();
}
void P3DUserInterface::cb_Custom3(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Custom3_i(o,v);
}

Fl_Menu_Item P3DUserInterface::menu_Partial[] = {
 {"Pink", 0,  (Fl_Callback*)P3DUserInterface::cb_Pink, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Tan", 0,  (Fl_Callback*)P3DUserInterface::cb_Tan, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Light blue", 0,  (Fl_Callback*)P3DUserInterface::cb_Light, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Lime", 0,  (Fl_Callback*)P3DUserInterface::cb_Lime, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Olive", 0,  (Fl_Callback*)P3DUserInterface::cb_Olive, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Orange", 0,  (Fl_Callback*)P3DUserInterface::cb_Orange, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gray", 0,  (Fl_Callback*)P3DUserInterface::cb_Gray1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Custom", 0,  (Fl_Callback*)P3DUserInterface::cb_Custom3, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void P3DUserInterface::cb_landmarkPrefsShowLandmarks_i(Fl_Check_Button*, void*) {
  callback->setPrefsShowLandmarks(landmarkPrefsShowLandmarks->value());
}
void P3DUserInterface::cb_landmarkPrefsShowLandmarks(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_landmarkPrefsShowLandmarks_i(o,v);
}

void P3DUserInterface::cb_landmarkPrefsNarrowWidth_i(Fl_Value_Slider*, void*) {
  callback->setPrefsLandmarksNarrowWidth((int) landmarkPrefsNarrowWidth->value());
}
void P3DUserInterface::cb_landmarkPrefsNarrowWidth(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_landmarkPrefsNarrowWidth_i(o,v);
}

void P3DUserInterface::cb_landmarkPrefsWideWidth_i(Fl_Value_Slider*, void*) {
  callback->setPrefsLandmarksWideWidth((int) landmarkPrefsWideWidth->value());
}
void P3DUserInterface::cb_landmarkPrefsWideWidth(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_landmarkPrefsWideWidth_i(o,v);
}

void P3DUserInterface::cb_Orange1_i(Fl_Menu_*, void*) {
  callback->setPrefsLandmarksColor(FL_RED);
}
void P3DUserInterface::cb_Orange1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Orange1_i(o,v);
}

void P3DUserInterface::cb_Sea_i(Fl_Menu_*, void*) {
  callback->setPrefsLandmarksColor(FL_GREEN);
}
void P3DUserInterface::cb_Sea(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Sea_i(o,v);
}

void P3DUserInterface::cb_Cornflower_i(Fl_Menu_*, void*) {
  callback->setPrefsLandmarksColor(FL_BLUE);
}
void P3DUserInterface::cb_Cornflower(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Cornflower_i(o,v);
}

void P3DUserInterface::cb_Rosy_i(Fl_Menu_*, void*) {
  callback->setPrefsLandmarksColor(FL_YELLOW);
}
void P3DUserInterface::cb_Rosy(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Rosy_i(o,v);
}

void P3DUserInterface::cb_Purple_i(Fl_Menu_*, void*) {
  callback->setPrefsLandmarksColor(FL_MAGENTA);
}
void P3DUserInterface::cb_Purple(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Purple_i(o,v);
}

void P3DUserInterface::cb_Chartreuse_i(Fl_Menu_*, void*) {
  callback->setPrefsLandmarksColor(FL_CYAN);
}
void P3DUserInterface::cb_Chartreuse(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Chartreuse_i(o,v);
}

void P3DUserInterface::cb_Gray2_i(Fl_Menu_*, void*) {
  callback->setPrefsLandmarksColor(FL_GRAY);
}
void P3DUserInterface::cb_Gray2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Gray2_i(o,v);
}

void P3DUserInterface::cb_Custom4_i(Fl_Menu_*, void*) {
  callback->setPrefsLandmarksColor();
}
void P3DUserInterface::cb_Custom4(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Custom4_i(o,v);
}

Fl_Menu_Item P3DUserInterface::menu_Landmarks[] = {
 {"Orange", 0,  (Fl_Callback*)P3DUserInterface::cb_Orange1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Sea green", 0,  (Fl_Callback*)P3DUserInterface::cb_Sea, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Cornflower blue", 0,  (Fl_Callback*)P3DUserInterface::cb_Cornflower, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Rosy brown", 0,  (Fl_Callback*)P3DUserInterface::cb_Rosy, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Purple", 0,  (Fl_Callback*)P3DUserInterface::cb_Purple, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Chartreuse", 0,  (Fl_Callback*)P3DUserInterface::cb_Chartreuse, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gray", 0,  (Fl_Callback*)P3DUserInterface::cb_Gray2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Custom", 0,  (Fl_Callback*)P3DUserInterface::cb_Custom4, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void P3DUserInterface::cb_otherPrefsUndoLength_i(Fl_Value_Input*, void*) {
  callback->setUndoLength((int) otherPrefsUndoLength->value());
}
void P3DUserInterface::cb_otherPrefsUndoLength(Fl_Value_Input* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_otherPrefsUndoLength_i(o,v);
}

void P3DUserInterface::cb_otherPrefsLeftHandedButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsMouseButtonOrder(0 != otherPrefsLeftHandedButton->value());
}
void P3DUserInterface::cb_otherPrefsLeftHandedButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_otherPrefsLeftHandedButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsAboutPabloButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsAboutWindow(0 != otherPrefsAboutPabloButton->value());
}
void P3DUserInterface::cb_otherPrefsAboutPabloButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_otherPrefsAboutPabloButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsReorderAlwaysButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsReorderWindow(1);
}
void P3DUserInterface::cb_otherPrefsReorderAlwaysButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsReorderAlwaysButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsReorderNeverButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsReorderWindow(0);
}
void P3DUserInterface::cb_otherPrefsReorderNeverButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsReorderNeverButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsReorderPromptButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsReorderWindow(-1);
}
void P3DUserInterface::cb_otherPrefsReorderPromptButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsReorderPromptButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsSimTransVectorsButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsSimTransOutputType();
}
void P3DUserInterface::cb_otherPrefsSimTransVectorsButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsSimTransVectorsButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsSimTransMatrixButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsSimTransOutputType();
}
void P3DUserInterface::cb_otherPrefsSimTransMatrixButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsSimTransMatrixButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsSimTransModelButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsSimTransOutputType();
}
void P3DUserInterface::cb_otherPrefsSimTransModelButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsSimTransModelButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsSimTransSeparateButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsSimTransOutputType();
}
void P3DUserInterface::cb_otherPrefsSimTransSeparateButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsSimTransSeparateButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsQuietVerbosityButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsVerbosity(-1);
}
void P3DUserInterface::cb_otherPrefsQuietVerbosityButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsQuietVerbosityButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsNormalVerbosityButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsVerbosity(0);
}
void P3DUserInterface::cb_otherPrefsNormalVerbosityButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsNormalVerbosityButton_i(o,v);
}

void P3DUserInterface::cb_otherPrefsLoudVerbosityButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsVerbosity(1);
}
void P3DUserInterface::cb_otherPrefsLoudVerbosityButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_otherPrefsLoudVerbosityButton_i(o,v);
}

void P3DUserInterface::cb_imagePrefsReverseOrder_i(Fl_Check_Button*, void*) {
  callback->setPrefsByteOrder(0);
}
void P3DUserInterface::cb_imagePrefsReverseOrder(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_imagePrefsReverseOrder_i(o,v);
}

void P3DUserInterface::cb_imagePrefsNativeOrder_i(Fl_Check_Button*, void*) {
  callback->setPrefsByteOrder(1);
}
void P3DUserInterface::cb_imagePrefsNativeOrder(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_imagePrefsNativeOrder_i(o,v);
}

void P3DUserInterface::cb_imagePrefsNormalOrder_i(Fl_Check_Button*, void*) {
  callback->setPrefsByteOrder(2);
}
void P3DUserInterface::cb_imagePrefsNormalOrder(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_imagePrefsNormalOrder_i(o,v);
}

void P3DUserInterface::cb_imagePrefsRetainOrder_i(Fl_Check_Button*, void*) {
  callback->setPrefsByteOrder(3);
}
void P3DUserInterface::cb_imagePrefsRetainOrder(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_imagePrefsRetainOrder_i(o,v);
}

void P3DUserInterface::cb_imagePrefsScaleInput_i(Fl_Check_Button*, void*) {
  callback->setPrefsScaleInputImage(imagePrefsScaleInput->value());
}
void P3DUserInterface::cb_imagePrefsScaleInput(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_imagePrefsScaleInput_i(o,v);
}

void P3DUserInterface::cb_imagePrefsCompressImages_i(Fl_Check_Button*, void*) {
  callback->setPrefsCompressImages(imagePrefsCompressImages->value());
}
void P3DUserInterface::cb_imagePrefsCompressImages(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_imagePrefsCompressImages_i(o,v);
}

void P3DUserInterface::cb_imagePrefsConvertImages_i(Fl_Check_Button*, void*) {
  callback->setPrefsConvertImages(imagePrefsConvertImages->value());
}
void P3DUserInterface::cb_imagePrefsConvertImages(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_imagePrefsConvertImages_i(o,v);
}

void P3DUserInterface::cb_Close1_i(Fl_Return_Button*, void*) {
  prefsImageFilesWindow->hide();
}
void P3DUserInterface::cb_Close1(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void P3DUserInterface::cb_imagePrefsConvertFormat_i(Fl_Check_Button*, void*) {
  callback->setPrefsConvertFormat(imagePrefsConvertFormat->value());
}
void P3DUserInterface::cb_imagePrefsConvertFormat(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_imagePrefsConvertFormat_i(o,v);
}

void P3DUserInterface::cb_imagePrefsImageFormat_i(Fl_Counter*, void*) {
  callback->setPrefsImageFormat((int) imagePrefsImageFormat->value());
}
void P3DUserInterface::cb_imagePrefsImageFormat(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_imagePrefsImageFormat_i(o,v);
}

void P3DUserInterface::cb_reorderPopupWindow_i(Fl_Double_Window*, void*) {
  reorderPopupWindow->hide();
}
void P3DUserInterface::cb_reorderPopupWindow(Fl_Double_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_reorderPopupWindow_i(o,v);
}

void P3DUserInterface::cb_Reorder1_i(Fl_Return_Button*, void*) {
  callback->reorderModel();
  callback->clearReorderWindowMode();
  reorderPopupWindow->hide();
}
void P3DUserInterface::cb_Reorder1(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Reorder1_i(o,v);
}

void P3DUserInterface::cb_Save4_i(Fl_Return_Button*, void*) {
  callback->clearReorderWindowMode();
  reorderPopupWindow->hide();
}
void P3DUserInterface::cb_Save4(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Save4_i(o,v);
}

void P3DUserInterface::cb_Cancel_i(Fl_Return_Button*, void*) {
  callback->cancelSave();
  callback->clearReorderWindowMode();
  reorderPopupWindow->hide();
}
void P3DUserInterface::cb_Cancel(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void P3DUserInterface::cb_reorderAutomaticButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsReorderWindow(1);
}
void P3DUserInterface::cb_reorderAutomaticButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_reorderAutomaticButton_i(o,v);
}

void P3DUserInterface::cb_reorderNeverButton_i(Fl_Check_Button*, void*) {
  callback->setPrefsReorderWindow(0);
}
void P3DUserInterface::cb_reorderNeverButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_reorderNeverButton_i(o,v);
}

void P3DUserInterface::cb_addQuadFigureDlg_i(movable_Fl_Window*, void*) {
  addQuadFigureDlg->hide();
}
void P3DUserInterface::cb_addQuadFigureDlg(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_addQuadFigureDlg_i(o,v);
}

void P3DUserInterface::cb_addQuadFigureBtn_i(Fl_Return_Button*, void*) {
  callback->addQuadFigure();
}
void P3DUserInterface::cb_addQuadFigureBtn(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_addQuadFigureBtn_i(o,v);
}

void P3DUserInterface::cb_Red1_i(Fl_Menu_*, void*) {
  callback->setFigureColor(addQuadFigureCurrentColor, FL_RED);
}
void P3DUserInterface::cb_Red1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Red1_i(o,v);
}

void P3DUserInterface::cb_Green1_i(Fl_Menu_*, void*) {
  callback->setFigureColor(addQuadFigureCurrentColor, FL_GREEN);
}
void P3DUserInterface::cb_Green1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Green1_i(o,v);
}

void P3DUserInterface::cb_Yellow1_i(Fl_Menu_*, void*) {
  callback->setFigureColor(addQuadFigureCurrentColor, FL_YELLOW);
}
void P3DUserInterface::cb_Yellow1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Yellow1_i(o,v);
}

void P3DUserInterface::cb_Blue1_i(Fl_Menu_*, void*) {
  callback->setFigureColor(addQuadFigureCurrentColor, FL_BLUE);
}
void P3DUserInterface::cb_Blue1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Blue1_i(o,v);
}

void P3DUserInterface::cb_Magenta1_i(Fl_Menu_*, void*) {
  callback->setFigureColor(addQuadFigureCurrentColor, FL_MAGENTA);
}
void P3DUserInterface::cb_Magenta1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Magenta1_i(o,v);
}

void P3DUserInterface::cb_Cyan1_i(Fl_Menu_*, void*) {
  callback->setFigureColor(addQuadFigureCurrentColor, FL_CYAN);
}
void P3DUserInterface::cb_Cyan1(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Cyan1_i(o,v);
}

void P3DUserInterface::cb_Gray3_i(Fl_Menu_*, void*) {
  callback->setFigureColor(addQuadFigureCurrentColor, FL_GRAY);
}
void P3DUserInterface::cb_Gray3(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Gray3_i(o,v);
}

void P3DUserInterface::cb_Custom5_i(Fl_Menu_*, void*) {
  callback->setFigureColor(addQuadFigureCurrentColor);
}
void P3DUserInterface::cb_Custom5(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Custom5_i(o,v);
}

Fl_Menu_Item P3DUserInterface::menu_addQuadFigureColorBtn[] = {
 {"Red", 0,  (Fl_Callback*)P3DUserInterface::cb_Red1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Green", 0,  (Fl_Callback*)P3DUserInterface::cb_Green1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Yellow", 0,  (Fl_Callback*)P3DUserInterface::cb_Yellow1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Blue", 0,  (Fl_Callback*)P3DUserInterface::cb_Blue1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Magenta", 0,  (Fl_Callback*)P3DUserInterface::cb_Magenta1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Cyan", 0,  (Fl_Callback*)P3DUserInterface::cb_Cyan1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gray", 0,  (Fl_Callback*)P3DUserInterface::cb_Gray3, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Custom", 0,  (Fl_Callback*)P3DUserInterface::cb_Custom5, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void P3DUserInterface::cb_visibilityControlWindow_i(movable_Fl_Window*, void*) {
  visibilityControlWindow->hide();
  visibilityWindowCheckBox->value(0);
}
void P3DUserInterface::cb_visibilityControlWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_visibilityControlWindow_i(o,v);
}

void P3DUserInterface::cb_visibilityAllOn_i(Fl_Button*, void*) {
  callback->visibilityAllOn();
}
void P3DUserInterface::cb_visibilityAllOn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_visibilityAllOn_i(o,v);
}

void P3DUserInterface::cb_visibilityAllOff_i(Fl_Button*, void*) {
  callback->visibilityAllOff();
}
void P3DUserInterface::cb_visibilityAllOff(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_visibilityAllOff_i(o,v);
}

void P3DUserInterface::cb_atomVectorsVisible_i(Fl_Round_Button*, void*) {
  callback->atomVectorsVisible(atomVectorsVisible->value());
}
void P3DUserInterface::cb_atomVectorsVisible(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_atomVectorsVisible_i(o,v);
}

void P3DUserInterface::cb_meshConnectorsVisible_i(Fl_Round_Button*, void*) {
  callback->meshConnectorsVisible(meshConnectorsVisible->value());
}
void P3DUserInterface::cb_meshConnectorsVisible(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_meshConnectorsVisible_i(o,v);
}

void P3DUserInterface::cb_atomsVisible_i(Fl_Round_Button*, void*) {
  callback->atomsVisible(atomsVisible->value());
}
void P3DUserInterface::cb_atomsVisible(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_atomsVisible_i(o,v);
}

void P3DUserInterface::cb_Figure0_i(Fl_Round_Button*, void*) {
  callback->setFigureVisibility(0, Figure0->value());
}
void P3DUserInterface::cb_Figure0(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Figure0_i(o,v);
}

void P3DUserInterface::cb_Figure1_i(Fl_Round_Button*, void*) {
  callback->setFigureVisibility(1, Figure1->value());
}
void P3DUserInterface::cb_Figure1(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Figure1_i(o,v);
}

void P3DUserInterface::cb_Figure2_i(Fl_Round_Button*, void*) {
  callback->setFigureVisibility(2, Figure2->value());
}
void P3DUserInterface::cb_Figure2(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Figure2_i(o,v);
}

void P3DUserInterface::cb_Figure3_i(Fl_Round_Button*, void*) {
  callback->setFigureVisibility(3, Figure3->value());
}
void P3DUserInterface::cb_Figure3(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Figure3_i(o,v);
}

void P3DUserInterface::cb_Figure4_i(Fl_Round_Button*, void*) {
  callback->setFigureVisibility(4, Figure4->value());
}
void P3DUserInterface::cb_Figure4(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Figure4_i(o,v);
}

void P3DUserInterface::cb_Figure5_i(Fl_Round_Button*, void*) {
  callback->setFigureVisibility(5, Figure5->value());
}
void P3DUserInterface::cb_Figure5(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Figure5_i(o,v);
}

void P3DUserInterface::cb_Figure6_i(Fl_Round_Button*, void*) {
  callback->setFigureVisibility(6, Figure6->value());
}
void P3DUserInterface::cb_Figure6(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Figure6_i(o,v);
}

void P3DUserInterface::cb_visibilityAllInvert_i(Fl_Button*, void*) {
  callback->visibilityAllInverted();
}
void P3DUserInterface::cb_visibilityAllInvert(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_visibilityAllInvert_i(o,v);
}

void P3DUserInterface::cb_constraintsVisible_i(Fl_Round_Button*, void*) {
  callback->constraintsVisible(constraintsVisible->value());
}
void P3DUserInterface::cb_constraintsVisible(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_constraintsVisible_i(o,v);
}

void P3DUserInterface::cb_landmarksVisible_i(Fl_Round_Button*, void*) {
  callback->landmarksVisible(landmarksVisible->value());
}
void P3DUserInterface::cb_landmarksVisible(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_landmarksVisible_i(o,v);
}

void P3DUserInterface::cb_visibilityFigureRoller_i(Fl_Roller*, void*) {
  callback->setVisibilityFigureRange();
}
void P3DUserInterface::cb_visibilityFigureRoller(Fl_Roller* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_visibilityFigureRoller_i(o,v);
}

void P3DUserInterface::cb_constraintsWindow_i(movable_Fl_Window*, void*) {
  constraintsWindow->hide();
}
void P3DUserInterface::cb_constraintsWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_constraintsWindow_i(o,v);
}

void P3DUserInterface::cb_interObjectDistanceSlider_i(Fl_Slider*, void*) {
  callback->setInterObjectDistance();
}
void P3DUserInterface::cb_interObjectDistanceSlider(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_interObjectDistanceSlider_i(o,v);
}

void P3DUserInterface::cb_contraintsDoneBtn_i(Fl_Button*, void*) {
  callback->exitConstraintsMode();
  constraintsWindow->hide();
}
void P3DUserInterface::cb_contraintsDoneBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_contraintsDoneBtn_i(o,v);
}

void P3DUserInterface::cb_viewPartialSurfaces_i(Fl_Button*, void*) {
  callback->initializeConstraints();
}
void P3DUserInterface::cb_viewPartialSurfaces(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_viewPartialSurfaces_i(o,v);
}

void P3DUserInterface::cb_renderFullyBtn_i(Fl_Check_Button*, void*) {
  callback->togglePartialRendering(1);
}
void P3DUserInterface::cb_renderFullyBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_renderFullyBtn_i(o,v);
}

void P3DUserInterface::cb_renderPartiallyBtn_i(Fl_Check_Button*, void*) {
  callback->togglePartialRendering(0);
}
void P3DUserInterface::cb_renderPartiallyBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_renderPartiallyBtn_i(o,v);
}

void P3DUserInterface::cb_partialNoneBtn_i(Fl_Check_Button*, void*) {
  callback->setPartialSurfaceStyle(M3D_NONE);
}
void P3DUserInterface::cb_partialNoneBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_partialNoneBtn_i(o,v);
}

void P3DUserInterface::cb_partialPointcloudBtn_i(Fl_Check_Button*, void*) {
  callback->setPartialSurfaceStyle(M3D_POINTCLOUD);
}
void P3DUserInterface::cb_partialPointcloudBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_partialPointcloudBtn_i(o,v);
}

void P3DUserInterface::cb_partialWireframeBtn_i(Fl_Check_Button*, void*) {
  callback->setPartialSurfaceStyle(M3D_WIREFRAME);
}
void P3DUserInterface::cb_partialWireframeBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_partialWireframeBtn_i(o,v);
}

void P3DUserInterface::cb_partialSolidBtn_i(Fl_Check_Button*, void*) {
  callback->setPartialSurfaceStyle(M3D_SOLID);
}
void P3DUserInterface::cb_partialSolidBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_partialSolidBtn_i(o,v);
}

void P3DUserInterface::cb_PartialSurfaceLevel_0Btn_i(Fl_Check_Button*, void*) {
  callback->setPartialSurfaceLevel(0);
}
void P3DUserInterface::cb_PartialSurfaceLevel_0Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_PartialSurfaceLevel_0Btn_i(o,v);
}

void P3DUserInterface::cb_PartialSurfaceLevel_1Btn_i(Fl_Check_Button*, void*) {
  callback->setPartialSurfaceLevel(1);
}
void P3DUserInterface::cb_PartialSurfaceLevel_1Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_PartialSurfaceLevel_1Btn_i(o,v);
}

void P3DUserInterface::cb_PartialSurfaceLevel_2Btn_i(Fl_Check_Button*, void*) {
  callback->setPartialSurfaceLevel(2);
}
void P3DUserInterface::cb_PartialSurfaceLevel_2Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_PartialSurfaceLevel_2Btn_i(o,v);
}

void P3DUserInterface::cb_PartialSurfaceLevel_3Btn_i(Fl_Check_Button*, void*) {
  callback->setPartialSurfaceLevel(3);
}
void P3DUserInterface::cb_PartialSurfaceLevel_3Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_PartialSurfaceLevel_3Btn_i(o,v);
}

void P3DUserInterface::cb_fullClear_i(Fl_Button*, void*) {
  callback->clearAllConstraints();
}
void P3DUserInterface::cb_fullClear(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_fullClear_i(o,v);
}

void P3DUserInterface::cb_partialClear_i(Fl_Button*, void*) {
  callback->clearPartialConstraints();
}
void P3DUserInterface::cb_partialClear(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_partialClear_i(o,v);
}

void P3DUserInterface::cb_constraintsFigureSlider_i(Fl_Value_Slider*, void*) {
  callback->setInterObjectFigure();
}
void P3DUserInterface::cb_constraintsFigureSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_constraintsFigureSlider_i(o,v);
}

void P3DUserInterface::cb_SetFigureNumber_i(Fl_Button*, void*) {
  callback->setInterObjectConstraint();
}
void P3DUserInterface::cb_SetFigureNumber(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_SetFigureNumber_i(o,v);
}

void P3DUserInterface::cb_primitiveEditorWindow_i(movable_Fl_Window*, void*) {
  primitiveEditorWindow->hide();
}
void P3DUserInterface::cb_primitiveEditorWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_primitiveEditorWindow_i(o,v);
}

void P3DUserInterface::cb_atomEditorThetaSlider_i(Fl_Value_Slider*, void*) {
  callback->setTheta();
}
void P3DUserInterface::cb_atomEditorThetaSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_atomEditorThetaSlider_i(o,v);
}

void P3DUserInterface::cb_atomEditorElongationSlider_i(Fl_Value_Slider*, void*) {
  callback->setElongation();
}
void P3DUserInterface::cb_atomEditorElongationSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_atomEditorElongationSlider_i(o,v);
}

void P3DUserInterface::cb_cutPlanesControlWindow_i(movable_Fl_Window*, void*) {
  cutPlanesControlWindow->hide();
  cutPlaneWindowCheckBox->value(0);
}
void P3DUserInterface::cb_cutPlanesControlWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_cutPlanesControlWindow_i(o,v);
}

void P3DUserInterface::cb_cutPlaneBtn0_i(Fl_Check_Button*, void*) {
  callback->viewBNCutPlane();
}
void P3DUserInterface::cb_cutPlaneBtn0(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneBtn0_i(o,v);
}

void P3DUserInterface::cb_cutPlaneBtn1_i(Fl_Check_Button*, void*) {
  callback->viewBBPerpCutPlane();
}
void P3DUserInterface::cb_cutPlaneBtn1(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneBtn1_i(o,v);
}

void P3DUserInterface::cb_cutPlaneBtn2_i(Fl_Check_Button*, void*) {
  callback->viewBPerpNCutPlane();
}
void P3DUserInterface::cb_cutPlaneBtn2(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneBtn2_i(o,v);
}

void P3DUserInterface::cb_cutPlaneBtn3_i(Fl_Check_Button*, void*) {
  callback->viewBPerpY0CutPlane();
}
void P3DUserInterface::cb_cutPlaneBtn3(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneBtn3_i(o,v);
}

void P3DUserInterface::cb_cutPlaneBtn4_i(Fl_Check_Button*, void*) {
  callback->viewBPerpY1CutPlane();
}
void P3DUserInterface::cb_cutPlaneBtn4(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneBtn4_i(o,v);
}

void P3DUserInterface::cb_cutPlaneBtn5_i(Fl_Check_Button*, void*) {
  callback->viewInvolutesCutPlane();
}
void P3DUserInterface::cb_cutPlaneBtn5(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneBtn5_i(o,v);
}

void P3DUserInterface::cb_cutPlaneAtomModeBtn_i(Fl_Button*, void*) {
  callback->incrementCutPlanesMode(ATOM_PLANE);
}
void P3DUserInterface::cb_cutPlaneAtomModeBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneAtomModeBtn_i(o,v);
}

void P3DUserInterface::cb_cutPlaneCrestModeBtn_i(Fl_Button*, void*) {
  callback->incrementCutPlanesMode(CREST_PLANE);
}
void P3DUserInterface::cb_cutPlaneCrestModeBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneCrestModeBtn_i(o,v);
}

void P3DUserInterface::cb_cutPlaneBPerpNModeBtn_i(Fl_Button*, void*) {
  callback->incrementCutPlanesMode(BPERP_N_PLANE);
}
void P3DUserInterface::cb_cutPlaneBPerpNModeBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneBPerpNModeBtn_i(o,v);
}

void P3DUserInterface::cb_cutPlaneStarboardModeBtn_i(Fl_Button*, void*) {
  callback->incrementCutPlanesMode(STARBOARD_PLANE);
}
void P3DUserInterface::cb_cutPlaneStarboardModeBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneStarboardModeBtn_i(o,v);
}

void P3DUserInterface::cb_cutPlanePortModeBtn_i(Fl_Button*, void*) {
  callback->incrementCutPlanesMode(PORT_PLANE);
}
void P3DUserInterface::cb_cutPlanePortModeBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlanePortModeBtn_i(o,v);
}

void P3DUserInterface::cb_cutPlaneInvolutesModeBtn_i(Fl_Button*, void*) {
  callback->incrementCutPlanesMode(INVOLUTES_PLANE);
}
void P3DUserInterface::cb_cutPlaneInvolutesModeBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cutPlaneInvolutesModeBtn_i(o,v);
}

void P3DUserInterface::cb_bNCutPlaneWindow_i(movable_Fl_Window*, void*) {
  callback->hideCutPlanes(ATOM_PLANE);
}
void P3DUserInterface::cb_bNCutPlaneWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_bNCutPlaneWindow_i(o,v);
}

void P3DUserInterface::cb_bBPerpCutPlaneWindow_i(movable_Fl_Window*, void*) {
  callback->hideCutPlanes(CREST_PLANE);
}
void P3DUserInterface::cb_bBPerpCutPlaneWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_bBPerpCutPlaneWindow_i(o,v);
}

void P3DUserInterface::cb_bPerpNCutPlaneWindow_i(movable_Fl_Window*, void*) {
  callback->hideCutPlanes(BPERP_N_PLANE);
}
void P3DUserInterface::cb_bPerpNCutPlaneWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_bPerpNCutPlaneWindow_i(o,v);
}

void P3DUserInterface::cb_bPerpY0CutPlaneWindow_i(movable_Fl_Window*, void*) {
  callback->hideCutPlanes(STARBOARD_PLANE);
}
void P3DUserInterface::cb_bPerpY0CutPlaneWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_bPerpY0CutPlaneWindow_i(o,v);
}

void P3DUserInterface::cb_bPerpY1CutPlaneWindow_i(movable_Fl_Window*, void*) {
  callback->hideCutPlanes(PORT_PLANE);
}
void P3DUserInterface::cb_bPerpY1CutPlaneWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_bPerpY1CutPlaneWindow_i(o,v);
}

void P3DUserInterface::cb_InvoluteCutPlaneWindow_i(movable_Fl_Window*, void*) {
  callback->hideCutPlanes(INVOLUTES_PLANE);
}
void P3DUserInterface::cb_InvoluteCutPlaneWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_InvoluteCutPlaneWindow_i(o,v);
}

void P3DUserInterface::cb_editLandmarksWindow_i(movable_Fl_Window*, void*) {
  callback->finishEditLandmarks();
}
void P3DUserInterface::cb_editLandmarksWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_editLandmarksWindow_i(o,v);
}

void P3DUserInterface::cb_Done_i(Fl_Button*, void*) {
  callback->finishEditLandmarks();
}
void P3DUserInterface::cb_Done(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Done_i(o,v);
}

void P3DUserInterface::cb_landmarksClearSurface_i(Fl_Button*, void*) {
  callback->clearSurfaceLandmarks();
}
void P3DUserInterface::cb_landmarksClearSurface(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_landmarksClearSurface_i(o,v);
}

void P3DUserInterface::cb_landmarksClearImage_i(Fl_Button*, void*) {
  callback->clearImageLandmarks();
}
void P3DUserInterface::cb_landmarksClearImage(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_landmarksClearImage_i(o,v);
}

void P3DUserInterface::cb_landmarksNextBtn_i(Fl_Button*, void*) {
  callback->editLandmarksNext();
}
void P3DUserInterface::cb_landmarksNextBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_landmarksNextBtn_i(o,v);
}

void P3DUserInterface::cb_landmarksPreviousBtn_i(Fl_Button*, void*) {
  callback->editLandmarksPrevious();
}
void P3DUserInterface::cb_landmarksPreviousBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_landmarksPreviousBtn_i(o,v);
}

void P3DUserInterface::cb_landmarkDeleteBtn_i(Fl_Button*, void*) {
  callback->editLandmarkDelete();
}
void P3DUserInterface::cb_landmarkDeleteBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_landmarkDeleteBtn_i(o,v);
}

void P3DUserInterface::cb_landmarksEditMode_0Btn_i(Fl_Check_Button*, void*) {
  callback->setLandmarksEditMode(0);
}
void P3DUserInterface::cb_landmarksEditMode_0Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_landmarksEditMode_0Btn_i(o,v);
}

void P3DUserInterface::cb_landmarksEditMode_1Btn_i(Fl_Check_Button*, void*) {
  callback->setLandmarksEditMode(1);
}
void P3DUserInterface::cb_landmarksEditMode_1Btn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_landmarksEditMode_1Btn_i(o,v);
}

void P3DUserInterface::cb_Apply_i(Fl_Button*, void*) {
  callback->applyLandmarks();
}
void P3DUserInterface::cb_Apply(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Apply_i(o,v);
}

void P3DUserInterface::cb_landmarkGotoBtn_i(Fl_Button*, void*) {
  callback->editLandmarkGoto();
}
void P3DUserInterface::cb_landmarkGotoBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_landmarkGotoBtn_i(o,v);
}

void P3DUserInterface::cb_editModelWindow_i(movable_Fl_Window*, void*) {
  editModelWindow->hide();
}
void P3DUserInterface::cb_editModelWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_editModelWindow_i(o,v);
}

void P3DUserInterface::cb_Red2_i(Fl_Menu_*, void*) {
  callback->setFigureColor(editCurrentColorOutput, FL_RED);
  callback->editFigureColor();
}
void P3DUserInterface::cb_Red2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Red2_i(o,v);
}

void P3DUserInterface::cb_Green2_i(Fl_Menu_*, void*) {
  callback->setFigureColor(editCurrentColorOutput, FL_GREEN);
  callback->editFigureColor();
}
void P3DUserInterface::cb_Green2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Green2_i(o,v);
}

void P3DUserInterface::cb_Yellow2_i(Fl_Menu_*, void*) {
  callback->setFigureColor(editCurrentColorOutput, FL_YELLOW);
  callback->editFigureColor();
}
void P3DUserInterface::cb_Yellow2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Yellow2_i(o,v);
}

void P3DUserInterface::cb_Blue2_i(Fl_Menu_*, void*) {
  callback->setFigureColor(editCurrentColorOutput, FL_BLUE);
  callback->editFigureColor();
}
void P3DUserInterface::cb_Blue2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Blue2_i(o,v);
}

void P3DUserInterface::cb_Magenta2_i(Fl_Menu_*, void*) {
  callback->setFigureColor(editCurrentColorOutput, FL_MAGENTA);
  callback->editFigureColor();
}
void P3DUserInterface::cb_Magenta2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Magenta2_i(o,v);
}

void P3DUserInterface::cb_Cyan2_i(Fl_Menu_*, void*) {
  callback->setFigureColor(editCurrentColorOutput, FL_CYAN);
  callback->editFigureColor();
}
void P3DUserInterface::cb_Cyan2(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Cyan2_i(o,v);
}

void P3DUserInterface::cb_Gray4_i(Fl_Menu_*, void*) {
  callback->setFigureColor(editCurrentColorOutput, FL_GRAY);
  callback->editFigureColor();
}
void P3DUserInterface::cb_Gray4(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Gray4_i(o,v);
}

void P3DUserInterface::cb_Custom6_i(Fl_Menu_*, void*) {
  callback->setFigureColor(editCurrentColorOutput);
  callback->editFigureColor();
}
void P3DUserInterface::cb_Custom6(Fl_Menu_* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Custom6_i(o,v);
}

Fl_Menu_Item P3DUserInterface::menu_editFigureColorSelector[] = {
 {"Red", 0,  (Fl_Callback*)P3DUserInterface::cb_Red2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Green", 0,  (Fl_Callback*)P3DUserInterface::cb_Green2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Yellow", 0,  (Fl_Callback*)P3DUserInterface::cb_Yellow2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Blue", 0,  (Fl_Callback*)P3DUserInterface::cb_Blue2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Magenta", 0,  (Fl_Callback*)P3DUserInterface::cb_Magenta2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Cyan", 0,  (Fl_Callback*)P3DUserInterface::cb_Cyan2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gray", 0,  (Fl_Callback*)P3DUserInterface::cb_Gray4, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Custom", 0,  (Fl_Callback*)P3DUserInterface::cb_Custom6, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void P3DUserInterface::cb_Done1_i(Fl_Button*, void*) {
  callback->finishEditModel();
}
void P3DUserInterface::cb_Done1(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Done1_i(o,v);
}

void P3DUserInterface::cb_editModelFigureNumber_i(Fl_Counter*, void*) {
  callback->editModelFigureNumber();
}
void P3DUserInterface::cb_editModelFigureNumber(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_editModelFigureNumber_i(o,v);
}

void P3DUserInterface::cb_editModelFigureTolerance_i(Fl_Counter*, void*) {
  callback->editModelFigureTolerance();
}
void P3DUserInterface::cb_editModelFigureTolerance(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_editModelFigureTolerance_i(o,v);
}

void P3DUserInterface::cb_editModelFigureBlendExtent_i(Fl_Counter*, void*) {
  callback->editModelFigureBlendExtent();
}
void P3DUserInterface::cb_editModelFigureBlendExtent(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_editModelFigureBlendExtent_i(o,v);
}

void P3DUserInterface::cb_editModelFigureBlendAmount_i(Fl_Counter*, void*) {
  callback->editModelFigureBlendAmount();
}
void P3DUserInterface::cb_editModelFigureBlendAmount(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_editModelFigureBlendAmount_i(o,v);
}

void P3DUserInterface::cb_editModelFigureApplyBlend_i(Fl_Button*, void*) {
  callback->editModelReblend();
}
void P3DUserInterface::cb_editModelFigureApplyBlend(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_editModelFigureApplyBlend_i(o,v);
}

void P3DUserInterface::cb_editModelAttachmentMode_i(Fl_Check_Button*, void*) {
  callback->editModelAttachmentMode(editModelAttachmentMode->value());
}
void P3DUserInterface::cb_editModelAttachmentMode(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_editModelAttachmentMode_i(o,v);
}

void P3DUserInterface::cb_editModelPolarity_i(Fl_Check_Button*, void*) {
  callback->editModelPolarity();
}
void P3DUserInterface::cb_editModelPolarity(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_editModelPolarity_i(o,v);
}

void P3DUserInterface::cb_attachSubfigureDialog_i(movable_Fl_Window*, void*) {
  callback->cancelAttachSubfigureDialog();
  attachSubfigureDialog->hide();
}
void P3DUserInterface::cb_attachSubfigureDialog(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_attachSubfigureDialog_i(o,v);
}

void P3DUserInterface::cb_attachNextButton_i(Fl_Button*, void*) {
  callback->advanceAttachSubfigureDialog();
}
void P3DUserInterface::cb_attachNextButton(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_attachNextButton_i(o,v);
}

void P3DUserInterface::cb_attachCancelButton_i(Fl_Button*, void*) {
  callback->cancelAttachSubfigureDialog();
}
void P3DUserInterface::cb_attachCancelButton(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_attachCancelButton_i(o,v);
}

void P3DUserInterface::cb_attachProtrusionButton_i(Fl_Round_Button*, void*) {
  callback->setAttachSubfigureMode(1);
}
void P3DUserInterface::cb_attachProtrusionButton(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_attachProtrusionButton_i(o,v);
}

void P3DUserInterface::cb_attachIndentationButton_i(Fl_Round_Button*, void*) {
  callback->setAttachSubfigureMode(2);
}
void P3DUserInterface::cb_attachIndentationButton(Fl_Round_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_attachIndentationButton_i(o,v);
}

void P3DUserInterface::cb_elongationDialog_i(movable_Fl_Window*, void*) {
  callback->elongateFinish();
}
void P3DUserInterface::cb_elongationDialog(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_elongationDialog_i(o,v);
}

void P3DUserInterface::cb_elongateRowSlider_i(Fl_Slider*, void*) {
  callback->elongateRow();
}
void P3DUserInterface::cb_elongateRowSlider(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_elongateRowSlider_i(o,v);
}

void P3DUserInterface::cb_elongateColumnSlider_i(Fl_Slider*, void*) {
  callback->elongateColumn();
}
void P3DUserInterface::cb_elongateColumnSlider(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_elongateColumnSlider_i(o,v);
}

void P3DUserInterface::cb_optimizerControlDialog_i(movable_Fl_Window*, void*) {
  callback->cancelOptimization();
}
void P3DUserInterface::cb_optimizerControlDialog(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_optimizerControlDialog_i(o,v);
}

void P3DUserInterface::cb_nextOptimizationBtn_i(Fl_Button*, void*) {
  (void) callback->nextOptimizationStage();
}
void P3DUserInterface::cb_nextOptimizationBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_nextOptimizationBtn_i(o,v);
}

void P3DUserInterface::cb_optimizationCancelBtn_i(Fl_Button*, void*) {
  callback->cancelOptimization();
}
void P3DUserInterface::cb_optimizationCancelBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_optimizationCancelBtn_i(o,v);
}

void P3DUserInterface::cb_previewOptimizationBtn_i(Fl_Button*, void*) {
  callback->previewOptimizationStage();
}
void P3DUserInterface::cb_previewOptimizationBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_previewOptimizationBtn_i(o,v);
}

void P3DUserInterface::cb_continuousOptimizationBtn_i(Fl_Button*, void*) {
  callback->continuousOptimization();
}
void P3DUserInterface::cb_continuousOptimizationBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_continuousOptimizationBtn_i(o,v);
}

void P3DUserInterface::cb_startNextInteractiveStageBtn_i(Fl_Button*, void*) {
  callback->startNextInteractiveStage();
}
void P3DUserInterface::cb_startNextInteractiveStageBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_startNextInteractiveStageBtn_i(o,v);
}

void P3DUserInterface::cb_optimizerWindowedIntensities_i(Fl_Check_Button*, void*) {
  callback->setOptimizerIntensityWindowing();
}
void P3DUserInterface::cb_optimizerWindowedIntensities(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_optimizerWindowedIntensities_i(o,v);
}

void P3DUserInterface::cb_objectStartBtn_i(Fl_Button*, void*) {
  callback->startModelStage(false);
}
void P3DUserInterface::cb_objectStartBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_objectStartBtn_i(o,v);
}

void P3DUserInterface::cb_objectStopBtn_i(Fl_Button*, void*) {
  callback->stopModelStage();
}
void P3DUserInterface::cb_objectStopBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_objectStopBtn_i(o,v);
}

void P3DUserInterface::cb_objectResetBtn_i(Fl_Button*, void*) {
  callback->resetModelStage(false);
}
void P3DUserInterface::cb_objectResetBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_objectResetBtn_i(o,v);
}

void P3DUserInterface::cb_modelStartBtn_i(Fl_Button*, void*) {
  callback->startModelStage(true);
}
void P3DUserInterface::cb_modelStartBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_modelStartBtn_i(o,v);
}

void P3DUserInterface::cb_modelStopBtn_i(Fl_Button*, void*) {
  callback->stopModelStage();
}
void P3DUserInterface::cb_modelStopBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_modelStopBtn_i(o,v);
}

void P3DUserInterface::cb_modelResetBtn_i(Fl_Button*, void*) {
  callback->resetModelStage(true);
}
void P3DUserInterface::cb_modelResetBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_modelResetBtn_i(o,v);
}

void P3DUserInterface::cb_figureStageStartBtn_i(Fl_Button*, void*) {
  callback->startMainFigureStage(false);
}
void P3DUserInterface::cb_figureStageStartBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_figureStageStartBtn_i(o,v);
}

void P3DUserInterface::cb_figureStageStopBtn_i(Fl_Button*, void*) {
  callback->stopMainFigureStage();
}
void P3DUserInterface::cb_figureStageStopBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_figureStageStopBtn_i(o,v);
}

void P3DUserInterface::cb_mainFigureStartBtn_i(Fl_Button*, void*) {
  callback->startMainFigureStage(true);
}
void P3DUserInterface::cb_mainFigureStartBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_mainFigureStartBtn_i(o,v);
}

void P3DUserInterface::cb_mainFigureStopBtn_i(Fl_Button*, void*) {
  callback->stopMainFigureStage();
}
void P3DUserInterface::cb_mainFigureStopBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_mainFigureStopBtn_i(o,v);
}

void P3DUserInterface::cb_subfigureStartBtn_i(Fl_Button*, void*) {
  callback->startSubfigureStage();
}
void P3DUserInterface::cb_subfigureStartBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_subfigureStartBtn_i(o,v);
}

void P3DUserInterface::cb_subfigureStopBtn_i(Fl_Button*, void*) {
  callback->stopSubfigureStage();
}
void P3DUserInterface::cb_subfigureStopBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_subfigureStopBtn_i(o,v);
}

void P3DUserInterface::cb_subfigurePenaltyWeightSlider_i(Fl_Value_Slider*, void*) {
  callback->setSubfigureStagePenaltyWeight();
}
void P3DUserInterface::cb_subfigurePenaltyWeightSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_subfigurePenaltyWeightSlider_i(o,v);
}

void P3DUserInterface::cb_subfigureConstraintsPenaltyWeightSlider_i(Fl_Value_Slider*, void*) {
  callback->setSubfigureStageConstraintsPenaltyWeight();
}
void P3DUserInterface::cb_subfigureConstraintsPenaltyWeightSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_subfigureConstraintsPenaltyWeightSlider_i(o,v);
}

void P3DUserInterface::cb_primitiveStartBtn_i(Fl_Button*, void*) {
  callback->startPrimitiveStage();
}
void P3DUserInterface::cb_primitiveStartBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_primitiveStartBtn_i(o,v);
}

void P3DUserInterface::cb_primitiveStopBtn_i(Fl_Button*, void*) {
  callback->stopPrimitiveStage();
}
void P3DUserInterface::cb_primitiveStopBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_primitiveStopBtn_i(o,v);
}

void P3DUserInterface::cb_voxelStageStartBtn_i(Fl_Button*, void*) {
  callback->startVoxelStage();
}
void P3DUserInterface::cb_voxelStageStartBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_voxelStageStartBtn_i(o,v);
}

void P3DUserInterface::cb_voxelStageStopBtn_i(Fl_Button*, void*) {
  callback->stopVoxelStage();
}
void P3DUserInterface::cb_voxelStageStopBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_voxelStageStopBtn_i(o,v);
}

void P3DUserInterface::cb_voxelStagePenaltyWeightSlider_i(Fl_Value_Slider*, void*) {
  callback->setVoxelStagePenaltyWeight();
}
void P3DUserInterface::cb_voxelStagePenaltyWeightSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_voxelStagePenaltyWeightSlider_i(o,v);
}

void P3DUserInterface::cb_voxelStageConstraintsPenaltyWeightSlider_i(Fl_Value_Slider*, void*) {
  callback->setVoxelStageConstraintsPenaltyWeight();
}
void P3DUserInterface::cb_voxelStageConstraintsPenaltyWeightSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_voxelStageConstraintsPenaltyWeightSlider_i(o,v);
}

void P3DUserInterface::cb_optimizerSettingsDialog_i(movable_Fl_Window*, void*) {
  optimizerSettingsDialog->hide();
}
void P3DUserInterface::cb_optimizerSettingsDialog(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_optimizerSettingsDialog_i(o,v);
}

void P3DUserInterface::cb_setPenaltyWeightsBtn_i(Fl_Return_Button*, void*) {
  callback->setPenaltyWeights();
}
void P3DUserInterface::cb_setPenaltyWeightsBtn(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_setPenaltyWeightsBtn_i(o,v);
}

void P3DUserInterface::cb_revertPenaltyWeightsBtn_i(Fl_Button*, void*) {
  callback->revertPenaltyWeights();
}
void P3DUserInterface::cb_revertPenaltyWeightsBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_revertPenaltyWeightsBtn_i(o,v);
}

void P3DUserInterface::cb_loadPGAFileBtn_i(Fl_Button*, void*) {
  callback->loadPGAFile();
}
void P3DUserInterface::cb_loadPGAFileBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_loadPGAFileBtn_i(o,v);
}

void P3DUserInterface::cb_modelSlideShowDialog_i(movable_Fl_Window*, void*) {
  callback->quitModelSlideShow();
  modelSlideShowDialog->hide();
}
void P3DUserInterface::cb_modelSlideShowDialog(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_modelSlideShowDialog_i(o,v);
}

void P3DUserInterface::cb_modelSlideShowFileBrowser_i(Fl_File_Browser*, void*) {
  callback->selectModelSlideShow();
}
void P3DUserInterface::cb_modelSlideShowFileBrowser(Fl_File_Browser* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_modelSlideShowFileBrowser_i(o,v);
}

void P3DUserInterface::cb_8_i(Fl_Button*, void*) {
  callback->moveUpModelSlideShow();
}
void P3DUserInterface::cb_8(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_8_i(o,v);
}

void P3DUserInterface::cb_2_i(Fl_Button*, void*) {
  callback->moveDownModelSlideShow();
}
void P3DUserInterface::cb_2(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void P3DUserInterface::cb_Add_i(Fl_Button*, void*) {
  callback->addModelsToSlideShow();
}
void P3DUserInterface::cb_Add(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void P3DUserInterface::cb_modelSlideShowCounter_i(Fl_Counter*, void*) {
  callback->changeModelSlideShow();
}
void P3DUserInterface::cb_modelSlideShowCounter(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_modelSlideShowCounter_i(o,v);
}

void P3DUserInterface::cb_Remove1_i(Fl_Button*, void*) {
  callback->removeModelSlideShow();
}
void P3DUserInterface::cb_Remove1(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Remove1_i(o,v);
}

void P3DUserInterface::cb_Clear1_i(Fl_Button*, void*) {
  callback->clearModelSlideShow();
}
void P3DUserInterface::cb_Clear1(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Clear1_i(o,v);
}

void P3DUserInterface::cb_tileSlideShowFileBrowser_i(Fl_File_Browser*, void*) {
  callback->selectTileSlideShow();
}
void P3DUserInterface::cb_tileSlideShowFileBrowser(Fl_File_Browser* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_tileSlideShowFileBrowser_i(o,v);
}

void P3DUserInterface::cb_81_i(Fl_Button*, void*) {
  callback->moveUpTileSlideShow();
}
void P3DUserInterface::cb_81(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_81_i(o,v);
}

void P3DUserInterface::cb_21_i(Fl_Button*, void*) {
  callback->moveDownTileSlideShow();
}
void P3DUserInterface::cb_21(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_21_i(o,v);
}

void P3DUserInterface::cb_Add1_i(Fl_Button*, void*) {
  callback->addTilesToSlideShow();
}
void P3DUserInterface::cb_Add1(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Add1_i(o,v);
}

void P3DUserInterface::cb_tileSlideShowCounter_i(Fl_Counter*, void*) {
  callback->changeTileSlideShow();
}
void P3DUserInterface::cb_tileSlideShowCounter(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_tileSlideShowCounter_i(o,v);
}

void P3DUserInterface::cb_Remove2_i(Fl_Button*, void*) {
  callback->removeTileSlideShow();
}
void P3DUserInterface::cb_Remove2(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Remove2_i(o,v);
}

void P3DUserInterface::cb_Clear2_i(Fl_Button*, void*) {
  callback->clearTileSlideShow();
}
void P3DUserInterface::cb_Clear2(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_Clear2_i(o,v);
}

void P3DUserInterface::cb_pgaDialog_i(movable_Fl_Window*, void*) {
  callback->pgaDeformationWindowDone();
  pgaDialog->hide();
}
void P3DUserInterface::cb_pgaDialog(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_pgaDialog_i(o,v);
}

void P3DUserInterface::cb_pgaNextBtn_i(Fl_Button*, void*) {
  callback->pgaNextScale();
}
void P3DUserInterface::cb_pgaNextBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_pgaNextBtn_i(o,v);
}

void P3DUserInterface::cb_pgaDoneBtn_i(Fl_Button*, void*) {
  callback->pgaDeformationWindowDone();
}
void P3DUserInterface::cb_pgaDoneBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_pgaDoneBtn_i(o,v);
}

void P3DUserInterface::cb_pgaMeanResBtn_i(Fl_Button*, void*) {
  callback->pgaApplyMeanRes();
}
void P3DUserInterface::cb_pgaMeanResBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_pgaMeanResBtn_i(o,v);
}

void P3DUserInterface::cb_pgaSlider1_i(Fl_Slider*, void*) {
  callback->pgaDeform();
}
void P3DUserInterface::cb_pgaSlider1(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pgaSlider1_i(o,v);
}

void P3DUserInterface::cb_pgaSlider2_i(Fl_Slider*, void*) {
  callback->pgaDeform();
}
void P3DUserInterface::cb_pgaSlider2(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pgaSlider2_i(o,v);
}

void P3DUserInterface::cb_pgaSlider3_i(Fl_Slider*, void*) {
  callback->pgaDeform();
}
void P3DUserInterface::cb_pgaSlider3(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pgaSlider3_i(o,v);
}

void P3DUserInterface::cb_pgaSlider4_i(Fl_Slider*, void*) {
  callback->pgaDeform();
}
void P3DUserInterface::cb_pgaSlider4(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pgaSlider4_i(o,v);
}

void P3DUserInterface::cb_pgaSlider5_i(Fl_Slider*, void*) {
  callback->pgaDeform();
}
void P3DUserInterface::cb_pgaSlider5(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pgaSlider5_i(o,v);
}

void P3DUserInterface::cb_pgaZeroBtn_i(Fl_Button*, void*) {
  callback->pgaZero();
}
void P3DUserInterface::cb_pgaZeroBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_pgaZeroBtn_i(o,v);
}
// -------------------------------------------------------------------------

void P3DUserInterface::cb_cpnsDialog_i(movable_Fl_Window*, void*) {
  callback->cpnsDeformationWindowDone();
  cpnsDialog->hide();
}
void P3DUserInterface::cb_cpnsDialog(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_cpnsDialog_i(o,v);
}
void P3DUserInterface::cb_cpnsDoneBtn_i(Fl_Button*, void*) {
  callback->cpnsDeformationWindowDone();
}
void P3DUserInterface::cb_cpnsDoneBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cpnsDoneBtn_i(o,v);
}

void P3DUserInterface::cb_cpnsSlider1_i(Fl_Slider*, void*) {
  callback->cpnsDeform();
}
void P3DUserInterface::cb_cpnsSlider1(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_cpnsSlider1_i(o,v);
}

void P3DUserInterface::cb_cpnsSlider2_i(Fl_Slider*, void*) {
  callback->cpnsDeform();
}
void P3DUserInterface::cb_cpnsSlider2(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_cpnsSlider2_i(o,v);
}

void P3DUserInterface::cb_cpnsSlider3_i(Fl_Slider*, void*) {
  callback->cpnsDeform();
}
void P3DUserInterface::cb_cpnsSlider3(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_cpnsSlider3_i(o,v);
}

void P3DUserInterface::cb_cpnsSlider4_i(Fl_Slider*, void*) {
  callback->cpnsDeform();
}
void P3DUserInterface::cb_cpnsSlider4(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_cpnsSlider4_i(o,v);
}

void P3DUserInterface::cb_cpnsSlider5_i(Fl_Slider*, void*) {
  callback->cpnsDeform();
}
void P3DUserInterface::cb_cpnsSlider5(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_cpnsSlider5_i(o,v);
}

void P3DUserInterface::cb_cpnsZeroBtn_i(Fl_Button*, void*) {
  callback->cpnsZero();
}
void P3DUserInterface::cb_cpnsZeroBtn(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_cpnsZeroBtn_i(o,v);
}
// -------------------------------------------------------------------------

void P3DUserInterface::cb_pcaDialog_i(movable_Fl_Window*, void*) {
  pcaDialog->hide();
}
void P3DUserInterface::cb_pcaDialog(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_pcaDialog_i(o,v);
}

void P3DUserInterface::cb_pcaSlider1_i(Fl_Slider*, void*) {
  callback->pcaDeform();
}
void P3DUserInterface::cb_pcaSlider1(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pcaSlider1_i(o,v);
}

void P3DUserInterface::cb_pcaSlider2_i(Fl_Slider*, void*) {
  callback->pcaDeform();
}
void P3DUserInterface::cb_pcaSlider2(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pcaSlider2_i(o,v);
}

void P3DUserInterface::cb_pcaSlider3_i(Fl_Slider*, void*) {
  callback->pcaDeform();
}
void P3DUserInterface::cb_pcaSlider3(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pcaSlider3_i(o,v);
}

void P3DUserInterface::cb_pcaSlider4_i(Fl_Slider*, void*) {
  callback->pcaDeform();
}
void P3DUserInterface::cb_pcaSlider4(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pcaSlider4_i(o,v);
}

void P3DUserInterface::cb_pcaSlider5_i(Fl_Slider*, void*) {
  callback->pcaDeform();
}
void P3DUserInterface::cb_pcaSlider5(Fl_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_pcaSlider5_i(o,v);
}

void P3DUserInterface::cb_transformationRecordingTestDialog_i(Fl_Double_Window*, void*) {
  transformationRecordingTestDialog->hide();
}
void P3DUserInterface::cb_transformationRecordingTestDialog(Fl_Double_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_transformationRecordingTestDialog_i(o,v);
}

void P3DUserInterface::cb_startRecordingButton_i(Fl_Button*, void*) {
  callback->startRecording();
}
void P3DUserInterface::cb_startRecordingButton(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_startRecordingButton_i(o,v);
}

void P3DUserInterface::cb_endRecordingButton_i(Fl_Button*, void*) {
  callback->endRecording();
}
void P3DUserInterface::cb_endRecordingButton(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_endRecordingButton_i(o,v);
}

void P3DUserInterface::cb_resetRecordingButton_i(Fl_Button*, void*) {
  callback->resetObject();
}
void P3DUserInterface::cb_resetRecordingButton(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_resetRecordingButton_i(o,v);
}

void P3DUserInterface::cb_testRecordingButton_i(Fl_Button*, void*) {
  callback->testTransformation();
}
void P3DUserInterface::cb_testRecordingButton(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_testRecordingButton_i(o,v);
}

void P3DUserInterface::cb_interpolatedPrimitiveWindow_i(movable_Fl_Window*, void*) {
  interpolatedPrimitiveWindow->hide();
}
void P3DUserInterface::cb_interpolatedPrimitiveWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_interpolatedPrimitiveWindow_i(o,v);
}

void P3DUserInterface::cb_uSlider_i(Fl_Value_Slider*, void*) {
  callback->interpolatePrimitive(uSlider->value(), vSlider->value());
}
void P3DUserInterface::cb_uSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_uSlider_i(o,v);
}

void P3DUserInterface::cb_vSlider_i(Fl_Value_Slider*, void*) {
  callback->interpolatePrimitive(uSlider->value(), vSlider->value());
}
void P3DUserInterface::cb_vSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_vSlider_i(o,v);
}

void P3DUserInterface::cb_Done2_i(Fl_Return_Button*, void*) {
  callback->destroyInterpolatedPrimitive();
}
void P3DUserInterface::cb_Done2(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Done2_i(o,v);
}

void P3DUserInterface::cb_subfigureTransformationTestDialog_i(Fl_Double_Window*, void*) {
  subfigureTransformationTestDialog->hide();
}
void P3DUserInterface::cb_subfigureTransformationTestDialog(Fl_Double_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_subfigureTransformationTestDialog_i(o,v);
}

void P3DUserInterface::cb_hingeRotationCounter_i(Fl_Counter*, void*) {
  callback->hingeSubfigure();
}
void P3DUserInterface::cb_hingeRotationCounter(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_hingeRotationCounter_i(o,v);
}

void P3DUserInterface::cb_surfaceRotationCounter_i(Fl_Counter*, void*) {
  callback->rotateSubfigure();
}
void P3DUserInterface::cb_surfaceRotationCounter(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_surfaceRotationCounter_i(o,v);
}

void P3DUserInterface::cb_subfigureElongationCounter_i(Fl_Counter*, void*) {
  callback->elongateSubfigure();
}
void P3DUserInterface::cb_subfigureElongationCounter(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_subfigureElongationCounter_i(o,v);
}

void P3DUserInterface::cb_subfigureScaleCounter_i(Fl_Counter*, void*) {
  callback->scaleSubfigure();
}
void P3DUserInterface::cb_subfigureScaleCounter(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_subfigureScaleCounter_i(o,v);
}

void P3DUserInterface::cb_uTranslationCounter_i(Fl_Counter*, void*) {
  callback->translateSubfigure();
}
void P3DUserInterface::cb_uTranslationCounter(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_uTranslationCounter_i(o,v);
}

void P3DUserInterface::cb_vTranslationCounter_i(Fl_Counter*, void*) {
  callback->translateSubfigure();
}
void P3DUserInterface::cb_vTranslationCounter(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_vTranslationCounter_i(o,v);
}

void P3DUserInterface::cb_Initialize_i(Fl_Button*, void*) {
  callback->initializeSubfigureTransformation();
}
void P3DUserInterface::cb_Initialize(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Initialize_i(o,v);
}

void P3DUserInterface::cb_testConstraintsDialog_i(Fl_Double_Window*, void*) {
  testConstraintsDialog->hide();
}
void P3DUserInterface::cb_testConstraintsDialog(Fl_Double_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_testConstraintsDialog_i(o,v);
}

void P3DUserInterface::cb_Test1_i(Fl_Button*, void*) {
  callback->testConstraintsPenalty();
}
void P3DUserInterface::cb_Test1(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Test1_i(o,v);
}

void P3DUserInterface::cb_Setup_i(Fl_Button*, void*) {
  callback->initializeTestConstraints();
}
void P3DUserInterface::cb_Setup(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Setup_i(o,v);
}

void P3DUserInterface::cb_testSeuratDialog_i(Fl_Double_Window*, void*) {
  testSeuratDialog->hide();
}
void P3DUserInterface::cb_testSeuratDialog(Fl_Double_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_testSeuratDialog_i(o,v);
}

void P3DUserInterface::cb_Print3_i(Fl_Button*, void*) {
  callback->testSeurat();
}
void P3DUserInterface::cb_Print3(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Print3_i(o,v);
}

void P3DUserInterface::cb_matchSurfacesDialog_i(Fl_Double_Window*, void*) {
  matchSurfacesDialog->hide();
}
void P3DUserInterface::cb_matchSurfacesDialog(Fl_Double_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_matchSurfacesDialog_i(o,v);
}

void P3DUserInterface::cb_matchIntensityMinSlider_i(Fl_Value_Slider*, void*) {
  callback->setMatchSurfaceColorRange();
}
void P3DUserInterface::cb_matchIntensityMinSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_matchIntensityMinSlider_i(o,v);
}

void P3DUserInterface::cb_matchIntensityMaxSlider_i(Fl_Value_Slider*, void*) {
  callback->setMatchSurfaceColorRange();
}
void P3DUserInterface::cb_matchIntensityMaxSlider(Fl_Value_Slider* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_matchIntensityMaxSlider_i(o,v);
}

void P3DUserInterface::cb_showMatchSurfacesButton_i(Fl_Light_Button*, void*) {
  callback->toggleMatchSurfaceDisplay();
}
void P3DUserInterface::cb_showMatchSurfacesButton(Fl_Light_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_showMatchSurfacesButton_i(o,v);
}

void P3DUserInterface::cb_tieToImageSlidersButton_i(Fl_Check_Button*, void*) {
  callback->tieSurfaceToImageSlider((int) tieToImageSlidersButton->value());
}
void P3DUserInterface::cb_tieToImageSlidersButton(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_tieToImageSlidersButton_i(o,v);
}

void P3DUserInterface::cb_matchSurfaceNoneBtn_i(Fl_Check_Button*, void*) {
  callback->setMatchSurfaceStyle(M3D_NONE);
}
void P3DUserInterface::cb_matchSurfaceNoneBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_matchSurfaceNoneBtn_i(o,v);
}

void P3DUserInterface::cb_matchSurfacePointcloudBtn_i(Fl_Check_Button*, void*) {
  callback->setMatchSurfaceStyle(M3D_COLORED_POINTCLOUD);
}
void P3DUserInterface::cb_matchSurfacePointcloudBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_matchSurfacePointcloudBtn_i(o,v);
}

void P3DUserInterface::cb_matchSurfaceWireframeBtn_i(Fl_Check_Button*, void*) {
  callback->setMatchSurfaceStyle(M3D_COLORED_WIREFRAME);
}
void P3DUserInterface::cb_matchSurfaceWireframeBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_matchSurfaceWireframeBtn_i(o,v);
}

void P3DUserInterface::cb_matchSurfaceSolidBtn_i(Fl_Check_Button*, void*) {
  callback->setMatchSurfaceStyle(M3D_COLORED_SOLID);
}
void P3DUserInterface::cb_matchSurfaceSolidBtn(Fl_Check_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->parent()->user_data()))->cb_matchSurfaceSolidBtn_i(o,v);
}

void P3DUserInterface::cb_matchSurfaceSerialNumber_i(Fl_Counter*, void*) {
  callback->matchSurfaceSerialNumberChanged((int) matchSurfaceSerialNumber->value());
}
void P3DUserInterface::cb_matchSurfaceSerialNumber(Fl_Counter* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_matchSurfaceSerialNumber_i(o,v);
}

void P3DUserInterface::cb_matchSurfaceColormapChoice_i(Fl_Choice*, void*) {
  callback->chooseMatchSurfaceColormap();
}
void P3DUserInterface::cb_matchSurfaceColormapChoice(Fl_Choice* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_matchSurfaceColormapChoice_i(o,v);
}

void P3DUserInterface::cb_Discard_i(Fl_Button*, void*) {
  callback->discardMatchSurfaces();
}
void P3DUserInterface::cb_Discard(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Discard_i(o,v);
}

void P3DUserInterface::cb_plainMatchSurfacesButton_i(Fl_Light_Button*, void*) {
  callback->togglePlainMatchSurfaces(plainMatchSurfacesButton->value());
}
void P3DUserInterface::cb_plainMatchSurfacesButton(Fl_Light_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_plainMatchSurfacesButton_i(o,v);
}

void P3DUserInterface::cb_regularizerWindow_i(movable_Fl_Window*, void*) {
  regularizerWindow->hide();
}
void P3DUserInterface::cb_regularizerWindow(movable_Fl_Window* o, void* v) {
  ((P3DUserInterface*)(o->user_data()))->cb_regularizerWindow_i(o,v);
}

void P3DUserInterface::cb_Close2_i(Fl_Return_Button*, void*) {
  regularizerWindow->hide();
}
void P3DUserInterface::cb_Close2(Fl_Return_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Close2_i(o,v);
}

void P3DUserInterface::cb_Regularize1_i(Fl_Button*, void*) {
  callback->regularizeModel((int) regularizeIterationSlider->value(), regularizeStepsizeSlider->value());
}
void P3DUserInterface::cb_Regularize1(Fl_Button* o, void* v) {
  ((P3DUserInterface*)(o->parent()->user_data()))->cb_Regularize1_i(o,v);
}

P3DUserInterface::P3DUserInterface(int windowPropsPosn[WIN_PROPS_LEN][2], bool windowPropsOpen[WIN_PROPS_LEN]) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = modelWindow = new movable_Fl_Window(605, 700, "Model Window");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_modelWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Aspect_Ratio_Group* o = taskDisplayGrp = new Fl_Aspect_Ratio_Group(5, 5, 595, 50);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Text_Display* o = taskDisplayText = new Fl_Text_Display(25, 5, 555, 50);
        o->box(FL_EMBOSSED_FRAME);
        o->align(FL_ALIGN_CENTER);
      }
      o->end();
    }
    { Fl_Aspect_Ratio_Group* o = modelDisplayGrp = new Fl_Aspect_Ratio_Group(5, 65, 595, 595);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
      { P3DView* o = modelView = new P3DView(5, 65, 595, 595);
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_FOREGROUND_COLOR);
        o->labeltype(FL_NO_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      o->end();
    }
    { Fl_Aspect_Ratio_Group* o = modelWindowButtonGrp = new Fl_Aspect_Ratio_Group(0, 660, 605, 40);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Button* o = axialViewBtn = new Fl_Button(5, 670, 30, 25, "A");
        o->box(FL_BORDER_BOX);
        o->shortcut(0x61);
        o->color((Fl_Color)4);
        o->selection_color((Fl_Color)6);
        o->labelfont(1);
        o->labelsize(16);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_axialViewBtn);
      }
      { Fl_Button* o = saggitalViewBtn = new Fl_Button(35, 670, 30, 25, "S");
        o->box(FL_BORDER_BOX);
        o->shortcut(0x73);
        o->color((Fl_Color)4);
        o->selection_color((Fl_Color)6);
        o->labelfont(1);
        o->labelsize(16);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_saggitalViewBtn);
      }
      { Fl_Button* o = coronalViewBtn = new Fl_Button(65, 670, 30, 25, "C");
        o->box(FL_BORDER_BOX);
        o->shortcut(0x63);
        o->color((Fl_Color)4);
        o->selection_color((Fl_Color)6);
        o->labelfont(1);
        o->labelsize(16);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_coronalViewBtn);
      }
      { Fl_Button* o = centerBtn = new Fl_Button(535, 670, 65, 25, "Center");
        o->box(FL_BORDER_BOX);
        o->shortcut(0x78);
        o->color((Fl_Color)4);
        o->selection_color((Fl_Color)6);
        o->labelfont(1);
        o->labelsize(16);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_centerBtn);
      }
      { Fl_Button* o = rotateLeft90 = new Fl_Button(220, 670, 30, 25, "@circle");
        o->labelcolor((Fl_Color)4);
        o->callback((Fl_Callback*)cb_rotateLeft90);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = rotateHorizontal180 = new Fl_Button(275, 670, 30, 25, "@<");
        o->color((Fl_Color)46);
        o->labelcolor((Fl_Color)4);
        o->callback((Fl_Callback*)cb_rotateHorizontal180);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = rotateVertical180 = new Fl_Button(325, 670, 30, 25, "@2>");
        o->color(FL_LIGHT2);
        o->labelcolor((Fl_Color)4);
        o->callback((Fl_Callback*)cb_rotateVertical180);
        o->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = rotateRight90 = new Fl_Button(380, 670, 30, 25, "@circle");
        o->labelcolor((Fl_Color)4);
        o->callback((Fl_Callback*)cb_rotateRight90);
        o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
  #ifdef TASKING
    modelWindow->size_range(285, 380, Fl::h(), Fl::w());
  #else
    modelWindow->size_range(285, 320, Fl::h(), Fl::w());
  #endif
  { movable_Fl_Window* o = mainWindow = new movable_Fl_Window(503, 90, "Pablo");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_mainWindow, (void*)(this));
    o->align(FL_ALIGN_CENTER);
    o->when(FL_WHEN_RELEASE);
    { Fl_Menu_Bar* o = menuBar = new Fl_Menu_Bar(0, 0, 605, 25);
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(4);
      o->menu(menu_menuBar);
    }
    { Fl_Button* o = secretButton = new Fl_Button(675, 265, 10, 15);
      o->shortcut(0x50074);
      o->callback((Fl_Callback*)cb_secretButton);
    }
    o->end();
  }
  callback = new P3DUserInterfaceCallback;
  callback->setUserInterface(this);
  make_DisplayControl(windowPropsPosn[DISPLAY_CONTROL_WIN][0], windowPropsPosn[DISPLAY_CONTROL_WIN][1], windowPropsOpen[DISPLAY_CONTROL_WIN]);
  make_VisibilityControl(windowPropsPosn[VISIBILITY_CONTROL_WIN][0], windowPropsPosn[VISIBILITY_CONTROL_WIN][1], windowPropsOpen[VISIBILITY_CONTROL_WIN]);
  make_ConstraintsWindow(windowPropsPosn[CONSTRAINTS_WIN][0], windowPropsPosn[CONSTRAINTS_WIN][1]);
  make_editLandmarksWindow(windowPropsPosn[EDIT_LANDMARKS_WIN][0], windowPropsPosn[EDIT_LANDMARKS_WIN][1]);
  make_editModelWindow(windowPropsPosn[EDIT_MODEL_PROPERTIES_WIN][0], windowPropsPosn[EDIT_MODEL_PROPERTIES_WIN][1]);
  make_PrimitiveEditor(windowPropsPosn[ATOM_EDITOR_WIN][0], windowPropsPosn[ATOM_EDITOR_WIN][1], windowPropsOpen[ATOM_EDITOR_WIN]);
  make_addQuadFigureDlg(windowPropsPosn[ADD_QUAD_FIGURE_WIN][0], windowPropsPosn[ADD_QUAD_FIGURE_WIN][1], windowPropsOpen[ADD_QUAD_FIGURE_WIN]);
  make_CutPlaneWindows(windowPropsPosn);
  make_CutPlaneControl(windowPropsPosn[CUT_PLANES_CONTROL_WIN][0], windowPropsPosn[CUT_PLANES_CONTROL_WIN][1], windowPropsOpen[CUT_PLANES_CONTROL_WIN]);
  make_AttachFigureDialog(windowPropsPosn[ATTACH_SUBFIGURE_WIN][0], windowPropsPosn[ATTACH_SUBFIGURE_WIN][1], windowPropsOpen[ATTACH_SUBFIGURE_WIN]);
  make_ElongationDialog(windowPropsPosn[ELONGATION_WIN][0], windowPropsPosn[ELONGATION_WIN][1], windowPropsOpen[ELONGATION_WIN]);
  make_OptimizerControlDialog(windowPropsPosn[OPTIMIZER_CONTROL_WIN][0], windowPropsPosn[OPTIMIZER_CONTROL_WIN][1], windowPropsOpen[OPTIMIZER_CONTROL_WIN]);
  make_OptimizerSettingsDialog(windowPropsPosn[OPTIMIZER_SETTINGS_WIN][0], windowPropsPosn[OPTIMIZER_SETTINGS_WIN][1], windowPropsOpen[OPTIMIZER_SETTINGS_WIN]);
  make_PreferencesEditor(windowPropsPosn[PREFERENCES_EDITOR_WIN][0], windowPropsPosn[PREFERENCES_EDITOR_WIN][1], windowPropsPosn[IMAGE_PREFS_EDITOR_WIN][0], windowPropsPosn[IMAGE_PREFS_EDITOR_WIN][1]);
  make_ModelSlideShowWindow(windowPropsPosn[MODEL_SLIDE_SHOW_WIN][0], windowPropsPosn[MODEL_SLIDE_SHOW_WIN][1], windowPropsOpen[MODEL_SLIDE_SHOW_WIN]);
  make_PGAWindow(windowPropsPosn[PGA_DEFORMATION_WIN][0], windowPropsPosn[PGA_DEFORMATION_WIN][1], windowPropsOpen[PGA_DEFORMATION_WIN]);
  make_CPNSWindow(windowPropsPosn[CPNS_DEFORMATION_WIN][0], windowPropsPosn[CPNS_DEFORMATION_WIN][1], windowPropsOpen[CPNS_DEFORMATION_WIN]);
  #ifdef PCA_VISUALIZER
  make_PCAWindow(windowPropsPosn[PCA_DEFORMATION_WIN][0], windowPropsPosn[PCA_DEFORMATION_WIN][1]);
  #endif
  make_TransformationRecordingTestDialog();
  make_ReorderPopup();
  #ifdef BINARY
    make_AboutBinaryPabloWindow(windowPropsPosn[ABOUT_PABLO_WIN][0], windowPropsPosn[ABOUT_PABLO_WIN][1],
      windowPropsOpen[ABOUT_PABLO_WIN]);
  #else
    make_AboutPabloWindow(windowPropsPosn[ABOUT_PABLO_WIN][0], windowPropsPosn[ABOUT_PABLO_WIN][1],
	windowPropsOpen[ABOUT_PABLO_WIN]);
  #endif
  #ifndef PRODUCTION_VERSION
    make_InterpolatedPrimitiveWindow(windowPropsPosn[INTERPOLATED_PRIMITIVE_WIN][0],
          windowPropsPosn[INTERPOLATED_PRIMITIVE_WIN][1],
          windowPropsOpen[INTERPOLATED_PRIMITIVE_WIN]);
    make_SubfigureTransformationTestDialog();
    make_RegularizerWindow(windowPropsPosn[REGULARIZER_WIN][0], windowPropsPosn[REGULARIZER_WIN][1], windowPropsOpen[REGULARIZER_WIN]);
    make_testConstraintsDialog();
    make_testSeuratDialog();
    make_MatchSurfacesDialog(windowPropsPosn[MATCH_SURFACES_WIN][0], windowPropsPosn[MATCH_SURFACES_WIN][1], windowPropsOpen[MATCH_SURFACES_WIN]);
  #endif
  callback->init();
  modelView->setUserInterfaceCallback(callback);
  mainWindow->resize(windowPropsPosn[MAIN_WIN][0], windowPropsPosn[MAIN_WIN][1], 605, 27);
  mainWindow->redraw();
  #ifdef TASKING
    modelWindow->resize(windowPropsPosn[MODEL_WIN][0], windowPropsPosn[MODEL_WIN][1], 605, 700);
  #else
    taskDisplayGrp->hide();
    modelDisplayGrp->resize(5, 5, 595, 595);
    modelWindowButtonGrp->resize(0, 600, 605, 640);
    modelWindow->resize(windowPropsPosn[MODEL_WIN][0], windowPropsPosn[MODEL_WIN][1], 605, 640);
  #endif
  modelWindow->redraw();
  callback->initAboutPabloWindow();
}
// Note: before writing code, set the
// front tab of the next two windows.
// (See gui/src/fluid_instructions.txt).

movable_Fl_Window* P3DUserInterface::make_DisplayControl(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = displayControlWindow = new movable_Fl_Window(375, 239, "Display Control");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_displayControlWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Tabs* o = displayControlTabs = new Fl_Tabs(5, 5, 473, 208);
      { Fl_Group* o = displayControlGeneralTab = new Fl_Group(10, 36, 360, 170, "General");
        o->labelfont(1);
        o->labelsize(12);
        { Fl_Check_Button* o = unitCubeCheckBox = new Fl_Check_Button(15, 46, 20, 25, "Unit cube");
          o->down_box(FL_EMBOSSED_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_unitCubeCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Check_Button* o = stdAxesCheckBox = new Fl_Check_Button(15, 76, 20, 25, "Standard axes");
          o->down_box(FL_EMBOSSED_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_stdAxesCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Check_Button* o = stdRockingCheckBox = new Fl_Check_Button(140, 76, 20, 25, "Rocking motion");
          o->down_box(FL_EMBOSSED_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_stdRockingCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Output* o = modelPathOutput = new Fl_Output(50, 113, 310, 30);
          o->type(12);
          o->box(FL_FLAT_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labelsize(10);
          o->textfont(4);
          o->textsize(10);
          o->align(132);
        }
        { Fl_Output* o = imagePathOutput = new Fl_Output(50, 173, 310, 28);
          o->type(12);
          o->box(FL_FLAT_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labelsize(10);
          o->textfont(4);
          o->textsize(10);
          o->align(132);
        }
        { Fl_Output* o = tilesetPathOutput = new Fl_Output(50, 143, 310, 30);
          o->type(12);
          o->box(FL_FLAT_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labelsize(10);
          o->textfont(4);
          o->textsize(10);
          o->align(132);
        }
        { Fl_Box* o = new Fl_Box(15, 166, 35, 25, "Image:");
          o->labelsize(10);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Box* o = new Fl_Box(15, 136, 35, 25, "Tiles:");
          o->labelsize(10);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Box* o = new Fl_Box(15, 106, 35, 25, "Model:");
          o->labelsize(10);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = visibilityWindowCheckBox = new Fl_Check_Button(115, 46, 20, 25, "Visibility window");
          o->down_box(FL_EMBOSSED_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_visibilityWindowCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Check_Button* o = cutPlaneWindowCheckBox = new Fl_Check_Button(245, 46, 20, 25, "Atom cut planes");
          o->down_box(FL_EMBOSSED_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_cutPlaneWindowCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        o->end();
      }
      { Fl_Group* o = displayControlSurfaceTab = new Fl_Group(10, 36, 360, 170, "Surface");
        o->labelfont(1);
        o->labelsize(12);
        o->hide();
        { Fl_Group* o = new Fl_Group(255, 66, 95, 100, "Subdivision");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = SurfaceLevel_0Btn = new Fl_Check_Button(260, 66, 65, 25, "Level 0");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_SurfaceLevel_0Btn);
          }
          { Fl_Check_Button* o = SurfaceLevel_1Btn = new Fl_Check_Button(260, 91, 65, 25, "Level 1");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_SurfaceLevel_1Btn);
          }
          { Fl_Check_Button* o = SurfaceLevel_2Btn = new Fl_Check_Button(260, 116, 65, 25, "Level 2");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_SurfaceLevel_2Btn);
          }
          { Fl_Check_Button* o = SurfaceLevel_3Btn = new Fl_Check_Button(260, 141, 65, 25, "Level 3");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_SurfaceLevel_3Btn);
          }
          setSurfaceLevelBtns(modelView->getSurfaceLevel());
          o->end();
        }
        { Fl_Group* o = new Fl_Group(135, 66, 100, 100, "Surface Type");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = noneBtn = new Fl_Check_Button(140, 66, 55, 25, "None");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_noneBtn);
          }
          { Fl_Check_Button* o = pointcloudBtn = new Fl_Check_Button(140, 91, 85, 25, "Point cloud");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_pointcloudBtn);
          }
          { Fl_Check_Button* o = wireframeBtn = new Fl_Check_Button(140, 116, 85, 25, "Wire frame");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_wireframeBtn);
          }
          { Fl_Check_Button* o = solidBtn = new Fl_Check_Button(140, 141, 55, 25, "Solid");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_solidBtn);
          }
          setSurfaceTypeBtns(modelView->getSurfaceStyle());
          o->end();
        }
        { Fl_Check_Button* o = blendFiguresBtn = new Fl_Check_Button(170, 171, 20, 25, "Blend subfigures to figures");
          o->down_box(FL_EMBOSSED_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_blendFiguresBtn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Check_Button* o = drawBoundaryBtn = new Fl_Check_Button(25, 125, 20, 25, "Boundary");
          o->down_box(FL_EMBOSSED_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_drawBoundaryBtn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Check_Button* o = drawFigureNamesBtn = new Fl_Check_Button(25, 170, 20, 25, "Figure Names");
          o->down_box(FL_EMBOSSED_BOX);
          o->value(1);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_drawFigureNamesBtn);
          o->align(FL_ALIGN_RIGHT);
        }
        o->end();
      }
      { Fl_Group* o = displayControlImageTab = new Fl_Group(10, 31, 360, 175, "Image");
        o->labelfont(1);
        o->labelsize(12);
        o->hide();
        { Fl_Box* o = new Fl_Box(45, 46, 50, 30, "On/Off");
          o->labelsize(12);
        }
        { Fl_Box* o = new Fl_Box(105, 46, 60, 30, "Position");
          o->labelsize(12);
        }
        { Fl_Box* o = new Fl_Box(325, 46, 40, 30, "Slice");
          o->labelsize(12);
        }
        { Fl_Check_Button* o = drawBoundaryBtn2 = new Fl_Check_Button(195, 31, 25, 30, "Boundary");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->callback((Fl_Callback*)cb_drawBoundaryBtn2);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Group* o = xPosition = new Fl_Group(15, 66, 355, 29);
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = xImagePlaneCheckBox = new Fl_Check_Button(70, 69, 25, 25, "Sagittal  ");
            o->down_box(FL_EMBOSSED_BOX);
            o->color((Fl_Color)55);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_xImagePlaneCheckBox);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Roller* o = xImagePlanePositionRoller = new Fl_Roller(195, 71, 120, 15);
            o->type(1);
            o->box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->maximum(100);
            o->step(1);
            o->value(50);
            o->callback((Fl_Callback*)cb_xImagePlanePositionRoller);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Button* o = xImagePlaneSlice = new Fl_Button(325, 71, 40, 20);
            o->box(FL_DOWN_BOX);
            o->labelsize(12);
            o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = xImagePlanePosition = new Fl_Button(95, 71, 90, 20);
            o->box(FL_DOWN_BOX);
            o->labelsize(12);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Progress* o = xImagePlanePositionGraph = new Fl_Progress(195, 88, 120, 2);
            o->box(FL_FLAT_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color((Fl_Color)3);
            o->labeltype(FL_NO_LABEL);
            o->align(FL_ALIGN_CENTER);
          }
          o->end();
        }
        { Fl_Group* o = yPosition = new Fl_Group(15, 91, 355, 29);
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = yImagePlaneCheckBox = new Fl_Check_Button(70, 94, 25, 25, "Coronal  ");
            o->down_box(FL_EMBOSSED_BOX);
            o->color((Fl_Color)55);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_yImagePlaneCheckBox);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Roller* o = yImagePlanePositionRoller = new Fl_Roller(195, 96, 120, 15);
            o->type(1);
            o->box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->maximum(100);
            o->step(1);
            o->value(50);
            o->callback((Fl_Callback*)cb_yImagePlanePositionRoller);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Button* o = yImagePlaneSlice = new Fl_Button(325, 96, 40, 20);
            o->box(FL_DOWN_BOX);
            o->labelsize(12);
            o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = yImagePlanePosition = new Fl_Button(95, 96, 90, 20);
            o->box(FL_DOWN_BOX);
            o->labelsize(12);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Progress* o = yImagePlanePositionGraph = new Fl_Progress(195, 113, 120, 2);
            o->box(FL_FLAT_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color((Fl_Color)3);
            o->labeltype(FL_NO_LABEL);
            o->align(FL_ALIGN_CENTER);
          }
          o->end();
        }
        { Fl_Group* o = zPosition = new Fl_Group(15, 116, 355, 29);
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = zImagePlaneCheckBox = new Fl_Check_Button(70, 119, 25, 25, "Axial  ");
            o->down_box(FL_EMBOSSED_BOX);
            o->color((Fl_Color)55);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_zImagePlaneCheckBox);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Roller* o = zImagePlanePositionRoller = new Fl_Roller(195, 121, 120, 15);
            o->type(1);
            o->box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->maximum(100);
            o->step(1);
            o->value(50);
            o->callback((Fl_Callback*)cb_zImagePlanePositionRoller);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Button* o = zImagePlaneSlice = new Fl_Button(325, 121, 40, 20);
            o->box(FL_DOWN_BOX);
            o->labelsize(12);
            o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
          }
          { Fl_Button* o = zImagePlanePosition = new Fl_Button(95, 121, 90, 20);
            o->box(FL_DOWN_BOX);
            o->labelsize(12);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Progress* o = zImagePlanePositionGraph = new Fl_Progress(195, 138, 120, 2);
            o->box(FL_FLAT_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color((Fl_Color)3);
            o->labeltype(FL_NO_LABEL);
            o->align(FL_ALIGN_CENTER);
          }
          o->end();
        }
        { Fl_Group* o = intensityMin = new Fl_Group(10, 148, 360, 25);
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Button* o = intensityMinOutput = new Fl_Button(310, 151, 55, 20);
            o->box(FL_DOWN_BOX);
            o->labelsize(12);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Slider* o = intensityMinSlider = new Fl_Slider(135, 151, 165, 20);
            o->type(5);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->maximum(1000);
            o->step(1);
            o->callback((Fl_Callback*)cb_intensityMinSlider);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = intensityMinValuator = new Fl_Value_Input(90, 151, 45, 20, "Intensity min");
            o->labelsize(12);
            o->maximum(1000);
            o->step(1);
            o->textsize(12);
            o->callback((Fl_Callback*)cb_intensityMinValuator);
          }
          o->end();
        }
        { Fl_Group* o = intensityMax = new Fl_Group(10, 174, 360, 25);
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Button* o = intensityMaxOutput = new Fl_Button(310, 176, 55, 20);
            o->box(FL_DOWN_BOX);
            o->labelsize(12);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          }
          { Fl_Slider* o = intensityMaxSlider = new Fl_Slider(135, 176, 165, 20);
            o->type(5);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->maximum(1000);
            o->step(1);
            o->callback((Fl_Callback*)cb_intensityMaxSlider);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = intensityMaxValuator = new Fl_Value_Input(90, 176, 45, 20, "Intensity max");
            o->labelsize(12);
            o->maximum(1000);
            o->step(1);
            o->textsize(12);
            o->callback((Fl_Callback*)cb_intensityMaxValuator);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = displayControlTilesetTab = new Fl_Group(10, 36, 355, 170, "Tile Set");
        o->labelfont(1);
        o->labelsize(12);
        o->hide();
        { Fl_Check_Button* o = viewTileSetCheckBox = new Fl_Check_Button(25, 56, 20, 25, "View tile set");
          o->down_box(FL_EMBOSSED_BOX);
          o->value(1);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_viewTileSetCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Check_Button* o = tileSetColorCheckBox = new Fl_Check_Button(51, 123, 20, 25, "Use default color");
          o->down_box(FL_EMBOSSED_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_tileSetColorCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Value_Slider* o = tileAlphaSlider = new Fl_Value_Slider(51, 79, 175, 15, "Opacity");
          o->type(5);
          o->labelsize(12);
          o->value(1);
          o->callback((Fl_Callback*)cb_tileAlphaSlider);
        }
        { Fl_Check_Button* o = tileSetSolidCheckBox = new Fl_Check_Button(51, 106, 20, 25, "Solid");
          o->down_box(FL_EMBOSSED_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_tileSetSolidCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Group* o = new Fl_Group(245, 56, 100, 55, "Opacity Range");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Round_Button* o = tileSetBrightCheckBox = new Fl_Round_Button(260, 56, 20, 25, "Brighter");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileSetBrightCheckBox);
            o->align(FL_ALIGN_RIGHT);
          }
          { Fl_Round_Button* o = tileSetNormalCheckBox = new Fl_Round_Button(260, 71, 20, 25, "Normal");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->value(1);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileSetNormalCheckBox);
            o->align(FL_ALIGN_RIGHT);
          }
          { Fl_Round_Button* o = tileSetDarkCheckBox = new Fl_Round_Button(260, 86, 20, 25, "Darker");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileSetDarkCheckBox);
            o->align(FL_ALIGN_RIGHT);
          }
          o->end();
        }
        { Fl_Check_Button* o = tileSetMobileCheckBox = new Fl_Check_Button(25, 149, 20, 25, "Mobile");
          o->down_box(FL_EMBOSSED_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_tileSetMobileCheckBox);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Group* o = new Fl_Group(48, 173, 302, 23, "Move Figs:");
          o->box(FL_ENGRAVED_BOX);
          o->labelsize(12);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          { Fl_Check_Button* o = tileMobileFig0 = new Fl_Check_Button(120, 179, 40, 11, "0");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileMobileFig0);
          }
          { Fl_Check_Button* o = tileMobileFig1 = new Fl_Check_Button(159, 179, 40, 11, "1");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileMobileFig1);
          }
          { Fl_Check_Button* o = tileMobileFig2 = new Fl_Check_Button(198, 179, 40, 11, "2");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileMobileFig2);
          }
          { Fl_Check_Button* o = tileMobileFig3 = new Fl_Check_Button(237, 179, 40, 11, "3");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileMobileFig3);
          }
          { Fl_Check_Button* o = tileMobileFig4 = new Fl_Check_Button(276, 179, 40, 11, "4");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileMobileFig4);
          }
          { Fl_Check_Button* o = tileMobileFig5 = new Fl_Check_Button(315, 179, 35, 11, "5");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_tileMobileFig5);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = displayControlClipTab = new Fl_Group(7, 31, 368, 179, "Clip");
        o->labelfont(1);
        o->labelsize(12);
        o->hide();
        { Fl_Group* o = new Fl_Group(7, 33, 225, 177, "Clip Planes");
          o->box(FL_UP_FRAME);
          o->labelfont(1);
          o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
          { Fl_Box* o = new Fl_Box(30, 49, 30, 16, "(Ax");
            o->labelsize(12);
          }
          { Fl_Box* o = new Fl_Box(61, 49, 30, 16, "+ By");
            o->labelsize(12);
          }
          { Fl_Box* o = new Fl_Box(92, 49, 30, 16, "+ Cz");
            o->labelsize(12);
          }
          { Fl_Box* o = new Fl_Box(127, 49, 30, 16, "<D)");
            o->labelsize(12);
          }
          { Fl_Box* o = new Fl_Box(162, 49, 30, 16, "View");
            o->labelsize(12);
          }
          { Fl_Button* o = clipCapture0 = new Fl_Button(159, 71, 37, 20, "Copy");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipCapture0);
          }
          { Fl_Button* o = clipCapture1 = new Fl_Button(159, 92, 37, 20, "Copy");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipCapture1);
          }
          { Fl_Button* o = clipCapture2 = new Fl_Button(159, 115, 37, 20, "Copy");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipCapture2);
          }
          { Fl_Check_Button* o = clipEnable0 = new Fl_Check_Button(13, 73, 18, 15, "0");
            o->down_box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnable0);
          }
          { Fl_Check_Button* o = clipEnable1 = new Fl_Check_Button(13, 93, 18, 15, "1");
            o->down_box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnable1);
          }
          { Fl_Check_Button* o = clipEnable2 = new Fl_Check_Button(13, 117, 18, 15, "2");
            o->down_box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnable2);
          }
          { Fl_Value_Input* o = clipA0 = new Fl_Value_Input(32, 71, 30, 20);
            o->labelsize(10);
            o->minimum(-3);
            o->maximum(3);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipA0);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipB0 = new Fl_Value_Input(64, 71, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipB0);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipC0 = new Fl_Value_Input(96, 71, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipC0);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipD0 = new Fl_Value_Input(127, 71, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipD0);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipA1 = new Fl_Value_Input(32, 93, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipA1);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipB1 = new Fl_Value_Input(64, 93, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipB1);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipC1 = new Fl_Value_Input(96, 93, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipC1);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipD1 = new Fl_Value_Input(127, 93, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipD1);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipA2 = new Fl_Value_Input(32, 114, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipA2);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipB2 = new Fl_Value_Input(64, 114, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipB2);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipC2 = new Fl_Value_Input(96, 114, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipC2);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipD2 = new Fl_Value_Input(127, 114, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipD2);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Button* o = clipFlip0 = new Fl_Button(196, 71, 33, 20, "Flip");
            o->tooltip("View other side of clip plane");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipFlip0);
          }
          { Fl_Button* o = clipFlip1 = new Fl_Button(196, 92, 33, 20, "Flip");
            o->tooltip("View other side of clip plane");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipFlip1);
          }
          { Fl_Button* o = clipFlip2 = new Fl_Button(196, 115, 33, 20, "Flip");
            o->tooltip("View other side of clip plane");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipFlip2);
          }
          { Fl_Box* o = new Fl_Box(198, 49, 30, 16, "Vis");
            o->labelsize(12);
          }
          { Fl_Box* o = new Fl_Box(8, 49, 30, 16, "On");
            o->labelsize(12);
          }
          { Fl_Button* o = clipCapture3 = new Fl_Button(159, 136, 37, 20, "Copy");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipCapture3);
          }
          { Fl_Button* o = clipCapture4 = new Fl_Button(159, 157, 37, 20, "Copy");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipCapture4);
          }
          { Fl_Button* o = clipCapture5 = new Fl_Button(159, 180, 37, 20, "Copy");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipCapture5);
          }
          { Fl_Check_Button* o = clipEnable3 = new Fl_Check_Button(13, 138, 18, 15, "0");
            o->down_box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnable3);
          }
          { Fl_Check_Button* o = clipEnable4 = new Fl_Check_Button(13, 158, 18, 15, "1");
            o->down_box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnable4);
          }
          { Fl_Check_Button* o = clipEnable5 = new Fl_Check_Button(13, 182, 18, 15, "2");
            o->down_box(FL_DOWN_BOX);
            o->labeltype(FL_NO_LABEL);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnable5);
          }
          { Fl_Value_Input* o = clipA3 = new Fl_Value_Input(32, 136, 30, 20);
            o->labelsize(10);
            o->minimum(-3);
            o->maximum(3);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipA3);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipB3 = new Fl_Value_Input(64, 136, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipB3);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipC3 = new Fl_Value_Input(96, 136, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipC3);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipD3 = new Fl_Value_Input(127, 136, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipD3);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipA4 = new Fl_Value_Input(32, 158, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipA4);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipB4 = new Fl_Value_Input(64, 158, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipB4);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipC4 = new Fl_Value_Input(96, 158, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipC4);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipD4 = new Fl_Value_Input(127, 158, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipD4);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipA5 = new Fl_Value_Input(32, 179, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipA5);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipB5 = new Fl_Value_Input(64, 179, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipB5);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipC5 = new Fl_Value_Input(96, 179, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipC5);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Value_Input* o = clipD5 = new Fl_Value_Input(127, 179, 30, 20);
            o->labelsize(10);
            o->minimum(-5);
            o->maximum(5);
            o->step(0.01);
            o->textsize(10);
            o->callback((Fl_Callback*)cb_clipD5);
            o->align(FL_ALIGN_CENTER);
          }
          { Fl_Button* o = clipFlip3 = new Fl_Button(196, 136, 33, 20, "Flip");
            o->tooltip("View other side of clip plane");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipFlip3);
          }
          { Fl_Button* o = clipFlip4 = new Fl_Button(196, 157, 33, 20, "Flip");
            o->tooltip("View other side of clip plane");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipFlip4);
          }
          { Fl_Button* o = clipFlip5 = new Fl_Button(196, 180, 33, 20, "Flip");
            o->tooltip("View other side of clip plane");
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipFlip5);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(233, 34, 140, 176, "Objects");
          o->box(FL_UP_FRAME);
          o->labelfont(1);
          o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
          { Fl_Box* o = new Fl_Box(234, 49, 45, 17, "Model");
            o->labelsize(12);
          }
          { Fl_Box* o = new Fl_Box(257, 61, 28, 17, "Tile");
            o->selection_color((Fl_Color)4);
            o->labelsize(12);
            o->labelcolor((Fl_Color)4);
          }
          { Fl_Check_Button* o = clipEnableModel0 = new Fl_Check_Button(238, 78, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableModel0);
          }
          { Fl_Check_Button* o = clipEnableModel1 = new Fl_Check_Button(238, 99, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableModel1);
          }
          { Fl_Check_Button* o = clipEnableModel2 = new Fl_Check_Button(238, 119, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableModel2);
          }
          { Fl_Check_Button* o = clipEnableTile0 = new Fl_Check_Button(262, 78, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)4);
            o->labelsize(12);
            o->labelcolor((Fl_Color)4);
            o->callback((Fl_Callback*)cb_clipEnableTile0);
          }
          { Fl_Check_Button* o = clipEnableTile1 = new Fl_Check_Button(262, 99, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)4);
            o->labelsize(12);
            o->labelcolor((Fl_Color)4);
            o->callback((Fl_Callback*)cb_clipEnableTile1);
          }
          { Fl_Check_Button* o = clipEnableTile2 = new Fl_Check_Button(262, 119, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)4);
            o->labelsize(12);
            o->labelcolor((Fl_Color)4);
            o->callback((Fl_Callback*)cb_clipEnableTile2);
          }
          { Fl_Box* o = new Fl_Box(279, 49, 37, 17, "Image");
            o->selection_color((Fl_Color)66);
            o->labelsize(12);
            o->labelcolor((Fl_Color)58);
          }
          { Fl_Check_Button* o = clipEnableImagePlane0 = new Fl_Check_Button(288, 78, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)66);
            o->labelsize(12);
            o->labelcolor((Fl_Color)58);
            o->callback((Fl_Callback*)cb_clipEnableImagePlane0);
          }
          { Fl_Check_Button* o = clipEnableImagePlane1 = new Fl_Check_Button(288, 99, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)66);
            o->labelsize(12);
            o->labelcolor((Fl_Color)58);
            o->callback((Fl_Callback*)cb_clipEnableImagePlane1);
          }
          { Fl_Check_Button* o = clipEnableImagePlane2 = new Fl_Check_Button(288, 119, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)66);
            o->labelsize(12);
            o->labelcolor((Fl_Color)58);
            o->callback((Fl_Callback*)cb_clipEnableImagePlane2);
          }
          { Fl_Box* o = new Fl_Box(309, 61, 34, 18, "Scene");
            o->labelsize(12);
            o->labelcolor((Fl_Color)80);
          }
          { Fl_Check_Button* o = clipEnableScene0 = new Fl_Check_Button(318, 78, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color(FL_RED);
            o->labelsize(12);
            o->labelcolor((Fl_Color)80);
            o->callback((Fl_Callback*)cb_clipEnableScene0);
          }
          { Fl_Check_Button* o = clipEnableScene1 = new Fl_Check_Button(318, 99, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color(FL_RED);
            o->labelsize(12);
            o->labelcolor((Fl_Color)80);
            o->callback((Fl_Callback*)cb_clipEnableScene1);
          }
          { Fl_Check_Button* o = clipEnableScene2 = new Fl_Check_Button(318, 119, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color(FL_RED);
            o->labelsize(12);
            o->labelcolor((Fl_Color)80);
            o->callback((Fl_Callback*)cb_clipEnableScene2);
          }
          { Fl_Box* o = new Fl_Box(339, 49, 34, 18, "View");
            o->selection_color(FL_FOREGROUND_COLOR);
            o->labelsize(12);
          }
          { Fl_Check_Button* o = clipEnableView0 = new Fl_Check_Button(348, 78, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableView0);
          }
          { Fl_Check_Button* o = clipEnableView1 = new Fl_Check_Button(348, 99, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableView1);
          }
          { Fl_Check_Button* o = clipEnableView2 = new Fl_Check_Button(348, 119, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableView2);
          }
          { Fl_Check_Button* o = clipEnableModel3 = new Fl_Check_Button(238, 140, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableModel3);
          }
          { Fl_Check_Button* o = clipEnableModel4 = new Fl_Check_Button(238, 161, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableModel4);
          }
          { Fl_Check_Button* o = clipEnableModel5 = new Fl_Check_Button(238, 181, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableModel5);
          }
          { Fl_Check_Button* o = clipEnableTile3 = new Fl_Check_Button(262, 140, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)4);
            o->labelsize(12);
            o->labelcolor((Fl_Color)4);
            o->callback((Fl_Callback*)cb_clipEnableTile3);
          }
          { Fl_Check_Button* o = clipEnableTile4 = new Fl_Check_Button(262, 161, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)4);
            o->labelsize(12);
            o->labelcolor((Fl_Color)4);
            o->callback((Fl_Callback*)cb_clipEnableTile4);
          }
          { Fl_Check_Button* o = clipEnableTile5 = new Fl_Check_Button(262, 181, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)4);
            o->labelsize(12);
            o->labelcolor((Fl_Color)4);
            o->callback((Fl_Callback*)cb_clipEnableTile5);
          }
          { Fl_Check_Button* o = clipEnableImagePlane3 = new Fl_Check_Button(288, 140, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)66);
            o->labelsize(12);
            o->labelcolor((Fl_Color)58);
            o->callback((Fl_Callback*)cb_clipEnableImagePlane3);
          }
          { Fl_Check_Button* o = clipEnableImagePlane4 = new Fl_Check_Button(288, 161, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)66);
            o->labelsize(12);
            o->labelcolor((Fl_Color)58);
            o->callback((Fl_Callback*)cb_clipEnableImagePlane4);
          }
          { Fl_Check_Button* o = clipEnableImagePlane5 = new Fl_Check_Button(288, 181, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color((Fl_Color)66);
            o->labelsize(12);
            o->labelcolor((Fl_Color)58);
            o->callback((Fl_Callback*)cb_clipEnableImagePlane5);
          }
          { Fl_Check_Button* o = clipEnableScene3 = new Fl_Check_Button(318, 140, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color(FL_RED);
            o->labelsize(12);
            o->labelcolor((Fl_Color)80);
            o->callback((Fl_Callback*)cb_clipEnableScene3);
          }
          { Fl_Check_Button* o = clipEnableScene4 = new Fl_Check_Button(318, 161, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color(FL_RED);
            o->labelsize(12);
            o->labelcolor((Fl_Color)80);
            o->callback((Fl_Callback*)cb_clipEnableScene4);
          }
          { Fl_Check_Button* o = clipEnableScene5 = new Fl_Check_Button(318, 181, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->selection_color(FL_RED);
            o->labelsize(12);
            o->labelcolor((Fl_Color)80);
            o->callback((Fl_Callback*)cb_clipEnableScene5);
          }
          { Fl_Check_Button* o = clipEnableView3 = new Fl_Check_Button(348, 140, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableView3);
          }
          { Fl_Check_Button* o = clipEnableView4 = new Fl_Check_Button(348, 161, 16, 16);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableView4);
          }
          { Fl_Check_Button* o = clipEnableView5 = new Fl_Check_Button(348, 181, 16, 15);
            o->box(FL_EMBOSSED_BOX);
            o->down_box(FL_OFLAT_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_clipEnableView5);
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(272, 217, 100, 20, "Reset View");
      o->box(FL_ROUND_UP_BOX);
      o->labelfont(1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Reset);
    }
    o->end();
  }
  xImagePlanePositionGraph->minimum(0.0f);
  xImagePlanePositionGraph->maximum(1.0f);
  xImagePlanePositionGraph->hide();
  yImagePlanePositionGraph->minimum(0.0f);
  yImagePlanePositionGraph->maximum(1.0f);
  yImagePlanePositionGraph->hide();
  zImagePlanePositionGraph->minimum(0.0f);
  zImagePlanePositionGraph->maximum(1.0f);
  zImagePlanePositionGraph->hide();
  displayControlWindow->position(win_X, win_Y);
  if (open) displayControlWindow->show();
  return w;
}
#ifndef BINARY

movable_Fl_Window* P3DUserInterface::make_AboutPabloWindow(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = aboutPabloWindow = new movable_Fl_Window(250, 249, "About Pablo");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_aboutPabloWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Button* o = aboutPabloHeader = new Fl_Button(20, 5, 210, 90);
      o->box(FL_FLAT_BOX);
      o->labelfont(3);
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
    }
    { Fl_Button* o = aboutPabloAuthors = new Fl_Button(5, 95, 240, 85);
      o->box(FL_FLAT_BOX);
      o->labelsize(11);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
    }
    { Fl_Check_Button* o = aboutPabloDontShowButton = new Fl_Check_Button(230, 220, 15, 25, "Don\'t show this window again");
      o->down_box(FL_EMBOSSED_BOX);
      o->selection_color((Fl_Color)1);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_aboutPabloDontShowButton);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = aboutPabloRelease = new Fl_Button(60, 190, 155, 20);
      o->box(FL_FLAT_BOX);
      o->labelsize(11);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
    }
    { Fl_Button* o = new Fl_Button(10, 190, 45, 20, "Release:");
      o->box(FL_FLAT_BOX);
      o->labelsize(11);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
    }
    { Fl_Button* o = aboutPabloVersion = new Fl_Button(60, 205, 155, 20);
      o->box(FL_FLAT_BOX);
      o->labelsize(11);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
    }
    { Fl_Button* o = new Fl_Button(10, 205, 45, 20, "Version:");
      o->box(FL_FLAT_BOX);
      o->labelsize(11);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
    }
    o->end();
  }
  aboutPabloWindow->position(win_X, win_Y);
    if (open) aboutPabloWindow->show();
  return w;
}
#endif
#ifdef BINARY

movable_Fl_Window* P3DUserInterface::make_AboutBinaryPabloWindow(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = aboutBinaryPabloWindow = new movable_Fl_Window(645, 456, "About Binary Pablo");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_aboutBinaryPabloWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Group* o = aboutBinaryPabloSplashGrp = new Fl_Group(3, 5, 640, 450, "Splash");
      o->box(FL_ENGRAVED_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      { Fl_Button* o = aboutBinaryPabloVersionLabel = new Fl_Button(240, 430, 55, 20, "Version:");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->labelsize(11);
        o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_NEVER);
      }
      { Fl_Button* o = aboutBinaryPabloVersion = new Fl_Button(295, 430, 185, 20, "code base");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->labelsize(11);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_NEVER);
      }
      { Fl_Button* o = aboutBinaryPabloRelease = new Fl_Button(60, 430, 155, 20, "release  string");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->labelsize(11);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_NEVER);
      }
      { Fl_Button* o = aboutBinaryPabloReleaseLabel = new Fl_Button(10, 430, 50, 20, "Release:");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->labelsize(11);
        o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_NEVER);
      }
      o->end();
    }
    { Fl_Check_Button* o = aboutBinaryPabloDontShowButton = new Fl_Check_Button(610, 410, 15, 25, "Don\'t show this window again");
      o->down_box(FL_EMBOSSED_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->selection_color((Fl_Color)1);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_aboutBinaryPabloDontShowButton);
      o->align(FL_ALIGN_LEFT);
    }
    o->end();
  }
  aboutBinaryPabloWindow->position(win_X, win_Y);
    if (open) aboutBinaryPabloWindow->show();
    aboutBinaryPabloVersion->clear_visible_focus();
    aboutBinaryPabloRelease->clear_visible_focus();
  return w;
}
#endif

movable_Fl_Window* P3DUserInterface::make_PreferencesEditor(int win_X, int win_Y, int subwin_X, int subwin_Y) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = preferencesEditorWindow = new movable_Fl_Window(524, 269, "Preferences Editor");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_preferencesEditorWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(395, 235, 90, 30, "Close");
      o->callback((Fl_Callback*)cb_Close);
    }
    { Fl_Tabs* o = prefsEditorTabsGrp = new Fl_Tabs(0, 15, 520, 215);
      { Fl_Group* o = new Fl_Group(5, 40, 495, 185, "Display");
        { Fl_Value_Slider* o = displayPrefsRockingAngle = new Fl_Value_Slider(160, 165, 165, 20, "Rocking angle");
          o->type(5);
          o->labelsize(12);
          o->maximum(359);
          o->step(1);
          o->callback((Fl_Callback*)cb_displayPrefsRockingAngle);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Value_Slider* o = displayPrefsRockingIncrement = new Fl_Value_Slider(160, 195, 155, 20, "Rocking angle increment");
          o->type(5);
          o->labelsize(12);
          o->minimum(0.1);
          o->maximum(5);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_displayPrefsRockingIncrement);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Check_Button* o = displayPrefsRememberPosn = new Fl_Check_Button(295, 50, 25, 25, "Remember window positions");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_displayPrefsRememberPosn);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = displayPrefsRememberPosnText = new Fl_Button(320, 50, 80, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = displayPrefsRememberOpen = new Fl_Check_Button(295, 70, 25, 25, "Remember open windows");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_displayPrefsRememberOpen);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = displayPrefsRememberOpenText = new Fl_Button(320, 70, 80, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Menu_Button* o = new Fl_Menu_Button(25, 100, 165, 25, "Background Color");
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          o->menu(menu_Background);
        }
        { Fl_Box* o = displayPrefsCurrentBkgColor = new Fl_Box(205, 100, 115, 25, "current color");
          o->box(FL_BORDER_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->labelsize(10);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = displayPrefsStandardAxes = new Fl_Check_Button(145, 130, 25, 25, "Show standard axes");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_displayPrefsStandardAxes);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = displayPrefsStandardAxesText = new Fl_Button(170, 130, 80, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Group* o = new Fl_Group(355, 125, 130, 80, "Iconify all windows:");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = displayPrefsIconifyIndepButton = new Fl_Check_Button(365, 130, 100, 25, "Independently");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_displayPrefsIconifyIndepButton);
          }
          { Fl_Check_Button* o = displayPrefsIconifyMainButton = new Fl_Check_Button(365, 155, 110, 25, "By main window");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_displayPrefsIconifyMainButton);
          }
          { Fl_Check_Button* o = displayPrefsIconifyAnyButton = new Fl_Check_Button(365, 180, 105, 25, "By any window");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_displayPrefsIconifyAnyButton);
          }
          setPrefsIconifyBtns(globalControl->readInt(IconifyMode));
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 45, 460, 180, "Atoms");
        o->hide();
        { Fl_Check_Button* o = atomPrefsShowAtomVectors = new Fl_Check_Button(285, 130, 25, 25, "Show spoke vectors");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_atomPrefsShowAtomVectors);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = atomPrefsShowAtomVectorsText = new Fl_Button(310, 130, 50, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = atomPrefsUseFigureColors = new Fl_Check_Button(285, 75, 25, 25, "Color atoms like figures");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_atomPrefsUseFigureColors);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = atomPrefsUseFigureColorsText = new Fl_Button(310, 75, 50, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = atomPrefsAtomVectorsType = new Fl_Check_Button(285, 105, 25, 25, "Atom vectors type");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_atomPrefsAtomVectorsType);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = atomPrefsAtomVectorsTypeText = new Fl_Button(310, 105, 140, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = atomPrefsExtraAtomVectors = new Fl_Check_Button(285, 160, 25, 25, "Show extra atom vectors");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_atomPrefsExtraAtomVectors);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = atomPrefsExtraAtomVectorsText = new Fl_Button(310, 160, 50, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Value_Slider* o = atomPrefsAtomVectorsWidth = new Fl_Value_Slider(290, 195, 120, 20, "Atom vectors line width  ");
          o->type(5);
          o->labelsize(12);
          o->minimum(1);
          o->maximum(10);
          o->step(1);
          o->value(1);
          o->callback((Fl_Callback*)cb_atomPrefsAtomVectorsWidth);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Check_Button* o = atomPrefsShowAtoms = new Fl_Check_Button(285, 50, 25, 25, "Show atoms");
          o->down_box(FL_EMBOSSED_BOX);
          o->value(1);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_atomPrefsShowAtoms);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = atomPrefsShowAtomsText = new Fl_Button(310, 50, 50, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Group* o = new Fl_Group(25, 90, 95, 80, "B vector type:");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = atomPrefsNoBVectorsButton = new Fl_Check_Button(35, 95, 85, 25, "None");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_atomPrefsNoBVectorsButton);
          }
          { Fl_Check_Button* o = atomPrefsCrestBVectorsButton = new Fl_Check_Button(35, 120, 85, 25, "Crest only");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_atomPrefsCrestBVectorsButton);
          }
          { Fl_Check_Button* o = atomPrefsAllBVectorsButton = new Fl_Check_Button(35, 145, 85, 25, "All atoms");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_atomPrefsAllBVectorsButton);
          }
          setPrefsIconifyBtns(globalControl->readInt(IconifyMode));
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(25, 45, 385, 175, "Mesh");
        o->hide();
        { Fl_Check_Button* o = meshPrefsShowMesh = new Fl_Check_Button(215, 105, 25, 25, "Show medial mesh connectors");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_meshPrefsShowMesh);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Check_Button* o = meshPrefsMeshType = new Fl_Check_Button(215, 135, 25, 25, "Medial mesh connectors type");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_meshPrefsMeshType);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = meshPrefsMeshTypeText = new Fl_Button(240, 135, 90, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Button* o = meshPrefsShowMeshText = new Fl_Button(240, 105, 90, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Value_Slider* o = meshPrefsMeshConnectorsWidth = new Fl_Value_Slider(220, 175, 120, 20, "Mesh connectors line width  ");
          o->type(5);
          o->labelsize(12);
          o->minimum(1);
          o->maximum(10);
          o->step(1);
          o->value(1);
          o->callback((Fl_Callback*)cb_meshPrefsMeshConnectorsWidth);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Menu_Button* o = new Fl_Menu_Button(65, 65, 165, 25, "Connectors Color");
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          o->menu(menu_Connectors);
        }
        { Fl_Box* o = meshPrefsCurrentMeshColor = new Fl_Box(245, 65, 120, 25, "current color");
          o->box(FL_BORDER_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->labelsize(10);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 45, 475, 175, "Surface");
        o->hide();
        { Fl_Group* o = new Fl_Group(40, 85, 100, 105, "Surface Type");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = surfacePrefsNoneBtn = new Fl_Check_Button(45, 90, 55, 25, "None");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_surfacePrefsNoneBtn);
          }
          { Fl_Check_Button* o = surfacePrefsPointcloudBtn = new Fl_Check_Button(45, 115, 85, 25, "Point cloud");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_surfacePrefsPointcloudBtn);
          }
          { Fl_Check_Button* o = surfacePrefsWireframeBtn = new Fl_Check_Button(45, 140, 85, 25, "Wire frame");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_surfacePrefsWireframeBtn);
          }
          { Fl_Check_Button* o = surfacePrefsSolidBtn = new Fl_Check_Button(45, 165, 55, 25, "Solid");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_surfacePrefsSolidBtn);
          }
          setPrefsSurfaceTypeBtns(globalControl->readInt(SurfaceStyle));
          o->end();
        }
        { Fl_Group* o = new Fl_Group(175, 85, 100, 105, "Subdivision");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = surfacePrefsLevel_0Btn = new Fl_Check_Button(180, 90, 65, 25, "Level 0");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_surfacePrefsLevel_0Btn);
          }
          { Fl_Check_Button* o = surfacePrefsLevel_1Btn = new Fl_Check_Button(180, 115, 65, 25, "Level 1");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_surfacePrefsLevel_1Btn);
          }
          { Fl_Check_Button* o = surfacePrefsLevel_2Btn = new Fl_Check_Button(180, 140, 65, 25, "Level 2");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_surfacePrefsLevel_2Btn);
          }
          { Fl_Check_Button* o = surfacePrefsLevel_3Btn = new Fl_Check_Button(180, 165, 65, 25, "Level 3");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_surfacePrefsLevel_3Btn);
          }
          setPrefsSurfaceLevelBtns(globalControl->readInt(SurfaceLevel));
          o->end();
        }
        { Fl_Value_Slider* o = surfacePrefsLineWidth = new Fl_Value_Slider(320, 170, 120, 20, " Line/dot width  ");
          o->type(5);
          o->labelsize(12);
          o->minimum(1);
          o->maximum(10);
          o->step(1);
          o->value(1);
          o->callback((Fl_Callback*)cb_surfacePrefsLineWidth);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Input* o = surfacePrefsSmoothness = new Fl_Value_Input(395, 120, 30, 25, "Smoothness: ");
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_surfacePrefsSmoothness);
        }
        { Fl_Check_Button* o = surfacePrefsUseTwoLights = new Fl_Check_Button(395, 85, 25, 25, "Use two lights");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_surfacePrefsUseTwoLights);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = surfacePrefsUseTwoLightsText = new Fl_Button(420, 85, 45, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = prefsEditorImageTab = new Fl_Group(5, 45, 490, 180, "Image");
        o->hide();
        { Fl_Check_Button* o = imagePrefsSmoothImages = new Fl_Check_Button(170, 95, 25, 25, "Smooth images");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_imagePrefsSmoothImages);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = imagePrefsSmoothImagesText = new Fl_Button(195, 95, 50, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Button* o = imagePrefsCutPlaneBoundaryText = new Fl_Button(195, 125, 45, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = imagePrefsCutPlaneBoundary = new Fl_Check_Button(170, 125, 25, 25, "Draw cut plane boundary");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_imagePrefsCutPlaneBoundary);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Value_Slider* o = imagePrefsCutPlaneBdryWidth = new Fl_Value_Slider(170, 155, 165, 20, "Cut plane boundary width");
          o->type(5);
          o->labelsize(12);
          o->minimum(1);
          o->maximum(6);
          o->step(1);
          o->value(1);
          o->callback((Fl_Callback*)cb_imagePrefsCutPlaneBdryWidth);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Check_Button* o = imagePrefsXSliceDefault = new Fl_Check_Button(470, 95, 25, 25, "Show sagittal slice");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_imagePrefsXSliceDefault);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Check_Button* o = imagePrefsYSliceDefault = new Fl_Check_Button(470, 75, 25, 25, "Show coronal slice");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_imagePrefsYSliceDefault);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Check_Button* o = imagePrefsZSliceDefault = new Fl_Check_Button(470, 55, 25, 25, "Show axial slice");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_imagePrefsZSliceDefault);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = imagePrefsCutPlaneMode = new Fl_Button(25, 180, 25, 25, "2");
          o->callback((Fl_Callback*)cb_imagePrefsCutPlaneMode);
        }
        { Fl_Button* o = imagePrefsCutPlaneModeText = new Fl_Button(55, 180, 250, 25, "Show both cut plane views");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = imagePrefsRangeDisplayed = new Fl_Check_Button(170, 55, 25, 25, "Intensity range displayed");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_imagePrefsRangeDisplayed);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = imagePrefsRangeDisplayedText = new Fl_Button(195, 55, 90, 25, "percent");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = imagePrefsCoordsDisplayed = new Fl_Check_Button(170, 75, 25, 25, "Coordinates displayed");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_imagePrefsCoordsDisplayed);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = imagePrefsCoordsDisplayedText = new Fl_Button(195, 75, 50, 25, "world");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Check_Button* o = imagePrefsDrawBoundary = new Fl_Check_Button(470, 120, 25, 25, "Draw boundary on image");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_imagePrefsDrawBoundary);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = new Fl_Button(345, 195, 140, 25, "Image File Properties");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Image);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(20, 45, 485, 180, "Tiles");
        o->hide();
        { Fl_Menu_Button* o = new Fl_Menu_Button(65, 65, 165, 25, "Tiles Color");
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          o->menu(menu_Tiles);
        }
        { Fl_Box* o = tilePrefsCurrentTilesColor = new Fl_Box(245, 65, 120, 25, "current color");
          o->box(FL_BORDER_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->labelsize(10);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Group* o = tilePrefsBYUOutput = new Fl_Group(65, 140, 215, 55, "Type of BYU output:");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Group* o = BYUTileGrp = new Fl_Group(180, 145, 90, 45);
            { Fl_Check_Button* o = otherPrefsBYUTrianglesButton = new Fl_Check_Button(180, 145, 75, 25, "Triangles");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_otherPrefsBYUTrianglesButton);
            }
            { Fl_Check_Button* o = otherPrefsBYUQuadsButton = new Fl_Check_Button(180, 165, 90, 25, "Quadrangles");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_otherPrefsBYUQuadsButton);
            }
            o->end();
          }
          { Fl_Group* o = BYUCoordsGrp = new Fl_Group(70, 145, 105, 45);
            { Fl_Check_Button* o = otherPrefsBYUModelCoordButton = new Fl_Check_Button(155, 145, 15, 25, "Model coords.");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_otherPrefsBYUModelCoordButton);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Check_Button* o = otherPrefsBYUWorldCoordButton = new Fl_Check_Button(155, 165, 15, 25, "World coords.");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_otherPrefsBYUWorldCoordButton);
              o->align(FL_ALIGN_LEFT);
            }
            o->end();
          }
          setPrefsBYUOutputBtns(globalControl->readInt(BYUOutputType));
          setPrefsBYUOutputBtns(2 + globalControl->readInt(BYUOutputCoords));
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = prefsEditorConstraintsTab = new Fl_Group(15, 45, 475, 180, "Constraints");
        o->hide();
        { Fl_Check_Button* o = constraintPrefsShowConstraints = new Fl_Check_Button(140, 195, 25, 30, "Show constraints");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_constraintPrefsShowConstraints);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = constraintPrefsShowConstraintsText = new Fl_Button(165, 195, 135, 30, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Group* o = new Fl_Group(30, 80, 100, 105, "Surface Type");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = constraintPrefsNoneBtn = new Fl_Check_Button(35, 85, 55, 25, "None");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsNoneBtn);
          }
          { Fl_Check_Button* o = constraintPrefsPointcloudBtn = new Fl_Check_Button(35, 110, 85, 25, "Point cloud");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsPointcloudBtn);
          }
          { Fl_Check_Button* o = constraintPrefsWireframeBtn = new Fl_Check_Button(35, 135, 85, 25, "Wire frame");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsWireframeBtn);
          }
          { Fl_Check_Button* o = constraintPrefsSolidBtn = new Fl_Check_Button(35, 160, 55, 25, "Solid");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsSolidBtn);
          }
          setPrefsPartialSurfaceTypeBtns(globalControl->readInt(PartialSurfaceStyle));
          o->end();
        }
        { Fl_Group* o = new Fl_Group(160, 80, 105, 105, "Subdivision");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = constraintPrefsLevel_0Btn = new Fl_Check_Button(165, 85, 65, 25, "Level 0");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsLevel_0Btn);
          }
          { Fl_Check_Button* o = constraintPrefsLevel_1Btn = new Fl_Check_Button(165, 110, 65, 25, "Level 1");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsLevel_1Btn);
          }
          { Fl_Check_Button* o = constraintPrefsLevel_2Btn = new Fl_Check_Button(165, 135, 65, 25, "Level 2");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsLevel_2Btn);
          }
          { Fl_Check_Button* o = constraintPrefsLevel_3Btn = new Fl_Check_Button(165, 160, 65, 25, "Level 3");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsLevel_3Btn);
          }
          setPrefsPartialSurfaceLevelBtns(globalControl->readInt(PartialSurfaceLevel));
          o->end();
        }
        { Fl_Group* o = new Fl_Group(300, 160, 170, 25, "Render Selected Figures");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = constraintPrefsPartiallyBtn = new Fl_Check_Button(315, 165, 70, 20, "Partially");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->value(1);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsPartiallyBtn);
          }
          { Fl_Check_Button* o = constraintPrefsFullyBtn = new Fl_Check_Button(405, 165, 50, 20, "Fully");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_constraintPrefsFullyBtn);
          }
          o->end();
        }
        { Fl_Menu_Button* o = new Fl_Menu_Button(300, 100, 170, 25, "Partial Surface Color");
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          o->menu(menu_Partial);
        }
        { Fl_Box* o = constraintPrefsPartialSurfaceColor = new Fl_Box(330, 65, 115, 25, "current color");
          o->box(FL_BORDER_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->labelsize(10);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 45, 465, 180, "Landmarks");
        o->hide();
        { Fl_Check_Button* o = landmarkPrefsShowLandmarks = new Fl_Check_Button(205, 125, 25, 25, "Show landmarks");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_landmarkPrefsShowLandmarks);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = landmarkPrefsShowLandmarksText = new Fl_Button(230, 125, 135, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Value_Slider* o = landmarkPrefsNarrowWidth = new Fl_Value_Slider(230, 160, 120, 20, "Unmarked landmark line width  ");
          o->type(5);
          o->labelsize(12);
          o->minimum(1);
          o->maximum(10);
          o->step(1);
          o->value(1);
          o->callback((Fl_Callback*)cb_landmarkPrefsNarrowWidth);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Value_Slider* o = landmarkPrefsWideWidth = new Fl_Value_Slider(230, 195, 120, 20, "Marked landmark line width  ");
          o->type(5);
          o->labelsize(12);
          o->minimum(1);
          o->maximum(10);
          o->step(1);
          o->value(1);
          o->callback((Fl_Callback*)cb_landmarkPrefsWideWidth);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Menu_Button* o = new Fl_Menu_Button(50, 60, 165, 25, "Landmarks Color");
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          o->menu(menu_Landmarks);
        }
        { Fl_Box* o = landmarkPrefsLandmarksColor = new Fl_Box(230, 60, 115, 25, "current color");
          o->box(FL_BORDER_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->labelsize(10);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Box* o = new Fl_Box(230, 85, 185, 15, "(Used on image planes and when the");
          o->box(FL_FLAT_BOX);
          o->labelsize(10);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Box* o = new Fl_Box(230, 100, 245, 15, "surface is drawn with points or lines)");
          o->box(FL_FLAT_BOX);
          o->labelsize(10);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 45, 495, 180, "Other");
        o->hide();
        { Fl_Value_Input* o = otherPrefsUndoLength = new Fl_Value_Input(420, 145, 40, 25, "Length of undo list:");
          o->labelsize(12);
          o->maximum(1000);
          o->value(250);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_otherPrefsUndoLength);
        }
        { Fl_Check_Button* o = otherPrefsLeftHandedButton = new Fl_Check_Button(155, 155, 25, 25, "Left-handed mouse");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_otherPrefsLeftHandedButton);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = otherPrefsLeftHandedText = new Fl_Button(180, 155, 45, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Output* o = otherPrefsLeftComment = new Fl_Output(40, 175, 340, 20, "output:");
          o->box(FL_FLAT_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NO_LABEL);
          o->labelsize(12);
          o->textsize(12);
        }
        { Fl_Check_Button* o = otherPrefsAboutPabloButton = new Fl_Check_Button(385, 195, 25, 25, "Show \"About Pablo\" window at startup");
          o->down_box(FL_EMBOSSED_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_otherPrefsAboutPabloButton);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = otherPrefsAboutPabloText = new Fl_Button(410, 195, 55, 25, "yes/no");
          o->box(FL_FLAT_BOX);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Group* o = new Fl_Group(30, 120, 240, 25, "Reorder multi-figural models when saving:");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = otherPrefsReorderAlwaysButton = new Fl_Check_Button(45, 120, 60, 25, "Always");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_otherPrefsReorderAlwaysButton);
          }
          { Fl_Check_Button* o = otherPrefsReorderNeverButton = new Fl_Check_Button(120, 120, 55, 25, "Never");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_otherPrefsReorderNeverButton);
          }
          { Fl_Check_Button* o = otherPrefsReorderPromptButton = new Fl_Check_Button(190, 120, 65, 25, "Prompt");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_otherPrefsReorderPromptButton);
          }
          setPrefsReorderBtns(globalControl->readInt(ReorderModels));
          o->end();
        }
        { Fl_Group* o = simTransOutput = new Fl_Group(285, 80, 215, 55, "Similarity transformation output:");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Group* o = simTransGrp = new Fl_Group(395, 85, 95, 45);
            { Fl_Check_Button* o = otherPrefsSimTransVectorsButton = new Fl_Check_Button(395, 85, 95, 25, "Three vectors");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_otherPrefsSimTransVectorsButton);
            }
            { Fl_Check_Button* o = otherPrefsSimTransMatrixButton = new Fl_Check_Button(395, 105, 90, 25, "Matrix form");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_otherPrefsSimTransMatrixButton);
            }
            o->end();
          }
          { Fl_Group* o = simTransFilesGrp = new Fl_Group(290, 85, 105, 45);
            { Fl_Check_Button* o = otherPrefsSimTransModelButton = new Fl_Check_Button(370, 85, 15, 25, "In model file.");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_otherPrefsSimTransModelButton);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Check_Button* o = otherPrefsSimTransSeparateButton = new Fl_Check_Button(370, 105, 15, 25, "Separate file.");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_otherPrefsSimTransSeparateButton);
              o->align(FL_ALIGN_LEFT);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(30, 70, 240, 25, "Amount of printed output:");
          o->box(FL_ENGRAVED_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Button* o = otherPrefsQuietVerbosityButton = new Fl_Check_Button(45, 70, 55, 25, "Quiet");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_otherPrefsQuietVerbosityButton);
          }
          { Fl_Check_Button* o = otherPrefsNormalVerbosityButton = new Fl_Check_Button(115, 70, 65, 25, "Normal");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_otherPrefsNormalVerbosityButton);
          }
          { Fl_Check_Button* o = otherPrefsLoudVerbosityButton = new Fl_Check_Button(190, 70, 70, 25, "Verbose");
            o->type(102);
            o->down_box(FL_ROUND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_otherPrefsLoudVerbosityButton);
          }
          setPrefsVerbosityBtns(globalControl->readInt(OutputVerbosity));
          o->end();
        }
        o->end();
      }
      o->end();
    }
    o->end();
  }
  preferencesEditorWindow->position(win_X, win_Y);
  { movable_Fl_Window* o = prefsImageFilesWindow = new movable_Fl_Window(424, 186, "Image3D File Format");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->user_data((void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(10, 25, 100, 110, "Byte order");
      o->box(FL_EMBOSSED_FRAME);
      o->labelfont(1);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Check_Button* o = imagePrefsReverseOrder = new Fl_Check_Button(35, 30, 70, 25, "Reverse");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_imagePrefsReverseOrder);
      }
      { Fl_Check_Button* o = imagePrefsNativeOrder = new Fl_Check_Button(35, 55, 65, 25, "Native");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_imagePrefsNativeOrder);
      }
      { Fl_Check_Button* o = imagePrefsNormalOrder = new Fl_Check_Button(35, 80, 70, 25, "Normal");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_imagePrefsNormalOrder);
      }
      { Fl_Check_Button* o = imagePrefsRetainOrder = new Fl_Check_Button(35, 105, 65, 25, "Retain");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_imagePrefsRetainOrder);
      }
      { Fl_Button* o = byteOrder_Caret0 = new Fl_Button(15, 35, 25, 15, "@>");
        o->box(FL_FLAT_BOX);
        o->down_box(FL_FLAT_BOX);
        o->labelsize(10);
        o->labelcolor((Fl_Color)3);
      }
      { Fl_Button* o = byteOrder_Caret1 = new Fl_Button(15, 85, 25, 15, "@>");
        o->box(FL_FLAT_BOX);
        o->down_box(FL_FLAT_BOX);
        o->labelsize(10);
        o->labelcolor((Fl_Color)3);
      }
      setPrefsByteOrderBtns(globalControl->readInt(ByteOrder));
      o->end();
    }
    { Fl_Check_Button* o = imagePrefsScaleInput = new Fl_Check_Button(170, 145, 25, 25, "Scale input images");
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_imagePrefsScaleInput);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = imagePrefsScaleInputText = new Fl_Button(194, 145, 50, 25, "yes/no");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Check_Button* o = imagePrefsCompressImages = new Fl_Check_Button(340, 85, 25, 25, "Compress image files");
      o->down_box(FL_EMBOSSED_BOX);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_imagePrefsCompressImages);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = imagePrefsCompressImagesText = new Fl_Button(365, 85, 50, 25, "yes/no");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Check_Button* o = imagePrefsConvertImages = new Fl_Check_Button(340, 105, 25, 25, ") old image files");
      o->down_box(FL_EMBOSSED_BOX);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_imagePrefsConvertImages);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = imagePrefsConvertImagesText = new Fl_Button(365, 105, 50, 25, "yes/no");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = imagePrefsConvertImagesType = new Fl_Button(125, 105, 130, 25, "Uncompress");
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
    }
    { Fl_Return_Button* o = new Fl_Return_Button(320, 150, 90, 30, "Close");
      o->callback((Fl_Callback*)cb_Close1);
    }
    { Fl_Check_Button* o = imagePrefsConvertFormat = new Fl_Check_Button(340, 50, 25, 25, "Convert image files to above format");
      o->down_box(FL_EMBOSSED_BOX);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_imagePrefsConvertFormat);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = imagePrefsConvertFormatText = new Fl_Button(365, 50, 65, 25, "yes/no");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Counter* o = imagePrefsImageFormat = new Fl_Counter(345, 30, 60, 20, "Image3D File Format  ");
      o->type(1);
      o->labelsize(12);
      o->minimum(0);
      o->maximum(1);
      o->step(1);
      o->callback((Fl_Callback*)cb_imagePrefsImageFormat);
      o->align(FL_ALIGN_LEFT);
    }
    o->end();
  }
  prefsImageFilesWindow->position(subwin_X, subwin_Y);
  return w;
}

Fl_Double_Window* P3DUserInterface::make_ReorderPopup() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = reorderPopupWindow = new Fl_Double_Window(396, 160);
    w = o;
    o->callback((Fl_Callback*)cb_reorderPopupWindow, (void*)(this));
    { Fl_Box* o = new Fl_Box(25, 15, 50, 45, "?");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)23);
      o->labelfont(1);
      o->labelsize(28);
      o->labelcolor((Fl_Color)4);
    }
    { Fl_Box* o = new Fl_Box(85, 15, 270, 30, "This model needs reordering ...");
      o->labelsize(20);
    }
    { Fl_Box* o = new Fl_Box(85, 45, 270, 20, "Renumbering the figures will result in reordering to put");
      o->labelsize(11);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(85, 60, 270, 20, "subfigures after their parents on the visibility window.");
      o->labelsize(11);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Group* o = new Fl_Group(5, 90, 380, 35);
      { Fl_Return_Button* o = new Fl_Return_Button(20, 95, 135, 25, "Reorder figures");
        o->callback((Fl_Callback*)cb_Reorder1);
      }
      { Fl_Return_Button* o = new Fl_Return_Button(175, 95, 100, 25, "Save as is");
        o->callback((Fl_Callback*)cb_Save4);
      }
      { Fl_Return_Button* o = new Fl_Return_Button(295, 95, 80, 25, "Cancel");
        o->callback((Fl_Callback*)cb_Cancel);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(20, 130, 345, 25);
      { Fl_Check_Button* o = reorderAutomaticButton = new Fl_Check_Button(30, 130, 15, 25, "In the future, reorder automatically");
        o->type(102);
        o->down_box(FL_EMBOSSED_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_reorderAutomaticButton);
        o->align(FL_ALIGN_RIGHT);
      }
      { Fl_Check_Button* o = reorderNeverButton = new Fl_Check_Button(220, 130, 15, 25, "In the future, never reorder");
        o->type(102);
        o->down_box(FL_EMBOSSED_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_reorderNeverButton);
        o->align(FL_ALIGN_RIGHT);
      }
      o->end();
    }
    o->set_modal();
    o->end();
  }
  return w;
}

movable_Fl_Window* P3DUserInterface::make_addQuadFigureDlg(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = addQuadFigureDlg = new movable_Fl_Window(260, 164, "Add Quad Figure");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_addQuadFigureDlg, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Value_Input* o = addQuadFigureRowInput = new Fl_Value_Input(55, 15, 30, 25, "Rows:");
      o->value(4);
    }
    { Fl_Value_Input* o = addQuadFigureColumnInput = new Fl_Value_Input(175, 15, 30, 25, "Columns:");
      o->value(4);
    }
    { Fl_Return_Button* o = addQuadFigureBtn = new Fl_Return_Button(165, 125, 80, 25, "Add");
      o->shortcut(0xff0d);
      o->callback((Fl_Callback*)cb_addQuadFigureBtn);
    }
    { Fl_Input* o = addQuadFigureNameInput = new Fl_Input(55, 50, 190, 25, "Name:");
      o->textsize(12);
    }
    { Fl_Menu_Button* o = addQuadFigureColorBtn = new Fl_Menu_Button(15, 85, 75, 25, "Color");
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->menu(menu_addQuadFigureColorBtn);
    }
    { Fl_Box* o = addQuadFigureCurrentColor = new Fl_Box(100, 85, 115, 25, "current color");
      o->box(FL_BORDER_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(10);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  addQuadFigureDlg->position(win_X, win_Y);
  callback->initializeAddQuadDlg();
  if (open) addQuadFigureDlg->show();
  return w;
}

movable_Fl_Window* P3DUserInterface::make_VisibilityControl(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = visibilityControlWindow = new movable_Fl_Window(203, 393, "Visibility Control");
    w = o;
    o->box(FL_UP_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(12);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_visibilityControlWindow, (void*)(this));
    o->align(FL_ALIGN_CENTER);
    o->when(FL_WHEN_RELEASE);
    { Fl_Button* o = visibilityAllOn = new Fl_Button(15, 140, 90, 25, "All Figures On");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_visibilityAllOn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = visibilityAllOff = new Fl_Button(15, 175, 90, 25, "All Figures Off");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_visibilityAllOff);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Round_Button* o = atomVectorsVisible = new Fl_Round_Button(25, 5, 25, 25, "Atom vectors");
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_atomVectorsVisible);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = meshConnectorsVisible = new Fl_Round_Button(25, 30, 25, 25, "Mesh connectors");
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_meshConnectorsVisible);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = atomsVisible = new Fl_Round_Button(25, 55, 25, 25, "Show atoms");
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_atomsVisible);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = Figure0 = new Fl_Round_Button(40, 210, 25, 25);
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Figure0);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = Figure1 = new Fl_Round_Button(40, 235, 25, 25);
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Figure1);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = Figure2 = new Fl_Round_Button(40, 260, 25, 25);
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Figure2);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = Figure3 = new Fl_Round_Button(40, 285, 25, 25);
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Figure3);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = Figure4 = new Fl_Round_Button(40, 310, 25, 25);
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Figure4);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = Figure5 = new Fl_Round_Button(40, 335, 25, 25);
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Figure5);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = Figure6 = new Fl_Round_Button(40, 360, 25, 25);
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Figure6);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Box* o = figureNumber0 = new Fl_Box(20, 210, 25, 25, "0");
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = figureNumber1 = new Fl_Box(20, 235, 25, 25, "1");
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = figureNumber2 = new Fl_Box(20, 260, 25, 25, "2");
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = figureNumber3 = new Fl_Box(20, 285, 25, 25, "3");
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = figureNumber4 = new Fl_Box(20, 310, 25, 25, "4");
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = figureNumber5 = new Fl_Box(20, 335, 25, 25, "5");
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = figureNumber6 = new Fl_Box(20, 360, 25, 25, "6");
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = visibilityAllInvert = new Fl_Button(115, 150, 45, 35, "Invert");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_visibilityAllInvert);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Round_Button* o = constraintsVisible = new Fl_Round_Button(25, 80, 25, 25, "Show constraints");
      o->down_box(FL_EMBOSSED_BOX);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_constraintsVisible);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Round_Button* o = landmarksVisible = new Fl_Round_Button(25, 105, 25, 25, "Show landmarks");
      o->down_box(FL_EMBOSSED_BOX);
      o->value(1);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_landmarksVisible);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Roller* o = visibilityFigureRoller = new Fl_Roller(10, 255, 15, 85);
      o->box(FL_THIN_UP_FRAME);
      o->maximum(7);
      o->step(1);
      o->callback((Fl_Callback*)cb_visibilityFigureRoller);
    }
    o->end();
    o->resizable(o);
  }
  visibilityControlWindow->position(win_X, win_Y);
  visibilityFigureRoller->hide();
  if (open) {
      visibilityControlWindow->show();
      visibilityWindowCheckBox->value(1);
  }
  else {
      visibilityWindowCheckBox->value(0);
  }
  return w;
}

movable_Fl_Window* P3DUserInterface::make_ConstraintsWindow(int win_X, int win_Y) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = constraintsWindow = new movable_Fl_Window(463, 413, "Constraints");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_constraintsWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(0, 5, 460, 405, "Interfigural Constraints");
      o->labelfont(1);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Slider* o = interObjectDistanceSlider = new Fl_Slider(200, 320, 235, 20);
        o->type(5);
        o->labelsize(12);
        o->maximum(10);
        o->value(0.5);
        o->callback((Fl_Callback*)cb_interObjectDistanceSlider);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Output* o = interObjectDistanceValue = new Fl_Value_Output(145, 320, 55, 20, "Inter-object distance");
        o->labelsize(12);
        o->maximum(10);
        o->step(1e-006);
        o->value(0.5);
        o->textsize(10);
      }
      { Fl_Button* o = contraintsDoneBtn = new Fl_Button(375, 370, 75, 30, "Done");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_contraintsDoneBtn);
      }
      { Fl_Box* o = new Fl_Box(210, 340, 25, 25, "Minimum");
        o->labelsize(10);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      }
      { Fl_Box* o = new Fl_Box(400, 340, 25, 25, "Maximum");
        o->labelsize(10);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = viewPartialSurfaces = new Fl_Button(260, 105, 100, 30, "Set Governor");
        o->callback((Fl_Callback*)cb_viewPartialSurfaces);
      }
      { Fl_Group* o = new Fl_Group(95, 65, 80, 55, "Render selected figures");
        o->box(FL_ENGRAVED_BOX);
        o->labelfont(1);
        o->labelsize(12);
        o->align(FL_ALIGN_TOP_RIGHT);
        { Fl_Check_Button* o = renderFullyBtn = new Fl_Check_Button(100, 95, 50, 25, "Fully");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_renderFullyBtn);
        }
        { Fl_Check_Button* o = renderPartiallyBtn = new Fl_Check_Button(100, 65, 70, 25, "Partially");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_renderPartiallyBtn);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(35, 145, 100, 100, "Surface Type");
        o->box(FL_ENGRAVED_BOX);
        o->labelfont(1);
        o->labelsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Check_Button* o = partialNoneBtn = new Fl_Check_Button(40, 145, 55, 25, "None");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_partialNoneBtn);
        }
        { Fl_Check_Button* o = partialPointcloudBtn = new Fl_Check_Button(40, 170, 85, 25, "Point cloud");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_partialPointcloudBtn);
        }
        { Fl_Check_Button* o = partialWireframeBtn = new Fl_Check_Button(40, 195, 85, 25, "Wire frame");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_partialWireframeBtn);
        }
        { Fl_Check_Button* o = partialSolidBtn = new Fl_Check_Button(40, 220, 55, 25, "Solid");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_partialSolidBtn);
        }
        setPartialSurfaceTypeBtns(modelView->getPartialSurfaceStyle());
        o->end();
      }
      { Fl_Group* o = new Fl_Group(150, 145, 95, 100, "Subdivision");
        o->box(FL_ENGRAVED_BOX);
        o->labelfont(1);
        o->labelsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Check_Button* o = PartialSurfaceLevel_0Btn = new Fl_Check_Button(155, 145, 65, 25, "Level 0");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_PartialSurfaceLevel_0Btn);
        }
        { Fl_Check_Button* o = PartialSurfaceLevel_1Btn = new Fl_Check_Button(155, 170, 65, 25, "Level 1");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_PartialSurfaceLevel_1Btn);
        }
        { Fl_Check_Button* o = PartialSurfaceLevel_2Btn = new Fl_Check_Button(155, 195, 65, 25, "Level 2");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_PartialSurfaceLevel_2Btn);
        }
        { Fl_Check_Button* o = PartialSurfaceLevel_3Btn = new Fl_Check_Button(155, 220, 65, 25, "Level 3");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_PartialSurfaceLevel_3Btn);
        }
        setPartialSurfaceLevelBtns(modelView->getPartialSurfaceLevel());
        o->end();
      }
      { Fl_Button* o = fullClear = new Fl_Button(355, 55, 75, 30, "Clear All");
        o->callback((Fl_Callback*)cb_fullClear);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = partialClear = new Fl_Button(260, 180, 60, 30, "Clear");
        o->callback((Fl_Callback*)cb_partialClear);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Value_Output* o = constraintCount = new Fl_Value_Output(420, 215, 25, 25, "Number of constraints:");
        o->box(FL_FLAT_BOX);
      }
      { Fl_Value_Slider* o = constraintsFigureSlider = new Fl_Value_Slider(135, 265, 200, 20, "Figure number");
        o->type(5);
        o->labelsize(12);
        o->minimum(-1);
        o->maximum(10);
        o->step(1);
        o->callback((Fl_Callback*)cb_constraintsFigureSlider);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Output* o = constraintsFigureSliderText = new Fl_Output(135, 285, 200, 20, "Figure name:");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labelsize(12);
      }
      { Fl_Button* o = SetFigureNumber = new Fl_Button(350, 260, 45, 40, "Set");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_SetFigureNumber);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Value_Output* o = Governor = new Fl_Value_Output(390, 140, 25, 25, "Current governor:");
        o->box(FL_FLAT_BOX);
      }
      o->end();
    }
    o->end();
  }
  constraintsWindow->position(win_X, win_Y);
  return w;
}

movable_Fl_Window* P3DUserInterface::make_PrimitiveEditor(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = primitiveEditorWindow = new movable_Fl_Window(255, 133, "Atom Editor");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_primitiveEditorWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Value_Slider* o = atomEditorThetaSlider = new Fl_Value_Slider(10, 75, 235, 15, "Object angle");
      o->type(5);
      o->labelsize(12);
      o->maximum(90);
      o->step(0.1);
      o->callback((Fl_Callback*)cb_atomEditorThetaSlider);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Slider* o = atomEditorElongationSlider = new Fl_Value_Slider(10, 110, 235, 15, "Elongation");
      o->type(5);
      o->labelsize(12);
      o->minimum(0.1);
      o->maximum(5);
      o->value(1);
      o->callback((Fl_Callback*)cb_atomEditorElongationSlider);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Button* o = atomEditor1stMessageBtn = new Fl_Button(10, 15, 235, 15, "Mark (ctrl-right click) any atom");
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = atomEditor2ndMessageBtn = new Fl_Button(10, 30, 235, 15, "and then adjust the sliders.");
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Group* o = atomEditorOutputGrp = new Fl_Group(10, 10, 235, 50);
      o->box(FL_FLAT_BOX);
      o->labeltype(FL_NO_LABEL);
      o->align(FL_ALIGN_CENTER);
      o->hide();
      { Fl_Value_Output* o = atomEditorFigureOutput = new Fl_Value_Output(65, 15, 35, 20, "Figure: ");
        o->box(FL_FLAT_BOX);
        o->textsize(12);
      }
      { Fl_Value_Output* o = atomEditorAtomIdOutput = new Fl_Value_Output(65, 35, 35, 20, "Atom: ");
        o->box(FL_FLAT_BOX);
        o->textsize(12);
      }
      { Fl_Output* o = atomEditorUVOutput = new Fl_Output(195, 35, 45, 20, "Figural (u, v): ");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->textsize(12);
      }
      o->end();
    }
    o->end();
  }
  primitiveEditorWindow->position(win_X, win_Y);
  if (open) primitiveEditorWindow->show();
  return w;
}

movable_Fl_Window* P3DUserInterface::make_CutPlaneControl(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = cutPlanesControlWindow = new movable_Fl_Window(282, 112, "Cut Planes Control");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_cutPlanesControlWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Check_Button* o = cutPlaneBtn0 = new Fl_Check_Button(45, 15, 20, 25, "Atom");
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_cutPlaneBtn0);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Check_Button* o = cutPlaneBtn1 = new Fl_Check_Button(45, 45, 20, 25, "Crest");
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_cutPlaneBtn1);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Check_Button* o = cutPlaneBtn2 = new Fl_Check_Button(45, 75, 20, 25, "Cross-figure");
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_cutPlaneBtn2);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Check_Button* o = cutPlaneBtn3 = new Fl_Check_Button(185, 15, 20, 25, "Starboard spoke");
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_cutPlaneBtn3);
      o->align(136);
    }
    { Fl_Check_Button* o = cutPlaneBtn4 = new Fl_Check_Button(185, 45, 20, 25, "Port spoke");
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_cutPlaneBtn4);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Check_Button* o = cutPlaneBtn5 = new Fl_Check_Button(185, 75, 20, 25, "Involutes");
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_cutPlaneBtn5);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Button* o = cutPlaneAtomModeBtn = new Fl_Button(15, 18, 20, 20, "2");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_cutPlaneAtomModeBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = cutPlaneCrestModeBtn = new Fl_Button(15, 48, 20, 20, "2");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_cutPlaneCrestModeBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = cutPlaneBPerpNModeBtn = new Fl_Button(15, 76, 20, 20, "2");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_cutPlaneBPerpNModeBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = cutPlaneStarboardModeBtn = new Fl_Button(155, 18, 20, 20, "2");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_cutPlaneStarboardModeBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = cutPlanePortModeBtn = new Fl_Button(155, 48, 20, 20, "2");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_cutPlanePortModeBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = cutPlaneInvolutesModeBtn = new Fl_Button(155, 78, 20, 20, "2");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_cutPlaneInvolutesModeBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  cutPlanesControlWindow->position(win_X, win_Y);
  callback->initCutPlanesMode();
  if (open) {
      cutPlanesControlWindow->show();
      cutPlaneWindowCheckBox->value(0);
  }
  return w;
}

movable_Fl_Window* P3DUserInterface::make_CutPlaneWindows(int windowPropsPosn[WIN_PROPS_LEN][2]) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = bNCutPlaneWindow = new movable_Fl_Window(266, 266, "Atom Cut Plane");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_bNCutPlaneWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { P3DCutPlaneView* o = bNCutPlaneView = new P3DCutPlaneView(5, 5, 256, 256);
      o->box(FL_FLAT_BOX);
      o->color(FL_GRAY0);
      o->selection_color(FL_GRAY0);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
  }
  { movable_Fl_Window* o = bBPerpCutPlaneWindow = new movable_Fl_Window(266, 266, "Crest Cut Plane");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_bBPerpCutPlaneWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { P3DCutPlaneView* o = bBPerpCutPlaneView = new P3DCutPlaneView(5, 5, 256, 256);
      o->box(FL_FLAT_BOX);
      o->color(FL_GRAY0);
      o->selection_color(FL_GRAY0);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
  }
  { movable_Fl_Window* o = bPerpNCutPlaneWindow = new movable_Fl_Window(266, 266, "BPerp-N Cut Plane");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_bPerpNCutPlaneWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { P3DCutPlaneView* o = bPerpNCutPlaneView = new P3DCutPlaneView(5, 5, 256, 256);
      o->box(FL_FLAT_BOX);
      o->color(FL_GRAY0);
      o->selection_color(FL_GRAY0);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
  }
  { movable_Fl_Window* o = bPerpY0CutPlaneWindow = new movable_Fl_Window(266, 266, "Starboard Cut Plane");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_bPerpY0CutPlaneWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { P3DCutPlaneView* o = bPerpY0CutPlaneView = new P3DCutPlaneView(5, 5, 256, 256);
      o->box(FL_FLAT_BOX);
      o->color(FL_GRAY0);
      o->selection_color(FL_GRAY0);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
  }
  { movable_Fl_Window* o = bPerpY1CutPlaneWindow = new movable_Fl_Window(266, 266, "Port Cut Plane");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_bPerpY1CutPlaneWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { P3DCutPlaneView* o = bPerpY1CutPlaneView = new P3DCutPlaneView(5, 5, 256, 256);
      o->box(FL_FLAT_BOX);
      o->color(FL_GRAY0);
      o->selection_color(FL_GRAY0);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
  }
  { movable_Fl_Window* o = InvoluteCutPlaneWindow = new movable_Fl_Window(266, 266, "Involutes Cut Plane");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_InvoluteCutPlaneWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { P3DCutPlaneView* o = InvoluteCutPlaneView = new P3DCutPlaneView(5, 5, 256, 256);
      o->box(FL_FLAT_BOX);
      o->color(FL_GRAY0);
      o->selection_color(FL_GRAY0);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
  }
  bBPerpCutPlaneWindow->resize(windowPropsPosn[CREST_PLANE_WIN][0], windowPropsPosn[CREST_PLANE_WIN][1], 266, 266);
  bNCutPlaneWindow->resize(windowPropsPosn[ATOM_PLANE_WIN][0], windowPropsPosn[ATOM_PLANE_WIN][1], 266, 266);
  bPerpNCutPlaneWindow->resize(windowPropsPosn[BPERP_N_PLANE_WIN][0], windowPropsPosn[BPERP_N_PLANE_WIN][1], 266, 266);
  bPerpY0CutPlaneWindow->resize(windowPropsPosn[STARBOARD_PLANE_WIN][0], windowPropsPosn[STARBOARD_PLANE_WIN][1], 266, 266);
  bPerpY1CutPlaneWindow->resize(windowPropsPosn[PORT_PLANE_WIN][0], windowPropsPosn[PORT_PLANE_WIN][1], 266, 266);
  InvoluteCutPlaneWindow->resize(windowPropsPosn[INVOLUTES_PLANE_WIN][0], windowPropsPosn[INVOLUTES_PLANE_WIN][1], 266, 266);
  bBPerpCutPlaneView->resize(5, 5, 256, 256);
  bNCutPlaneView->resize(5, 5, 256, 256);
  bPerpNCutPlaneView->resize(5, 5, 256, 256);
  bPerpY0CutPlaneView->resize(5, 5, 256, 256);
  bPerpY1CutPlaneView->resize(5, 5, 256, 256);
  InvoluteCutPlaneView->resize(5, 5, 256, 256);
  return w;
}

movable_Fl_Window* P3DUserInterface::make_editLandmarksWindow(int win_X, int win_Y) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = editLandmarksWindow = new movable_Fl_Window(358, 309, "Edit Landmarks");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_editLandmarksWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Button* o = new Fl_Button(285, 270, 60, 25, "Done");
      o->callback((Fl_Callback*)cb_Done);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = landmarksClearSurface = new Fl_Button(165, 15, 180, 25, "Clear Surface Landmarks");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_landmarksClearSurface);
    }
    { Fl_Button* o = landmarksClearImage = new Fl_Button(165, 50, 180, 25, "Clear Image Landmarks");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_landmarksClearImage);
    }
    { Fl_Button* o = landmarksNextBtn = new Fl_Button(15, 90, 60, 25, "Next");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_landmarksNextBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = landmarksPreviousBtn = new Fl_Button(80, 90, 70, 25, "Previous");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_landmarksPreviousBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = landmarkDeleteBtn = new Fl_Button(170, 90, 110, 25, "Delete Landmark");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_landmarkDeleteBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Group* o = editLandmarkNames = new Fl_Group(30, 143, 317, 102, "Figure      Landmark Name");
      o->box(FL_BORDER_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
      o->end();
    }
    { Fl_Value_Output* o = landmarksSurfaceNumber = new Fl_Value_Output(185, 250, 25, 25, "Number of surface landmarks:");
      o->box(FL_FLAT_BOX);
      o->labelsize(12);
    }
    { Fl_Group* o = new Fl_Group(15, 25, 120, 55, "Edit landmarks on ...");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Check_Button* o = landmarksEditMode_0Btn = new Fl_Check_Button(25, 30, 70, 25, "Surface");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_landmarksEditMode_0Btn);
      }
      { Fl_Check_Button* o = landmarksEditMode_1Btn = new Fl_Check_Button(25, 50, 60, 25, "Image");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_landmarksEditMode_1Btn);
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Button* o = editLandmarks_Caret0 = new Fl_Button(5, 150, 25, 15, "@>");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_FLAT_BOX);
      o->labelsize(10);
      o->labelcolor((Fl_Color)3);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = editLandmarks_Caret1 = new Fl_Button(5, 165, 25, 15, "@>");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_FLAT_BOX);
      o->labelsize(10);
      o->labelcolor((Fl_Color)3);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = editLandmarks_Caret2 = new Fl_Button(5, 180, 25, 15, "@>");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_FLAT_BOX);
      o->labelsize(10);
      o->labelcolor((Fl_Color)3);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = editLandmarks_Caret3 = new Fl_Button(5, 195, 25, 15, "@>");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_FLAT_BOX);
      o->labelsize(10);
      o->labelcolor((Fl_Color)3);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = editLandmarks_Caret4 = new Fl_Button(5, 210, 25, 15, "@>");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_FLAT_BOX);
      o->labelsize(10);
      o->labelcolor((Fl_Color)3);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = editLandmarks_Caret5 = new Fl_Button(5, 225, 25, 15, "@>");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_FLAT_BOX);
      o->labelsize(10);
      o->labelcolor((Fl_Color)3);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = landmarksImageNumber = new Fl_Value_Output(180, 275, 25, 25, "Number of image landmarks:");
      o->box(FL_FLAT_BOX);
      o->labelsize(12);
    }
    { Fl_Button* o = new Fl_Button(210, 270, 65, 25, "Apply");
      o->callback((Fl_Callback*)cb_Apply);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = landmarkGotoBtn = new Fl_Button(295, 90, 50, 25, "Locate");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_landmarkGotoBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  landmarkCells = NULL;
  editLandmarksWindow->position(win_X, win_Y);
  return w;
}

movable_Fl_Window* P3DUserInterface::make_editModelWindow(int win_X, int win_Y) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = editModelWindow = new movable_Fl_Window(312, 420, "Edit Model");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_editModelWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Input* o = editNameInput = new Fl_Input(90, 15, 210, 30, "Model name: ");
      o->labelsize(12);
      o->textsize(12);
    }
    { Fl_Menu_Button* o = editFigureColorSelector = new Fl_Menu_Button(185, 280, 75, 20, "Color");
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->menu(menu_editFigureColorSelector);
    }
    { Fl_Box* o = editCurrentColorOutput = new Fl_Box(185, 245, 100, 25, "current color");
      o->box(FL_BORDER_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(10);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = new Fl_Button(220, 380, 75, 25, "Done");
      o->callback((Fl_Callback*)cb_Done1);
    }
    { Fl_Group* o = editModelFigureNames = new Fl_Group(10, 65, 290, 110, "Figure Names");
      o->box(FL_BORDER_BOX);
      o->end();
    }
    { Fl_Counter* o = editModelFigureNumber = new Fl_Counter(10, 195, 85, 20, "Figure");
      o->type(1);
      o->labelsize(12);
      o->minimum(0);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_editModelFigureNumber);
    }
    { Fl_Counter* o = editModelFigureTolerance = new Fl_Counter(185, 200, 85, 20, "Smoothness");
      o->type(1);
      o->labelsize(12);
      o->minimum(0);
      o->maximum(90);
      o->step(1);
      o->textsize(12);
      o->callback((Fl_Callback*)cb_editModelFigureTolerance);
    }
    { Fl_Group* o = editModelFigureBlendGroup = new Fl_Group(20, 265, 115, 135, "Blending");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Counter* o = editModelFigureBlendExtent = new Fl_Counter(35, 320, 85, 20, "Blend Extent");
        o->type(1);
        o->labelsize(12);
        o->minimum(0);
        o->maximum(1);
        o->step(0.05);
        o->value(0.5);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_editModelFigureBlendExtent);
      }
      { Fl_Counter* o = editModelFigureBlendAmount = new Fl_Counter(35, 275, 85, 20, "Blend Amount");
        o->type(1);
        o->labelsize(12);
        o->minimum(0);
        o->maximum(1);
        o->step(0.05);
        o->value(0.5);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_editModelFigureBlendAmount);
      }
      { Fl_Button* o = editModelFigureApplyBlend = new Fl_Button(65, 365, 55, 25, "Apply");
        o->callback((Fl_Callback*)cb_editModelFigureApplyBlend);
      }
      o->end();
    }
    { Fl_Check_Button* o = editModelAttachmentMode = new Fl_Check_Button(185, 340, 20, 25, "Protrusion");
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)2);
      o->selection_color((Fl_Color)3);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_editModelAttachmentMode);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Group* o = editModelPolarityGroup = new Fl_Group(175, 310, 130, 30);
      o->align(FL_ALIGN_CENTER);
      { Fl_Check_Button* o = editModelPolarity = new Fl_Check_Button(185, 310, 20, 30, "P/N");
        o->down_box(FL_EMBOSSED_BOX);
        o->color((Fl_Color)3);
        o->selection_color((Fl_Color)2);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_editModelPolarity);
        o->align(FL_ALIGN_RIGHT);
      }
      o->end();
    }
    { Fl_Button* o = editModelDimensionsOutput = new Fl_Button(105, 195, 75, 25, "2 x 2");
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    o->set_modal();
    o->end();
  }
  editModelWindow->position(win_X, win_Y);
  return w;
}

movable_Fl_Window* P3DUserInterface::make_AttachFigureDialog(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = attachSubfigureDialog = new movable_Fl_Window(264, 134, "Attach a Subfigure");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_attachSubfigureDialog, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(5, 5, 255, 125);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Button* o = attachStepTextOutput = new Fl_Button(20, 10, 150, 35, "Step");
        o->box(FL_FLAT_BOX);
        o->labelfont(1);
        o->labelsize(18);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Output* o = attachInstructionsTextOutput = new Fl_Output(20, 45, 230, 40);
        o->type(12);
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NO_LABEL);
        o->textsize(12);
      }
      { Fl_Button* o = attachNextButton = new Fl_Button(40, 90, 75, 30, "Next");
        o->callback((Fl_Callback*)cb_attachNextButton);
      }
      { Fl_Button* o = attachCancelButton = new Fl_Button(140, 90, 75, 30, "Cancel");
        o->callback((Fl_Callback*)cb_attachCancelButton);
      }
      { Fl_Group* o = attachModeGroup = new Fl_Group(20, 60, 230, 25, "Attachment mode");
        o->box(FL_ENGRAVED_BOX);
        o->labelfont(1);
        o->labelsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Round_Button* o = attachProtrusionButton = new Fl_Round_Button(35, 60, 80, 25, "Protrusion");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_attachProtrusionButton);
        }
        { Fl_Round_Button* o = attachIndentationButton = new Fl_Round_Button(140, 60, 85, 25, "Indentation");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_attachIndentationButton);
        }
        o->end();
      }
      o->end();
    }
    o->end();
  }
  attachSubfigureDialog->position(win_X, win_Y);
  if (open) attachSubfigureDialog->show();
  return w;
}

movable_Fl_Window* P3DUserInterface::make_ElongationDialog(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = elongationDialog = new movable_Fl_Window(267, 103, "Elongation");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_elongationDialog, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Slider* o = elongateRowSlider = new Fl_Slider(15, 75, 100, 15, "Elongate row");
      o->type(1);
      o->labelsize(12);
      o->minimum(0.5);
      o->maximum(1.5);
      o->value(1);
      o->callback((Fl_Callback*)cb_elongateRowSlider);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Slider* o = elongateColumnSlider = new Fl_Slider(150, 75, 100, 15, "Elongate column");
      o->type(1);
      o->labelsize(12);
      o->minimum(0.5);
      o->maximum(1.5);
      o->value(1);
      o->callback((Fl_Callback*)cb_elongateColumnSlider);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Button* o = elongation1stMessageBtn = new Fl_Button(15, 15, 240, 15, "Mark (ctrl-right click) an atom of the figure");
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = elongation2ndMessageBtn = new Fl_Button(20, 30, 235, 15, "to be elongated; then adjust the sliders.");
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = elongationFigureBtn = new Fl_Button(55, 25, 50, 20, "Figure:");
      o->box(FL_NO_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = elongationFigureNumberOutput = new Fl_Value_Output(110, 25, 50, 20);
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_CENTER);
    }
    o->end();
  }
  elongationDialog->position(win_X, win_Y);
  if (open) elongationDialog->show();
  return w;
}

movable_Fl_Window* P3DUserInterface::make_OptimizerControlDialog(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = optimizerControlDialog = new movable_Fl_Window(291, 309, "Optimizer Control");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color((Fl_Color)46);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(12);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_optimizerControlDialog, (void*)(this));
    o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    o->when(FL_WHEN_RELEASE);
    { Fl_Group* o = optimizerControl = new Fl_Group(5, 265, 279, 40);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)46);
      { Fl_Button* o = nextOptimizationBtn = new Fl_Button(109, 275, 74, 25, "Next");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_nextOptimizationBtn);
      }
      { Fl_Button* o = optimizationCancelBtn = new Fl_Button(205, 275, 75, 25, "Cancel");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_optimizationCancelBtn);
      }
      { Fl_Button* o = previewOptimizationBtn = new Fl_Button(12, 275, 75, 25, "Probe");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_previewOptimizationBtn);
        o->hide();
      }
      { Fl_Button* o = continuousOptimizationBtn = new Fl_Button(15, 275, 125, 25, "Run Continuously");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_continuousOptimizationBtn);
        o->hide();
      }
      { Fl_Button* o = startNextInteractiveStageBtn = new Fl_Button(150, 275, 45, 25, "Start");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_startNextInteractiveStageBtn);
        o->hide();
      }
      o->end();
    }
    { Fl_Group* o = optimizerSetupStage = new Fl_Group(10, 35, 270, 225, "Setup");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Group* o = optimizerMatchMethod = new Fl_Group(25, 60, 240, 170, "Match Method");
        o->box(FL_ENGRAVED_BOX);
        o->labelfont(1);
        o->labelsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Round_Button* o = gaussDerivMatchRadioBtn = new Fl_Round_Button(35, 64, 205, 25, "Light to dark Gaussian derivative");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = negGaussDerivMatchRadioBtn = new Fl_Round_Button(35, 84, 205, 25, "Dark to light Gaussian derivative");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = simpleMaskMatchRadioBtn = new Fl_Round_Button(35, 104, 175, 25, "Simple mask from training");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = binaryMatchRadioBtn = new Fl_Round_Button(35, 124, 100, 25, "Binary image");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
        }
        { Fl_Round_Button* o = histogramMatchRadioBtn = new Fl_Round_Button(35, 145, 160, 25, "Histogram image match");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->selection_color((Fl_Color)1);
          o->labelsize(12);
        }
        o->end();
      }
      { Fl_Check_Button* o = optimizerWindowedIntensities = new Fl_Check_Button(30, 235, 20, 25, "Use windowed intensities");
        o->down_box(FL_EMBOSSED_BOX);
        o->value(1);
        o->color((Fl_Color)55);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_optimizerWindowedIntensities);
        o->align(FL_ALIGN_RIGHT);
      }
      o->end();
    }
    { Fl_Group* o = optimizerObjectStage = new Fl_Group(10, 35, 270, 205, "Object Stage");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Button* o = objectStartBtn = new Fl_Button(25, 205, 70, 25, "Start");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_objectStartBtn);
      }
      { Fl_Button* o = objectStopBtn = new Fl_Button(110, 205, 70, 25, "Stop");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_objectStopBtn);
      }
      { Fl_Button* o = objectResetBtn = new Fl_Button(195, 205, 70, 25, "Reset");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_objectResetBtn);
      }
      { Fl_Value_Output* o = objectIterationOutput = new Fl_Value_Output(135, 60, 130, 20, "Current iteration:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = objectMatchValueOutput = new Fl_Value_Output(135, 80, 130, 20, "Current match:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = objectPenaltyValueOutput = new Fl_Value_Output(135, 100, 130, 20, "Current penalty:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Slider* o = objectPenaltyWeightSlider = new Fl_Value_Slider(25, 180, 240, 15, "Geometry weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    { Fl_Group* o = optimizerEnsembleStage = new Fl_Group(10, 35, 270, 205, "Object Ensemble Stage");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Button* o = modelStartBtn = new Fl_Button(25, 205, 70, 25, "Start");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_modelStartBtn);
      }
      { Fl_Button* o = modelStopBtn = new Fl_Button(110, 205, 70, 25, "Stop");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_modelStopBtn);
      }
      { Fl_Button* o = modelResetBtn = new Fl_Button(195, 205, 70, 25, "Reset");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_modelResetBtn);
      }
      { Fl_Value_Output* o = modelIterationOutput = new Fl_Value_Output(135, 60, 130, 20, "Current iteration:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = modelMatchValueOutput = new Fl_Value_Output(135, 80, 130, 20, "Current match:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = modelPenaltyValueOutput = new Fl_Value_Output(135, 100, 130, 20, "Current penalty:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Slider* o = modelPenaltyWeightSlider = new Fl_Value_Slider(25, 180, 240, 15, "Geometry weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    { Fl_Group* o = optimizerFigureStage = new Fl_Group(10, 35, 270, 220, "Figure Stage");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Button* o = figureStageStartBtn = new Fl_Button(25, 220, 70, 25, "Start");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_figureStageStartBtn);
      }
      { Fl_Button* o = figureStageStopBtn = new Fl_Button(110, 220, 70, 25, "Stop");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_figureStageStopBtn);
      }
      { Fl_Output* o = figureStageFigureName = new Fl_Output(65, 40, 200, 20, "Figure:");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = figureStageIterationOutput = new Fl_Value_Output(135, 60, 130, 20, "Current iteration:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = figureStageImageMatchValueOutput = new Fl_Value_Output(135, 80, 130, 20, "Image match:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = figureStagePenaltyValueOutput = new Fl_Value_Output(135, 100, 130, 20, "Geometric deviation:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Slider* o = figureStagePenaltyWeightSlider = new Fl_Value_Slider(25, 160, 240, 15, "Geometry weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = figureStageConstraintsPenaltyWeightSlider = new Fl_Value_Slider(25, 195, 240, 15, "Inter-object weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Output* o = figureStageObjectiveFunctionValueOutput = new Fl_Value_Output(135, 120, 130, 20, "Objective function:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      o->end();
    }
    { Fl_Group* o = optimizerMainFigureStage = new Fl_Group(10, 35, 270, 220, "Main Figure Stage");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Button* o = mainFigureStartBtn = new Fl_Button(25, 220, 70, 25, "Start");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_mainFigureStartBtn);
      }
      { Fl_Button* o = mainFigureStopBtn = new Fl_Button(110, 220, 70, 25, "Stop");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_mainFigureStopBtn);
      }
      { Fl_Output* o = mainFigureName = new Fl_Output(65, 40, 200, 20, "Figure:");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = mainFigureIterationOutput = new Fl_Value_Output(135, 60, 130, 20, "Current iteration:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = mainFigureImageMatchValueOutput = new Fl_Value_Output(135, 80, 130, 20, "Image match:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = mainFigurePenaltyValueOutput = new Fl_Value_Output(135, 100, 130, 20, "Geometric deviation:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Slider* o = mainFigurePenaltyWeightSlider = new Fl_Value_Slider(25, 160, 240, 15, "Geometry weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = mainFigureConstraintsPenaltyWeightSlider = new Fl_Value_Slider(25, 195, 240, 15, "Inter-object weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Output* o = mainFigureObjectiveFunctionValueOutput = new Fl_Value_Output(135, 120, 130, 20, "Objective function:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      o->end();
    }
    { Fl_Group* o = optimizerSubfigureStage = new Fl_Group(10, 35, 270, 220, "Subfigure Stage");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Button* o = subfigureStartBtn = new Fl_Button(25, 215, 70, 25, "Start");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_subfigureStartBtn);
      }
      { Fl_Button* o = subfigureStopBtn = new Fl_Button(110, 215, 70, 25, "Stop");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_subfigureStopBtn);
      }
      { Fl_Output* o = subFigureName = new Fl_Output(65, 40, 200, 20, "Figure:");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = subfigureIterationOutput = new Fl_Value_Output(135, 60, 130, 20, "Current iteration:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = subfigureMatchValueOutput = new Fl_Value_Output(135, 80, 130, 20, "Current match:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = subfigurePenaltyValueOutput = new Fl_Value_Output(135, 100, 130, 20, "Geometric deviation:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Slider* o = subfigurePenaltyWeightSlider = new Fl_Value_Slider(25, 155, 240, 15, "Geometry weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->callback((Fl_Callback*)cb_subfigurePenaltyWeightSlider);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = subfigureConstraintsPenaltyWeightSlider = new Fl_Value_Slider(25, 190, 240, 15, "Inter-object weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->callback((Fl_Callback*)cb_subfigureConstraintsPenaltyWeightSlider);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    { Fl_Group* o = optimizerPrimitiveStage = new Fl_Group(10, 35, 270, 230, "Atom Stage");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Button* o = primitiveStartBtn = new Fl_Button(25, 225, 70, 25, "Start");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_primitiveStartBtn);
      }
      { Fl_Button* o = primitiveStopBtn = new Fl_Button(110, 225, 70, 25, "Stop");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_primitiveStopBtn);
      }
      { Fl_Output* o = primitiveFigureName = new Fl_Output(65, 35, 200, 20, "Figure:");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = primitiveIterationOutput = new Fl_Value_Output(135, 50, 130, 20, "Current iteration:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = primitiveObjectiveFunctionValueOutput = new Fl_Value_Output(135, 80, 130, 20, "Objective function:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = primativePenaltyValueOutput = new Fl_Value_Output(135, 95, 130, 20, "Geometric deviation:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = primitiveImageMatchValueOutput = new Fl_Value_Output(135, 65, 130, 20, "Image match:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Slider* o = primitivePenaltyWeightSlider = new Fl_Value_Slider(25, 165, 240, 15, "Geometry weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = primitiveConstraintsPenaltyWeightSlider = new Fl_Value_Slider(25, 200, 240, 15, "Inter-atom weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = primitiveNeighborPenaltyWeightSlider = new Fl_Value_Slider(25, 130, 240, 15, "Neighbor penalty weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    { Fl_Group* o = optimizerVoxelStage = new Fl_Group(10, 35, 270, 215, "Voxel Stage");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Button* o = voxelStageStartBtn = new Fl_Button(25, 215, 70, 25, "Start");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_voxelStageStartBtn);
      }
      { Fl_Button* o = voxelStageStopBtn = new Fl_Button(110, 215, 70, 25, "Stop");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_voxelStageStopBtn);
      }
      { Fl_Output* o = voxelStageFigureName = new Fl_Output(65, 40, 200, 20, "Figure:");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = voxelStageIterationOutput = new Fl_Value_Output(135, 60, 130, 20, "Current iteration:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = voxelStageMatchValueOutput = new Fl_Value_Output(135, 80, 130, 20, "Image match:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Output* o = voxelStagePenaltyValueOutput = new Fl_Value_Output(135, 100, 130, 20, "Geometric deviation:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Slider* o = voxelStagePenaltyWeightSlider = new Fl_Value_Slider(25, 155, 240, 15, "Geometry weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->callback((Fl_Callback*)cb_voxelStagePenaltyWeightSlider);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = voxelStageConstraintsPenaltyWeightSlider = new Fl_Value_Slider(25, 190, 240, 15, "Inter-object weight");
        o->type(5);
        o->labelsize(12);
        o->value(0.5);
        o->callback((Fl_Callback*)cb_voxelStageConstraintsPenaltyWeightSlider);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Output* o = voxelStageObjectiveFunctionValueOutput = new Fl_Value_Output(135, 120, 130, 20, "Objective function:");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
        o->textsize(12);
      }
      o->end();
    }
    { Fl_Group* o = optimizerEndStage = new Fl_Group(10, 35, 270, 205, "End");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Button* o = new Fl_Button(80, 105, 125, 60, "Finished!");
        o->box(FL_FLAT_BOX);
        o->labelfont(2);
        o->labelsize(24);
      }
      o->end();
    }
    o->end();
  }
  optimizerControlDialog->position(win_X, win_Y);
  if (open)
    optimizerControlDialog->show();
  return w;
}

movable_Fl_Window* P3DUserInterface::make_OptimizerSettingsDialog(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = optimizerSettingsDialog = new movable_Fl_Window(432, 283, "Optimizer Settings");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_optimizerSettingsDialog, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = setPenaltyWeightsBtn = new Fl_Return_Button(270, 130, 80, 25, "Set");
      o->callback((Fl_Callback*)cb_setPenaltyWeightsBtn);
    }
    { Fl_Button* o = revertPenaltyWeightsBtn = new Fl_Button(170, 130, 80, 25, "Revert");
      o->callback((Fl_Callback*)cb_revertPenaltyWeightsBtn);
    }
    { Fl_Group* o = new Fl_Group(10, 25, 150, 130, "Penalty Weights");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      { Fl_Value_Input* o = slidingPenaltyInput = new Fl_Value_Input(90, 125, 60, 20, "Sliding: ");
        o->labelsize(12);
        o->value(1);
        o->textsize(12);
      }
      { Fl_Value_Input* o = normalPenaltyInput = new Fl_Value_Input(90, 65, 60, 20, "Normal: ");
        o->labelsize(12);
        o->value(1);
        o->textsize(12);
      }
      { Fl_Value_Input* o = penetrationPenaltyInput = new Fl_Value_Input(90, 35, 60, 20, "Penetration: ");
        o->labelsize(12);
        o->value(1);
        o->textsize(12);
      }
      { Fl_Value_Input* o = creasingPenaltyInput = new Fl_Value_Input(90, 95, 60, 20, "Creasing: ");
        o->labelsize(12);
        o->value(1);
        o->textsize(12);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(170, 25, 252, 100, "Atom Stage");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      { Fl_Value_Input* o = conjGradIterInput = new Fl_Value_Input(346, 95, 66, 20, "Conjugate gradient iterations: ");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Input* o = skipThresholdInput = new Fl_Value_Input(346, 35, 65, 20, "Skip threshold: ");
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Value_Input* o = skipMultiplierInput = new Fl_Value_Input(346, 65, 66, 20, "Skip multiplier: ");
        o->labelsize(12);
        o->textsize(12);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(20, 185, 392, 90, "PGA");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      { Fl_Check_Button* o = usePGABtn = new Fl_Check_Button(130, 195, 20, 20, "Use geodesics");
        o->down_box(FL_EMBOSSED_BOX);
        o->color((Fl_Color)55);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Button* o = loadPGAFileBtn = new Fl_Button(245, 195, 120, 25, "Load PGA File...");
        o->callback((Fl_Callback*)cb_loadPGAFileBtn);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Output* o = pgaFileOutput = new Fl_Output(85, 235, 310, 30);
        o->type(12);
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labelsize(10);
        o->textfont(4);
        o->textsize(10);
        o->align(132);
      }
      { Fl_Box* o = new Fl_Box(25, 227, 60, 20, "PGA File:");
        o->labelsize(10);
        o->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
      }
      o->end();
    }
    o->end();
  }
  optimizerSettingsDialog->position(win_X, win_Y);
  if (open) optimizerSettingsDialog->show();
  usePGABtn->deactivate();
  loadPGAFileBtn->deactivate();
  return w;
}

movable_Fl_Window* P3DUserInterface::make_ModelSlideShowWindow(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = modelSlideShowDialog = new movable_Fl_Window(862, 267, "Model/Tile Slide Show");
    w = o;
    o->box(FL_UP_BOX);
    o->color((Fl_Color)23);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_modelSlideShowDialog, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(5, 25, 390, 235, "Models");
      o->box(FL_UP_BOX);
      o->color((Fl_Color)29);
      { Fl_File_Browser* o = modelSlideShowFileBrowser = new Fl_File_Browser(40, 25, 355, 185);
        o->type(2);
        o->callback((Fl_Callback*)cb_modelSlideShowFileBrowser);
        o->align(FL_ALIGN_CENTER);
        Fl_Group::current()->resizable(o);
      }
      { Fl_Button* o = new Fl_Button(9, 65, 30, 30, "@8");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_8);
      }
      { Fl_Button* o = new Fl_Button(9, 130, 30, 30, "@2");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_2);
      }
      { Fl_Button* o = new Fl_Button(10, 221, 83, 33, "Add");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Add);
      }
      { Fl_Counter* o = modelSlideShowCounter = new Fl_Counter(106, 231, 85, 19, "Display");
        o->type(1);
        o->selection_color(FL_BACKGROUND2_COLOR);
        o->labelsize(12);
        o->minimum(0);
        o->maximum(0);
        o->step(1);
        o->callback((Fl_Callback*)cb_modelSlideShowCounter);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Button* o = new Fl_Button(204, 221, 93, 33, "Remove");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Remove1);
      }
      { Fl_Button* o = new Fl_Button(310, 221, 80, 33, "Clear List");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Clear1);
      }
      { Fl_Box* o = new Fl_Box(9, 100, 30, 25, "order");
        o->labelsize(12);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      o->end();
    }
    { Fl_Check_Button* o = slideShowSync = new Fl_Check_Button(422, 213, 20, 25, "Sync->");
      o->tooltip("The tile set Display slider changes with the Model Display slider");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->align(130);
    }
    { Fl_Group* o = new Fl_Group(465, 25, 390, 231, "Tiles");
      o->box(FL_UP_BOX);
      o->color((Fl_Color)29);
      { Fl_File_Browser* o = tileSlideShowFileBrowser = new Fl_File_Browser(500, 25, 355, 185);
        o->type(2);
        o->callback((Fl_Callback*)cb_tileSlideShowFileBrowser);
        o->align(FL_ALIGN_CENTER);
        Fl_Group::current()->resizable(o);
      }
      { Fl_Button* o = new Fl_Button(469, 65, 30, 30, "@8");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_81);
      }
      { Fl_Button* o = new Fl_Button(469, 130, 30, 30, "@2");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_21);
      }
      { Fl_Button* o = new Fl_Button(470, 219, 82, 32, "Add");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Add1);
      }
      { Fl_Counter* o = tileSlideShowCounter = new Fl_Counter(565, 230, 85, 20, "Display");
        o->type(1);
        o->labelsize(12);
        o->minimum(0);
        o->maximum(0);
        o->step(1);
        o->callback((Fl_Callback*)cb_tileSlideShowCounter);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Button* o = new Fl_Button(663, 221, 91, 30, "Remove");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Remove2);
      }
      { Fl_Button* o = new Fl_Button(768, 221, 81, 30, "Clear List");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Clear2);
      }
      { Fl_Box* o = new Fl_Box(469, 100, 30, 25, "order");
        o->labelsize(12);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Check_Button* o = slideShowCenter = new Fl_Check_Button(421, 100, 20, 25, "Keep Centered");
      o->tooltip("Each time the model changes via the Display slider, recenter it in the Model \
Display Window. Center tiles if no models.");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->align(130);
    }
    o->end();
  }
  modelSlideShowDialog->position(win_X, win_Y);
  if (open) modelSlideShowDialog->show();
  return w;
}
movable_Fl_Window* P3DUserInterface::make_CPNSWindow(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = cpnsDialog = new movable_Fl_Window(391, 256, "CPNS Deformation");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_cpnsDialog, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);

    { Fl_Button* o = cpnsDoneBtn = new Fl_Button(315, 225, 65, 25, "Done");
      o->callback((Fl_Callback*)cb_cpnsDoneBtn);
    }

    { Fl_Group* o = new Fl_Group(8, 20, 375, 165, "CPNS Principal Arcs");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      { Fl_Button* o = new Fl_Button(20, 24, 355, 20, "-3                       -1.5                       0                       1\
.5                       3");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
      }
      { Fl_Slider* o = cpnsSlider1 = new Fl_Slider(32, 45, 340, 20, "1:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_cpnsSlider1);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = cpnsSlider2 = new Fl_Slider(33, 72, 340, 20, "2:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_cpnsSlider2);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = cpnsSlider3 = new Fl_Slider(33, 98, 340, 20, "3:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_cpnsSlider3);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = cpnsSlider4 = new Fl_Slider(33, 127, 340, 20, "4:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_cpnsSlider4);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = cpnsSlider5 = new Fl_Slider(33, 155, 340, 20, "5:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_cpnsSlider5);
        o->align(FL_ALIGN_LEFT);
      }
      o->end();
    }
    { Fl_Button* o = cpnsZeroBtn = new Fl_Button(315, 190, 60, 25, "Zero");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_cpnsZeroBtn);
      // o->deactivate();
    }
    o->end();
  }
  cpnsDialog->position(win_X, win_Y);
#ifdef BINARY
  pgaZeroBtn->hide();
#endif
  if (open) {
    callback->cpnsInitDeformationWindow();
    cpnsDialog->show();
  }
  return w;
}

movable_Fl_Window* P3DUserInterface::make_PGAWindow(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = pgaDialog = new movable_Fl_Window(391, 256, "PGA Deformation");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_pgaDialog, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Button* o = pgaNextBtn = new Fl_Button(205, 190, 90, 25, "Next Stage");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_pgaNextBtn);
      o->deactivate();
    }
    { Fl_Button* o = pgaStageOutput = new Fl_Button(55, 224, 245, 25, "stage");
      o->box(FL_FLAT_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = pgaStageNameLabel = new Fl_Button(5, 224, 50, 25, "Name:");
      o->box(FL_FLAT_BOX);
      o->labelsize(12);
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = pgaDoneBtn = new Fl_Button(315, 225, 65, 25, "Done");
      o->callback((Fl_Callback*)cb_pgaDoneBtn);
    }
    { Fl_Button* o = pgaMeanResBtn = new Fl_Button(15, 190, 175, 25, "Apply Mean of Residue");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_pgaMeanResBtn);
    }
    { Fl_Group* o = new Fl_Group(8, 20, 375, 165, "Principal Geodesics");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      { Fl_Button* o = new Fl_Button(20, 24, 355, 20, "-3                       -1.5                       0                       1\
.5                       3");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
      }
      { Fl_Slider* o = pgaSlider1 = new Fl_Slider(32, 45, 340, 20, "1:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pgaSlider1);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = pgaSlider2 = new Fl_Slider(33, 72, 340, 20, "2:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pgaSlider2);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = pgaSlider3 = new Fl_Slider(33, 98, 340, 20, "3:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pgaSlider3);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = pgaSlider4 = new Fl_Slider(33, 127, 340, 20, "4:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pgaSlider4);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = pgaSlider5 = new Fl_Slider(33, 155, 340, 20, "5:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pgaSlider5);
        o->align(FL_ALIGN_LEFT);
      }
      o->end();
    }
    { Fl_Button* o = pgaZeroBtn = new Fl_Button(315, 190, 60, 25, "Zero");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_pgaZeroBtn);
      o->deactivate();
    }
    o->end();
  }
  pgaDialog->position(win_X, win_Y);
#ifdef BINARY
  pgaNextBtn->hide();
  pgaStageOutput->hide();
  pgaStageNameLabel->hide();
  pgaMeanResBtn->hide();
  pgaZeroBtn->hide();
#endif
  if (open) {
    callback->pgaInitDeformationWindow();
    pgaDialog->show();
  }
  return w;
}

movable_Fl_Window* P3DUserInterface::make_PCAWindow(int win_X, int win_Y) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = pcaDialog = new movable_Fl_Window(393, 226, "PCA Deformation");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_pcaDialog, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(5, 20, 380, 190, "Principal Components");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->labelsize(12);
      { Fl_Button* o = new Fl_Button(20, 24, 355, 20, "-3                       -1.5                       0                       1\
.5                       3");
        o->box(FL_FLAT_BOX);
        o->labelsize(12);
      }
      { Fl_Slider* o = pcaSlider1 = new Fl_Slider(30, 46, 340, 20, "1:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pcaSlider1);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = pcaSlider2 = new Fl_Slider(30, 77, 340, 20, "2:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pcaSlider2);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = pcaSlider3 = new Fl_Slider(30, 109, 340, 20, "3:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pcaSlider3);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = pcaSlider4 = new Fl_Slider(30, 140, 340, 20, "4:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pcaSlider4);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = pcaSlider5 = new Fl_Slider(30, 172, 340, 20, "5:");
        o->type(1);
        o->minimum(-3);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_pcaSlider5);
        o->align(FL_ALIGN_LEFT);
      }
      o->end();
    }
    o->end();
  }
  pcaDialog->position(win_X, win_Y);
#ifdef PCA_VISUALIZER
  toolsMenuPCA_Deformation->show();
  fileMenuLoadPCASurface->show();
  fileMenuLoadPCAResidues->show();
#endif
  return w;
}

Fl_Double_Window* P3DUserInterface::make_TransformationRecordingTestDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = transformationRecordingTestDialog = new Fl_Double_Window(349, 135, "Transformation Recording");
    w = o;
    o->callback((Fl_Callback*)cb_transformationRecordingTestDialog, (void*)(this));
    { Fl_Button* o = startRecordingButton = new Fl_Button(10, 15, 155, 45, "Set as Reference and Start Recording");
      o->callback((Fl_Callback*)cb_startRecordingButton);
      o->align(FL_ALIGN_WRAP);
    }
    { Fl_Button* o = endRecordingButton = new Fl_Button(10, 75, 155, 45, "End Recording");
      o->callback((Fl_Callback*)cb_endRecordingButton);
    }
    { Fl_Button* o = resetRecordingButton = new Fl_Button(185, 15, 155, 45, "Reference Object");
      o->callback((Fl_Callback*)cb_resetRecordingButton);
    }
    { Fl_Button* o = testRecordingButton = new Fl_Button(185, 75, 155, 45, "Target Object");
      o->callback((Fl_Callback*)cb_testRecordingButton);
    }
    o->end();
  }
  return w;
}

void P3DUserInterface::show() {
  #ifdef PRODUCTION_VERSION
    test_debug_menu->hide();
  #endif
  callback->adjustInterfaceForBinary();
  callback->show();
}

void P3DUserInterface::setSurfaceLevelBtns(int button) {
  switch(button) {
	    case 0:	SurfaceLevel_0Btn->value(1);
					    SurfaceLevel_1Btn->value(0);
					    SurfaceLevel_2Btn->value(0);
					    SurfaceLevel_3Btn->value(0);
					    break;
	    case 1:	SurfaceLevel_0Btn->value(0);
					    SurfaceLevel_1Btn->value(1);
					    SurfaceLevel_2Btn->value(0);
					    SurfaceLevel_3Btn->value(0);
					    break;
	    case 2:	SurfaceLevel_0Btn->value(0);
					    SurfaceLevel_1Btn->value(0);
					    SurfaceLevel_2Btn->value(1);
					    SurfaceLevel_3Btn->value(0);
					    break;
	    case 3:	SurfaceLevel_0Btn->value(0);
					    SurfaceLevel_1Btn->value(0);
					    SurfaceLevel_2Btn->value(0);
					    SurfaceLevel_3Btn->value(1);
					    break;
      }
}

void P3DUserInterface::setSurfaceTypeBtns(int button) {
  switch(button) {
	    case M3D_NONE:		noneBtn->value(1);
						    pointcloudBtn->value(0);
						    wireframeBtn->value(0);
						    solidBtn->value(0);
						    break;
	    case M3D_POINTCLOUD:		noneBtn->value(0);
						    pointcloudBtn->value(1);
						    wireframeBtn->value(0);
						    solidBtn->value(0);
						    break;
	    case M3D_WIREFRAME:	noneBtn->value(0);
						    pointcloudBtn->value(0);
						    wireframeBtn->value(1);
						    solidBtn->value(0);
						    break;
	    case M3D_SOLID:		noneBtn->value(0);
						    pointcloudBtn->value(0);
						    wireframeBtn->value(0);
						    solidBtn->value(1);
						    break;
      }
}

void P3DUserInterface::setPartialSurfaceLevelBtns(int button) {
  switch(button) {
	    case 0:	PartialSurfaceLevel_0Btn->value(1);
					    PartialSurfaceLevel_1Btn->value(0);
					    PartialSurfaceLevel_2Btn->value(0);
					    PartialSurfaceLevel_3Btn->value(0);
					    break;
	    case 1:	PartialSurfaceLevel_0Btn->value(0);
					    PartialSurfaceLevel_1Btn->value(1);
					    PartialSurfaceLevel_2Btn->value(0);
					    PartialSurfaceLevel_3Btn->value(0);
					    break;
	    case 2:	PartialSurfaceLevel_0Btn->value(0);
					    PartialSurfaceLevel_1Btn->value(0);
					    PartialSurfaceLevel_2Btn->value(1);
					    PartialSurfaceLevel_3Btn->value(0);
					    break;
	    case 3:	PartialSurfaceLevel_0Btn->value(0);
					    PartialSurfaceLevel_1Btn->value(0);
					    PartialSurfaceLevel_2Btn->value(0);
					    PartialSurfaceLevel_3Btn->value(1);
					    break;
      }
}

void P3DUserInterface::setPartialSurfaceTypeBtns(int button) {
  switch(button) {
	    case M3D_NONE:		partialNoneBtn->value(1);
						    partialPointcloudBtn->value(0);
						    partialWireframeBtn->value(0);
						    partialSolidBtn->value(0);
						    break;
	    case M3D_POINTCLOUD:	partialNoneBtn->value(0);
						    partialPointcloudBtn->value(1);
						    partialWireframeBtn->value(0);
						    partialSolidBtn->value(0);
						    break;
	    case M3D_WIREFRAME:	partialNoneBtn->value(0);
						    partialPointcloudBtn->value(0);
						    partialWireframeBtn->value(1);
						    partialSolidBtn->value(0);
						    break;
	    case M3D_SOLID:		partialNoneBtn->value(0);
						    partialPointcloudBtn->value(0);
						    partialWireframeBtn->value(0);
						    partialSolidBtn->value(1);
						    break;
      }
}

void P3DUserInterface::setOptimizerMatchBtns(int button) {
  switch(button) {
	    case 0:	gaussDerivMatchRadioBtn->value(1);
					    negGaussDerivMatchRadioBtn->value(0);
					    simpleMaskMatchRadioBtn->value(0);
					    binaryMatchRadioBtn->value(0);
					    histogramMatchRadioBtn->value(0);
					    break;
	    case 1:	gaussDerivMatchRadioBtn->value(0);
					    negGaussDerivMatchRadioBtn->value(1);
					    simpleMaskMatchRadioBtn->value(0);
					    binaryMatchRadioBtn->value(0);
					    histogramMatchRadioBtn->value(0);
					    break;
	    case 2:	gaussDerivMatchRadioBtn->value(0);
					    negGaussDerivMatchRadioBtn->value(0);
					    simpleMaskMatchRadioBtn->value(1);
					    binaryMatchRadioBtn->value(0);
					    histogramMatchRadioBtn->value(0);
					    break;
	    case 3:	gaussDerivMatchRadioBtn->value(0);
					    negGaussDerivMatchRadioBtn->value(0);
					    simpleMaskMatchRadioBtn->value(0);
					    binaryMatchRadioBtn->value(1);
					    histogramMatchRadioBtn->value(0);
					    break;
	    case 4:	gaussDerivMatchRadioBtn->value(0);
					    negGaussDerivMatchRadioBtn->value(0);
					    simpleMaskMatchRadioBtn->value(0);
					    binaryMatchRadioBtn->value(0);
					    histogramMatchRadioBtn->value(1);
					    break;
      }
}

void P3DUserInterface::setPrefsSurfaceLevelBtns(int button) {
  switch(button) {
	    case 0:	surfacePrefsLevel_0Btn->value(1);
					    surfacePrefsLevel_1Btn->value(0);
					    surfacePrefsLevel_2Btn->value(0);
					    surfacePrefsLevel_3Btn->value(0);
					    break;
	    case 1:	surfacePrefsLevel_0Btn->value(0);
					    surfacePrefsLevel_1Btn->value(1);
					    surfacePrefsLevel_2Btn->value(0);
					    surfacePrefsLevel_3Btn->value(0);
					    break;
	    case 2:	surfacePrefsLevel_0Btn->value(0);
					    surfacePrefsLevel_1Btn->value(0);
					    surfacePrefsLevel_2Btn->value(1);
					    surfacePrefsLevel_3Btn->value(0);
					    break;
	    case 3:	surfacePrefsLevel_0Btn->value(0);
					    surfacePrefsLevel_1Btn->value(0);
					    surfacePrefsLevel_2Btn->value(0);
					    surfacePrefsLevel_3Btn->value(1);
					    break;
      }
}

void P3DUserInterface::setPrefsSurfaceTypeBtns(int button) {
  switch(button) {
	    case M3D_NONE:		surfacePrefsNoneBtn->value(1);
						    surfacePrefsPointcloudBtn->value(0);
						    surfacePrefsWireframeBtn->value(0);
						    surfacePrefsSolidBtn->value(0);
						    break;
	    case M3D_POINTCLOUD:	surfacePrefsNoneBtn->value(0);
						    surfacePrefsPointcloudBtn->value(1);
						    surfacePrefsWireframeBtn->value(0);
						    surfacePrefsSolidBtn->value(0);
						    break;
	    case M3D_WIREFRAME:	surfacePrefsNoneBtn->value(0);
						    surfacePrefsPointcloudBtn->value(0);
						    surfacePrefsWireframeBtn->value(1);
						    surfacePrefsSolidBtn->value(0);
						    break;
	    case M3D_SOLID:		surfacePrefsNoneBtn->value(0);
						    surfacePrefsPointcloudBtn->value(0);
						    surfacePrefsWireframeBtn->value(0);
						    surfacePrefsSolidBtn->value(1);
						    break;
      }
}

void P3DUserInterface::setPrefsPartialSurfaceLevelBtns(int button) {
  switch(button) {
	    case 0:	constraintPrefsLevel_0Btn->value(1);
					    constraintPrefsLevel_1Btn->value(0);
					    constraintPrefsLevel_2Btn->value(0);
					    constraintPrefsLevel_3Btn->value(0);
					    break;
	    case 1:	constraintPrefsLevel_0Btn->value(0);
					    constraintPrefsLevel_1Btn->value(1);
					    constraintPrefsLevel_2Btn->value(0);
					    constraintPrefsLevel_3Btn->value(0);
					    break;
	    case 2:	constraintPrefsLevel_0Btn->value(0);
					    constraintPrefsLevel_1Btn->value(0);
					    constraintPrefsLevel_2Btn->value(1);
					    constraintPrefsLevel_3Btn->value(0);
					    break;
	    case 3:	constraintPrefsLevel_0Btn->value(0);
					    constraintPrefsLevel_1Btn->value(0);
					    constraintPrefsLevel_2Btn->value(0);
					    constraintPrefsLevel_3Btn->value(1);
					    break;
      }
}

void P3DUserInterface::setPrefsPartialSurfaceTypeBtns(int button) {
  switch(button) {
	    case M3D_NONE:		constraintPrefsNoneBtn->value(1);
						    constraintPrefsPointcloudBtn->value(0);
						    constraintPrefsWireframeBtn->value(0);
						    constraintPrefsSolidBtn->value(0);
						    break;
	    case M3D_POINTCLOUD:	constraintPrefsNoneBtn->value(0);
						    constraintPrefsPointcloudBtn->value(1);
						    constraintPrefsWireframeBtn->value(0);
						    constraintPrefsSolidBtn->value(0);
						    break;
	    case M3D_WIREFRAME:	constraintPrefsNoneBtn->value(0);
						    constraintPrefsPointcloudBtn->value(0);
						    constraintPrefsWireframeBtn->value(1);
						    constraintPrefsSolidBtn->value(0);
						    break;
	    case M3D_SOLID:		constraintPrefsNoneBtn->value(0);
						    constraintPrefsPointcloudBtn->value(0);
						    constraintPrefsWireframeBtn->value(0);
						    constraintPrefsSolidBtn->value(1);
						    break;
      }
}

void P3DUserInterface::setPrefsAtomBVectorsBtns(int button) {
  switch(button) {
	    case 0:	atomPrefsNoBVectorsButton->value(1);
			    atomPrefsCrestBVectorsButton->value(0);
			    atomPrefsAllBVectorsButton->value(0);
			    break;
	    case 1:	atomPrefsNoBVectorsButton->value(0);
			    atomPrefsCrestBVectorsButton->value(0);
			    atomPrefsAllBVectorsButton->value(1);
			    break;
	    case 2:	atomPrefsNoBVectorsButton->value(0);
			    atomPrefsCrestBVectorsButton->value(1);
			    atomPrefsAllBVectorsButton->value(0);
			    break;
      }
}

void P3DUserInterface::setPartialSurfaceRendering(int button) {
  if (button == 0) {
            renderPartiallyBtn->value(1);
       	    renderFullyBtn->value(0);
          }
          else {
            renderPartiallyBtn->value(0);
            renderFullyBtn->value(1);
      }
}

void P3DUserInterface::setPrefsPartialSurfaceRendering(int button) {
  if (button == 0) {
            constraintPrefsPartiallyBtn->value(1);
       	    constraintPrefsFullyBtn->value(0);
          }
          else {
            constraintPrefsPartiallyBtn->value(0);
            constraintPrefsFullyBtn->value(1);
      }
}

void P3DUserInterface::setPrefsIconifyBtns(int button) {
  switch(button) {
	    case 0:	displayPrefsIconifyIndepButton->value(1);
			    displayPrefsIconifyMainButton->value(0);
			    displayPrefsIconifyAnyButton->value(0);
			    break;
	    case 1:	displayPrefsIconifyIndepButton->value(0);
			    displayPrefsIconifyMainButton->value(1);
			    displayPrefsIconifyAnyButton->value(0);
			    break;
	    case 2:	displayPrefsIconifyIndepButton->value(0);
			    displayPrefsIconifyMainButton->value(0);
			    displayPrefsIconifyAnyButton->value(1);
			    break;
      }
}

void P3DUserInterface::setPrefsByteOrderBtns(int button) {
  switch(button) {
	    case 0:	imagePrefsReverseOrder->value(1);
			    imagePrefsNativeOrder->value(0);
			    imagePrefsNormalOrder->value(0);
			    imagePrefsRetainOrder->value(0);
			    break;
	    case 1:	imagePrefsReverseOrder->value(0);
			    imagePrefsNativeOrder->value(1);
			    imagePrefsNormalOrder->value(0);
			    imagePrefsRetainOrder->value(0);
			    break;
	    case 2:	imagePrefsReverseOrder->value(0);
			    imagePrefsNativeOrder->value(0);
			    imagePrefsNormalOrder->value(1);
			    imagePrefsRetainOrder->value(0);
			    break;
	    case 3:	imagePrefsReverseOrder->value(0);
			    imagePrefsNativeOrder->value(0);
			    imagePrefsNormalOrder->value(0);
			    imagePrefsRetainOrder->value(1);
			    break;
      }
}

void P3DUserInterface::setPrefsReorderBtns(int button) {
  switch(button) {
	    case -1:	otherPrefsReorderNeverButton->value(0);
			    otherPrefsReorderAlwaysButton->value(0);
			    otherPrefsReorderPromptButton->value(1);
			    break;
	    case 0:	otherPrefsReorderNeverButton->value(1);
			    otherPrefsReorderAlwaysButton->value(0);
			    otherPrefsReorderPromptButton->value(0);
			    break;
	    case 1:	otherPrefsReorderNeverButton->value(0);
			    otherPrefsReorderAlwaysButton->value(1);
			    otherPrefsReorderPromptButton->value(0);
			    break;
      }
}

void P3DUserInterface::setPrefsVerbosityBtns(int button) {
  switch(button) {
	    case -1:	otherPrefsQuietVerbosityButton->value(1);
			    otherPrefsNormalVerbosityButton->value(0);
			    otherPrefsLoudVerbosityButton->value(0);
			    break;
	    case 0:	otherPrefsQuietVerbosityButton->value(0);
			    otherPrefsNormalVerbosityButton->value(1);
			    otherPrefsLoudVerbosityButton->value(0);
			    break;
	    case 1:	otherPrefsQuietVerbosityButton->value(0);
			    otherPrefsNormalVerbosityButton->value(0);
			    otherPrefsLoudVerbosityButton->value(1);
			    break;
      }
}

void P3DUserInterface::setPrefsBYUOutputBtns(int type) {
  switch(type) {
	    case 0:	otherPrefsBYUTrianglesButton->value(1);
			    otherPrefsBYUQuadsButton->value(0);
			    break;
	    case 1:	otherPrefsBYUTrianglesButton->value(0);
			    otherPrefsBYUQuadsButton->value(1);
			    break;
	    case 2:	otherPrefsBYUModelCoordButton->value(1);
			    otherPrefsBYUWorldCoordButton->value(0);
			    break;
	    case 3:	otherPrefsBYUModelCoordButton->value(0);
			    otherPrefsBYUWorldCoordButton->value(1);
			    break;
      }
}
#ifndef PRODUCTION_VERSION

movable_Fl_Window* P3DUserInterface::make_InterpolatedPrimitiveWindow(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = interpolatedPrimitiveWindow = new movable_Fl_Window(218, 138, "Interpolated Atom");
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_interpolatedPrimitiveWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Value_Slider* o = uSlider = new Fl_Value_Slider(25, 20, 175, 20, "u: ");
      o->type(5);
      o->labelsize(12);
      o->maximum(6);
      o->callback((Fl_Callback*)cb_uSlider);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = vSlider = new Fl_Value_Slider(25, 60, 175, 20, "v: ");
      o->type(5);
      o->labelsize(12);
      o->maximum(6);
      o->callback((Fl_Callback*)cb_vSlider);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Return_Button* o = new Fl_Return_Button(125, 95, 75, 30, "Done");
      o->callback((Fl_Callback*)cb_Done2);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  interpolatedPrimitiveWindow->position(win_X, win_Y);
  if (open) interpolatedPrimitiveWindow->show();
  return w;
}

Fl_Double_Window* P3DUserInterface::make_SubfigureTransformationTestDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = subfigureTransformationTestDialog = new Fl_Double_Window(331, 312, "Subfigure Transformation Test");
    w = o;
    o->color((Fl_Color)48);
    o->callback((Fl_Callback*)cb_subfigureTransformationTestDialog, (void*)(this));
    { Fl_Group* o = new Fl_Group(10, 85, 310, 220);
      o->box(FL_RFLAT_BOX);
      o->color((Fl_Color)31);
      { Fl_Counter* o = hingeRotationCounter = new Fl_Counter(175, 235, 115, 25, "Hinge Rotation");
        o->callback((Fl_Callback*)cb_hingeRotationCounter);
      }
      { Fl_Counter* o = surfaceRotationCounter = new Fl_Counter(40, 235, 110, 25, "Surface Rotation");
        o->callback((Fl_Callback*)cb_surfaceRotationCounter);
      }
      { Fl_Counter* o = subfigureElongationCounter = new Fl_Counter(175, 180, 115, 25, "Elongation");
        o->callback((Fl_Callback*)cb_subfigureElongationCounter);
      }
      { Fl_Counter* o = subfigureScaleCounter = new Fl_Counter(40, 180, 115, 25, "Scale");
        o->callback((Fl_Callback*)cb_subfigureScaleCounter);
      }
      { Fl_Counter* o = uTranslationCounter = new Fl_Counter(40, 120, 115, 25, "U Translation");
        o->callback((Fl_Callback*)cb_uTranslationCounter);
      }
      { Fl_Counter* o = vTranslationCounter = new Fl_Counter(175, 120, 115, 25, "V Translation");
        o->callback((Fl_Callback*)cb_vTranslationCounter);
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(15, 55, 105, 25, "Initialize");
      o->color((Fl_Color)48);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(16);
      o->callback((Fl_Callback*)cb_Initialize);
    }
    { Fl_Button* o = new Fl_Button(10, 5, 295, 25, "Mark a hinge atom, press Initialize, and");
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)48);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = new Fl_Button(10, 25, 295, 25, "then adjust the counters.");
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)48);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  return w;
}

Fl_Double_Window* P3DUserInterface::make_testConstraintsDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = testConstraintsDialog = new Fl_Double_Window(260, 194, "Test Constraints");
    w = o;
    o->callback((Fl_Callback*)cb_testConstraintsDialog, (void*)(this));
    { Fl_Button* o = new Fl_Button(145, 145, 85, 25, "Test Value");
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Test1);
    }
    testConstraintsOutput = new Fl_Value_Output(115, 25, 130, 25, "Penalty value: ");
    { Fl_Value_Input* o = testConstraintsFigureNumberInput = new Fl_Value_Input(115, 75, 40, 25, "Figure number: ");
      o->value(1);
    }
    { Fl_Button* o = new Fl_Button(25, 145, 85, 25, "Setup");
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Setup);
    }
    o->end();
  }
  return w;
}

Fl_Double_Window* P3DUserInterface::make_testSeuratDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = testSeuratDialog = new Fl_Double_Window(260, 140, "Test Seurat");
    w = o;
    o->callback((Fl_Callback*)cb_testSeuratDialog, (void*)(this));
    { Fl_Button* o = new Fl_Button(140, 90, 85, 25, "Print Plist");
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Print3);
    }
    testSeuratFigureNumberInput = new Fl_Value_Input(145, 55, 40, 25, "Figure number: ");
    { Fl_Value_Input* o = testSeuratLevelInput = new Fl_Value_Input(145, 20, 40, 25, "Level of detail: ");
      o->value(4);
    }
    o->end();
  }
  return w;
}

Fl_Double_Window* P3DUserInterface::make_MatchSurfacesDialog(int win_X, int win_Y, bool open) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = matchSurfacesDialog = new Fl_Double_Window(381, 194, "Surface Visualizer Control");
    w = o;
    o->callback((Fl_Callback*)cb_matchSurfacesDialog, (void*)(this));
    { Fl_Value_Slider* o = matchIntensityMinSlider = new Fl_Value_Slider(85, 140, 280, 15, "Intensity min");
      o->type(5);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_matchIntensityMinSlider);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = matchIntensityMaxSlider = new Fl_Value_Slider(85, 165, 280, 15, "Intensity max");
      o->type(5);
      o->labelsize(12);
      o->value(1);
      o->callback((Fl_Callback*)cb_matchIntensityMaxSlider);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Light_Button* o = showMatchSurfacesButton = new Fl_Light_Button(195, 25, 80, 20, "Display");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_showMatchSurfacesButton);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Check_Button* o = tieToImageSlidersButton = new Fl_Check_Button(125, 100, 20, 25, "Use Display Window intensity sliders");
      o->down_box(FL_EMBOSSED_BOX);
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_tieToImageSlidersButton);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Group* o = new Fl_Group(15, 25, 100, 100, "Surface Type");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Check_Button* o = matchSurfaceNoneBtn = new Fl_Check_Button(20, 25, 55, 25, "None");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_matchSurfaceNoneBtn);
      }
      { Fl_Check_Button* o = matchSurfacePointcloudBtn = new Fl_Check_Button(20, 50, 85, 25, "Point cloud");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_matchSurfacePointcloudBtn);
      }
      { Fl_Check_Button* o = matchSurfaceWireframeBtn = new Fl_Check_Button(20, 75, 85, 25, "Wire frame");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_matchSurfaceWireframeBtn);
      }
      { Fl_Check_Button* o = matchSurfaceSolidBtn = new Fl_Check_Button(20, 100, 55, 25, "Solid");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->selection_color((Fl_Color)1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_matchSurfaceSolidBtn);
      }
      setSurfaceTypeBtns(modelView->getSurfaceStyle());
      o->end();
    }
    { Fl_Button* o = matchSurfaceSerialName = new Fl_Button(125, 45, 240, 20);
      o->box(FL_NO_BOX);
      o->labelsize(10);
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    }
    { Fl_Counter* o = matchSurfaceSerialNumber = new Fl_Counter(125, 25, 50, 20, "Data Set");
      o->type(1);
      o->labelsize(10);
      o->minimum(0);
      o->maximum(10);
      o->step(1);
      o->textsize(12);
      o->callback((Fl_Callback*)cb_matchSurfaceSerialNumber);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Choice* o = matchSurfaceColormapChoice = new Fl_Choice(260, 75, 105, 20, "Colormap");
      o->box(FL_UP_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->callback((Fl_Callback*)cb_matchSurfaceColormapChoice);
    }
    { Fl_Button* o = new Fl_Button(295, 25, 70, 20, "Discard");
      o->callback((Fl_Callback*)cb_Discard);
    }
    { Fl_Light_Button* o = plainMatchSurfacesButton = new Fl_Light_Button(125, 75, 60, 20, "Plain");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_plainMatchSurfacesButton);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  matchSurfacesDialog->position(win_X, win_Y);
    if (open) matchSurfacesDialog->show();
  return w;
}

movable_Fl_Window* P3DUserInterface::make_RegularizerWindow(int win_X, int win_Y, bool open) {
  movable_Fl_Window* w;
  { movable_Fl_Window* o = regularizerWindow = new movable_Fl_Window(265, 159);
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_regularizerWindow, (void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_CHANGED);
    { Fl_Return_Button* o = new Fl_Return_Button(180, 120, 70, 30, "Close");
      o->callback((Fl_Callback*)cb_Close2);
    }
    { Fl_Value_Slider* o = regularizeStepsizeSlider = new Fl_Value_Slider(65, 40, 180, 25, "Stepsize");
      o->type(5);
      o->labelsize(12);
      o->minimum(0.01);
      o->value(0.01);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = regularizeIterationSlider = new Fl_Value_Slider(65, 75, 180, 25, "Iterations");
      o->type(5);
      o->labelsize(12);
      o->maximum(100);
      o->step(1);
      o->value(40);
      o->align(FL_ALIGN_LEFT);
    }
    new Fl_Box(20, 0, 180, 30, "Regularize Model");
    { Fl_Button* o = new Fl_Button(20, 110, 110, 30, "Regularize");
      o->callback((Fl_Callback*)cb_Regularize1);
    }
    o->end();
  }
  regularizerWindow->position(win_X, win_Y);
    if (open) regularizerWindow->show();
  return w;
}
#endif

P3DUserInterface::~P3DUserInterface() {
  delete control;
  control = NULL;
  delete callback;
  callback = NULL;
  delete mainWindow;
  mainWindow = NULL;
  delete modelView;
  modelView = NULL;
  delete modelWindow;
  modelWindow = NULL;
}
