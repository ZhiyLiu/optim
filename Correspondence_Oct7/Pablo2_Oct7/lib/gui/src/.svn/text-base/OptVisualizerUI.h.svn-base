// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef OptVisualizerUI_h
#define OptVisualizerUI_h
#include <FL/Fl.H>
#include "OptVisualizerUIDefs.h"
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Input.H>

class OptVisualizerUI {
public:
  friend class OptVisualizerCallback;
  OptVisualizerUI(int win_X, int win_Y);
  movable_Fl_Window *optVisualizerUIWindow;
private:
  void cb_optVisualizerUIWindow_i(movable_Fl_Window*, void*);
  static void cb_optVisualizerUIWindow(movable_Fl_Window*, void*);
public:
  Fl_Group *chartGrp;
  Fl_Value_Output *minOut;
  Fl_Value_Output *maxOut;
  Fl_Group *chartControlsGrp;
  Fl_Choice *categoryChooser;
private:
  void cb_categoryChooser_i(Fl_Choice*, void*);
  static void cb_categoryChooser(Fl_Choice*, void*);
  static Fl_Menu_Item menu_categoryChooser[];
public:
  Fl_Value_Input *minIndexInput;
private:
  void cb_minIndexInput_i(Fl_Value_Input*, void*);
  static void cb_minIndexInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *maxIndexInput;
private:
  void cb_maxIndexInput_i(Fl_Value_Input*, void*);
  static void cb_maxIndexInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *stepSizeInput;
private:
  void cb_stepSizeInput_i(Fl_Value_Input*, void*);
  static void cb_stepSizeInput(Fl_Value_Input*, void*);
  void cb_Origin_i(Fl_Round_Button*, void*);
  static void cb_Origin(Fl_Round_Button*, void*);
  void cb_Grad_i(Fl_Round_Button*, void*);
  static void cb_Grad(Fl_Round_Button*, void*);
  void cb_Grad1_i(Fl_Round_Button*, void*);
  static void cb_Grad1(Fl_Round_Button*, void*);
  void cb_Diff_i(Fl_Round_Button*, void*);
  static void cb_Diff(Fl_Round_Button*, void*);
  void cb_Diff1_i(Fl_Round_Button*, void*);
  static void cb_Diff1(Fl_Round_Button*, void*);
  void cb_Projection_i(Fl_Round_Button*, void*);
  static void cb_Projection(Fl_Round_Button*, void*);
public:
  Fl_Group *plotGrp;
  Fl_Button *updateBtn;
private:
  void cb_updateBtn_i(Fl_Button*, void*);
  static void cb_updateBtn(Fl_Button*, void*);
public:
  Fl_Button *resetBtn;
private:
  void cb_resetBtn_i(Fl_Button*, void*);
  static void cb_resetBtn(Fl_Button*, void*);
public:
  Fl_Round_Button *scalingBtn;
private:
  void cb_scalingBtn_i(Fl_Round_Button*, void*);
  static void cb_scalingBtn(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *showModelBtn;
private:
  void cb_showModelBtn_i(Fl_Round_Button*, void*);
  static void cb_showModelBtn(Fl_Round_Button*, void*);
public:
  Fl_Input *originInput;
  Fl_Input *projectionInput;
private:
  void cb_projectionInput_i(Fl_Input*, void*);
  static void cb_projectionInput(Fl_Input*, void*);
public:
  Fl_Value_Input *x1MagnitudeInput;
  Fl_Input *x1Input;
  Fl_Value_Input *x2MagnitudeInput;
  Fl_Input *x2Input;
  Fl_Choice *surfaceChoice;
private:
  void cb_surfaceChoice_i(Fl_Choice*, void*);
  static void cb_surfaceChoice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_surfaceChoice[];
public:
  Fl_Choice *commandChoice;
private:
  void cb_commandChoice_i(Fl_Choice*, void*);
  static void cb_commandChoice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_commandChoice[];
public:
  Fl_Group *arrowGrp;
  Fl_Button *upArrowBtn;
private:
  void cb_upArrowBtn_i(Fl_Button*, void*);
  static void cb_upArrowBtn(Fl_Button*, void*);
public:
  Fl_Button *downArrowBtn;
private:
  void cb_downArrowBtn_i(Fl_Button*, void*);
  static void cb_downArrowBtn(Fl_Button*, void*);
public:
  Fl_Button *leftArrowBtn;
private:
  void cb_leftArrowBtn_i(Fl_Button*, void*);
  static void cb_leftArrowBtn(Fl_Button*, void*);
public:
  Fl_Button *rightArrowBrn;
private:
  void cb_rightArrowBrn_i(Fl_Button*, void*);
  static void cb_rightArrowBrn(Fl_Button*, void*);
public:
  Fl_Group *attribute;
  Fl_Button *attributeBtn0;
private:
  void cb_attributeBtn0_i(Fl_Button*, void*);
  static void cb_attributeBtn0(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn1;
private:
  void cb_attributeBtn1_i(Fl_Button*, void*);
  static void cb_attributeBtn1(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn2;
private:
  void cb_attributeBtn2_i(Fl_Button*, void*);
  static void cb_attributeBtn2(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn3;
private:
  void cb_attributeBtn3_i(Fl_Button*, void*);
  static void cb_attributeBtn3(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn4;
private:
  void cb_attributeBtn4_i(Fl_Button*, void*);
  static void cb_attributeBtn4(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn5;
private:
  void cb_attributeBtn5_i(Fl_Button*, void*);
  static void cb_attributeBtn5(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn6;
private:
  void cb_attributeBtn6_i(Fl_Button*, void*);
  static void cb_attributeBtn6(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn7;
private:
  void cb_attributeBtn7_i(Fl_Button*, void*);
  static void cb_attributeBtn7(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn8;
private:
  void cb_attributeBtn8_i(Fl_Button*, void*);
  static void cb_attributeBtn8(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn9;
private:
  void cb_attributeBtn9_i(Fl_Button*, void*);
  static void cb_attributeBtn9(Fl_Button*, void*);
public:
  Fl_Button *attributeBtn10;
private:
  void cb_attributeBtn10_i(Fl_Button*, void*);
  static void cb_attributeBtn10(Fl_Button*, void*);
public:
  void make_chart(P3DControl * ctrl);
  void make_plot(P3DControl * ctrl, P3DUserInterfaceCallback * uic);
  void updateChart();
  void setP3DUserInterface(P3DUserInterface * ui);
  void show();
  void hide();
  void init();
  OptVisualizerCallback * callback;
private:
  LogManagerChart * newChart;
  Plot3DWindowWrapper * plot3DWrapper;
  P3DUserInterface * p3dUI;
  P3DControl * control;
};
#endif
