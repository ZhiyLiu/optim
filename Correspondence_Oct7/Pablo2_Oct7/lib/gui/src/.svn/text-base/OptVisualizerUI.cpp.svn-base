// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "OptVisualizerUI.h"

void OptVisualizerUI::cb_optVisualizerUIWindow_i(movable_Fl_Window*, void*) {
  callback->hide();
}
void OptVisualizerUI::cb_optVisualizerUIWindow(movable_Fl_Window* o, void* v) {
  ((OptVisualizerUI*)(o->user_data()))->cb_optVisualizerUIWindow_i(o,v);
}

void OptVisualizerUI::cb_categoryChooser_i(Fl_Choice*, void*) {
  callback->categoryChange();
}
void OptVisualizerUI::cb_categoryChooser(Fl_Choice* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_categoryChooser_i(o,v);
}

Fl_Menu_Item OptVisualizerUI::menu_categoryChooser[] = {
 {"Gradient", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Search", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exploration", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Projection", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void OptVisualizerUI::cb_minIndexInput_i(Fl_Value_Input*, void*) {
  callback->rangeChange();
}
void OptVisualizerUI::cb_minIndexInput(Fl_Value_Input* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_minIndexInput_i(o,v);
}

void OptVisualizerUI::cb_maxIndexInput_i(Fl_Value_Input*, void*) {
  callback->rangeChange();
}
void OptVisualizerUI::cb_maxIndexInput(Fl_Value_Input* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_maxIndexInput_i(o,v);
}

void OptVisualizerUI::cb_stepSizeInput_i(Fl_Value_Input*, void*) {
  callback->rangeChange();
}
void OptVisualizerUI::cb_stepSizeInput(Fl_Value_Input* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_stepSizeInput_i(o,v);
}

void OptVisualizerUI::cb_Origin_i(Fl_Round_Button*, void*) {
  callback->selectionModeChange(0);
}
void OptVisualizerUI::cb_Origin(Fl_Round_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_Origin_i(o,v);
}

void OptVisualizerUI::cb_Grad_i(Fl_Round_Button*, void*) {
  callback->selectionModeChange(1);
}
void OptVisualizerUI::cb_Grad(Fl_Round_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_Grad_i(o,v);
}

void OptVisualizerUI::cb_Grad1_i(Fl_Round_Button*, void*) {
  callback->selectionModeChange(2);
}
void OptVisualizerUI::cb_Grad1(Fl_Round_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_Grad1_i(o,v);
}

void OptVisualizerUI::cb_Diff_i(Fl_Round_Button*, void*) {
  callback->selectionModeChange(3);
}
void OptVisualizerUI::cb_Diff(Fl_Round_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_Diff_i(o,v);
}

void OptVisualizerUI::cb_Diff1_i(Fl_Round_Button*, void*) {
  callback->selectionModeChange(4);
}
void OptVisualizerUI::cb_Diff1(Fl_Round_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_Diff1_i(o,v);
}

void OptVisualizerUI::cb_Projection_i(Fl_Round_Button*, void*) {
  callback->selectionModeChange(5);
}
void OptVisualizerUI::cb_Projection(Fl_Round_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_Projection_i(o,v);
}

void OptVisualizerUI::cb_updateBtn_i(Fl_Button*, void*) {
  callback->updateBtnPressed();
}
void OptVisualizerUI::cb_updateBtn(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->user_data()))->cb_updateBtn_i(o,v);
}

void OptVisualizerUI::cb_resetBtn_i(Fl_Button*, void*) {
  callback->resetBtnPressed();
}
void OptVisualizerUI::cb_resetBtn(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->user_data()))->cb_resetBtn_i(o,v);
}

void OptVisualizerUI::cb_scalingBtn_i(Fl_Round_Button*, void*) {
  callback->scalingBtnPressed();
}
void OptVisualizerUI::cb_scalingBtn(Fl_Round_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->user_data()))->cb_scalingBtn_i(o,v);
}

void OptVisualizerUI::cb_showModelBtn_i(Fl_Round_Button*, void*) {
  callback->showModelBtnPressed();
}
void OptVisualizerUI::cb_showModelBtn(Fl_Round_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->user_data()))->cb_showModelBtn_i(o,v);
}

void OptVisualizerUI::cb_projectionInput_i(Fl_Input*, void*) {
  callback->projectionChanged();
}
void OptVisualizerUI::cb_projectionInput(Fl_Input* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->user_data()))->cb_projectionInput_i(o,v);
}

void OptVisualizerUI::cb_surfaceChoice_i(Fl_Choice*, void*) {
  callback->surfaceChanged();
}
void OptVisualizerUI::cb_surfaceChoice(Fl_Choice* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->user_data()))->cb_surfaceChoice_i(o,v);
}

Fl_Menu_Item OptVisualizerUI::menu_surfaceChoice[] = {
 {"Geometry", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Image Match", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Objective Function", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Param 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Param 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Param 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void OptVisualizerUI::cb_commandChoice_i(Fl_Choice*, void*) {
  callback->commandChanged();
}
void OptVisualizerUI::cb_commandChoice(Fl_Choice* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->user_data()))->cb_commandChoice_i(o,v);
}

Fl_Menu_Item OptVisualizerUI::menu_commandChoice[] = {
 {"---", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Selection->Center", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Reseed Optimizer", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Export Model", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Export Data", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load as Center", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load as X1", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load as X2", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load as Projection", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void OptVisualizerUI::cb_upArrowBtn_i(Fl_Button*, void*) {
  callback->arrowBtnPressed(0);
}
void OptVisualizerUI::cb_upArrowBtn(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_upArrowBtn_i(o,v);
}

void OptVisualizerUI::cb_downArrowBtn_i(Fl_Button*, void*) {
  callback->arrowBtnPressed(1);
}
void OptVisualizerUI::cb_downArrowBtn(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_downArrowBtn_i(o,v);
}

void OptVisualizerUI::cb_leftArrowBtn_i(Fl_Button*, void*) {
  callback->arrowBtnPressed(2);
}
void OptVisualizerUI::cb_leftArrowBtn(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_leftArrowBtn_i(o,v);
}

void OptVisualizerUI::cb_rightArrowBrn_i(Fl_Button*, void*) {
  callback->arrowBtnPressed(3);
}
void OptVisualizerUI::cb_rightArrowBrn(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_rightArrowBrn_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn0_i(Fl_Button*, void*) {
  callback->toggleAttribute(0);
}
void OptVisualizerUI::cb_attributeBtn0(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn0_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn1_i(Fl_Button*, void*) {
  callback->toggleAttribute(1);
}
void OptVisualizerUI::cb_attributeBtn1(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn1_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn2_i(Fl_Button*, void*) {
  callback->toggleAttribute(2);
}
void OptVisualizerUI::cb_attributeBtn2(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn2_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn3_i(Fl_Button*, void*) {
  callback->toggleAttribute(3);
}
void OptVisualizerUI::cb_attributeBtn3(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn3_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn4_i(Fl_Button*, void*) {
  callback->toggleAttribute(4);
}
void OptVisualizerUI::cb_attributeBtn4(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn4_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn5_i(Fl_Button*, void*) {
  callback->toggleAttribute(5);
}
void OptVisualizerUI::cb_attributeBtn5(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn5_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn6_i(Fl_Button*, void*) {
  callback->toggleAttribute(6);
}
void OptVisualizerUI::cb_attributeBtn6(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn6_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn7_i(Fl_Button*, void*) {
  callback->toggleAttribute(7);
}
void OptVisualizerUI::cb_attributeBtn7(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn7_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn8_i(Fl_Button*, void*) {
  callback->toggleAttribute(8);
}
void OptVisualizerUI::cb_attributeBtn8(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn8_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn9_i(Fl_Button*, void*) {
  callback->toggleAttribute(9);
}
void OptVisualizerUI::cb_attributeBtn9(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn9_i(o,v);
}

void OptVisualizerUI::cb_attributeBtn10_i(Fl_Button*, void*) {
  callback->toggleAttribute(10);
}
void OptVisualizerUI::cb_attributeBtn10(Fl_Button* o, void* v) {
  ((OptVisualizerUI*)(o->parent()->parent()->user_data()))->cb_attributeBtn10_i(o,v);
}
#if OPTIMIZATION_VISUALIZER

OptVisualizerUI::OptVisualizerUI(int win_X, int win_Y) {
  movable_Fl_Window* w;
  control = NULL;
    newChart = NULL;
    plot3DWrapper = NULL;
    callback = new OptVisualizerCallback(this);
  { movable_Fl_Window* o = optVisualizerUIWindow = new movable_Fl_Window(956, 482, "Optimization Visualizer");
    w = o;
    o->box(FL_THIN_DOWN_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->callback((Fl_Callback*)cb_optVisualizerUIWindow, (void*)(this));
    o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    o->when(FL_WHEN_RELEASE);
    { Fl_Group* o = chartGrp = new Fl_Group(5, 5, 390, 270);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)43);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      o->end();
    }
    { Fl_Value_Output* o = minOut = new Fl_Value_Output(425, 240, 48, 25, "Min:");
      o->box(FL_FLAT_BOX);
      o->labelsize(12);
      o->step(0.001);
    }
    { Fl_Value_Output* o = maxOut = new Fl_Value_Output(425, 15, 48, 25, "Max:");
      o->box(FL_FLAT_BOX);
      o->labelsize(12);
      o->step(0.001);
    }
    { Fl_Group* o = chartControlsGrp = new Fl_Group(15, 390, 260, 80);
      { Fl_Choice* o = categoryChooser = new Fl_Choice(105, 395, 95, 20, "Category");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_categoryChooser);
        o->menu(menu_categoryChooser);
      }
      { Fl_Value_Input* o = minIndexInput = new Fl_Value_Input(29, 426, 48, 25, "Min Index");
        o->labelsize(12);
        o->maximum(1e+06);
        o->step(1);
        o->callback((Fl_Callback*)cb_minIndexInput);
        o->align(FL_ALIGN_BOTTOM);
      }
      { Fl_Value_Input* o = maxIndexInput = new Fl_Value_Input(125, 426, 48, 25, "Max Index");
        o->labelsize(12);
        o->minimum(-1);
        o->maximum(1e+06);
        o->step(1);
        o->value(-1);
        o->callback((Fl_Callback*)cb_maxIndexInput);
        o->align(FL_ALIGN_BOTTOM);
      }
      { Fl_Value_Input* o = stepSizeInput = new Fl_Value_Input(217, 426, 48, 25, "Step Size");
        o->labelsize(12);
        o->minimum(1);
        o->maximum(100);
        o->step(1);
        o->value(17);
        o->callback((Fl_Callback*)cb_stepSizeInput);
        o->align(FL_ALIGN_BOTTOM);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(305, 373, 90, 102, "Selection Mode");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Round_Button* o = new Fl_Round_Button(305, 373, 25, 25, "Origin");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Origin);
        o->align(FL_ALIGN_RIGHT);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 388, 25, 25, "Grad->X1");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Grad);
        o->align(FL_ALIGN_RIGHT);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 403, 25, 25, "Grad->X2");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Grad1);
        o->align(FL_ALIGN_RIGHT);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 418, 25, 25, "Diff->X1");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Diff);
        o->align(FL_ALIGN_RIGHT);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 433, 25, 25, "Diff->X2");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Diff1);
        o->align(FL_ALIGN_RIGHT);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 448, 25, 25, "Projection");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Projection);
        o->align(FL_ALIGN_RIGHT);
      }
      o->end();
    }
    { Fl_Group* o = plotGrp = new Fl_Group(480, 5, 470, 370);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)43);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      o->end();
    }
    { Fl_Button* o = updateBtn = new Fl_Button(660, 380, 80, 20, "Update");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_updateBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = resetBtn = new Fl_Button(660, 405, 80, 20, "Reset");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_resetBtn);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Round_Button* o = scalingBtn = new Fl_Round_Button(660, 430, 80, 20, "Scaling");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_scalingBtn);
    }
    { Fl_Round_Button* o = showModelBtn = new Fl_Round_Button(660, 455, 90, 20, "Show Model");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->color((Fl_Color)1);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_showModelBtn);
    }
    { Fl_Input* o = originInput = new Fl_Input(475, 380, 178, 20, "Origin");
      o->labelsize(12);
    }
    { Fl_Input* o = projectionInput = new Fl_Input(475, 455, 178, 20, "Projection");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_projectionInput);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Value_Input* o = x1MagnitudeInput = new Fl_Value_Input(475, 405, 35, 20, "X1");
      o->labelsize(12);
      o->maximum(100);
      o->step(0.01);
      o->value(1);
    }
    x1Input = new Fl_Input(520, 405, 133, 20, "*");
    { Fl_Value_Input* o = x2MagnitudeInput = new Fl_Value_Input(475, 430, 35, 20, "X2");
      o->labelsize(12);
      o->maximum(100);
      o->step(0.01);
      o->value(1);
    }
    x2Input = new Fl_Input(520, 430, 133, 20, "*");
    { Fl_Choice* o = surfaceChoice = new Fl_Choice(815, 380, 130, 20, "Surface");
      o->down_box(FL_BORDER_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_surfaceChoice);
      o->menu(menu_surfaceChoice);
    }
    { Fl_Choice* o = commandChoice = new Fl_Choice(815, 405, 130, 20, "Command");
      o->down_box(FL_BORDER_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_commandChoice);
      o->menu(menu_commandChoice);
    }
    { Fl_Group* o = arrowGrp = new Fl_Group(825, 425, 90, 55);
      { Fl_Button* o = upArrowBtn = new Fl_Button(860, 430, 20, 20, "@-18UpArrow");
        o->labelsize(12);
        o->labelcolor((Fl_Color)1);
        o->callback((Fl_Callback*)cb_upArrowBtn);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = downArrowBtn = new Fl_Button(860, 455, 20, 20, "@-12UpArrow");
        o->labelsize(12);
        o->labelcolor((Fl_Color)1);
        o->callback((Fl_Callback*)cb_downArrowBtn);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = leftArrowBtn = new Fl_Button(835, 440, 20, 20, "@-14UpArrow");
        o->labelsize(12);
        o->labelcolor((Fl_Color)1);
        o->callback((Fl_Callback*)cb_leftArrowBtn);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = rightArrowBrn = new Fl_Button(885, 440, 20, 20, "@-1UpArrow");
        o->labelsize(12);
        o->labelcolor((Fl_Color)1);
        o->callback((Fl_Callback*)cb_rightArrowBrn);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      o->end();
    }
    { Fl_Group* o = attribute = new Fl_Group(5, 275, 395, 110);
      { Fl_Button* o = attributeBtn0 = new Fl_Button(15, 280, 110, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn0);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn1 = new Fl_Button(135, 280, 110, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn1);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn2 = new Fl_Button(255, 280, 130, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn2);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn3 = new Fl_Button(15, 305, 110, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn3);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn4 = new Fl_Button(135, 305, 110, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn4);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn5 = new Fl_Button(255, 305, 130, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn5);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn6 = new Fl_Button(15, 330, 110, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn6);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn7 = new Fl_Button(135, 330, 110, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn7);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn8 = new Fl_Button(255, 330, 130, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn8);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn9 = new Fl_Button(15, 355, 110, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn9);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = attributeBtn10 = new Fl_Button(135, 355, 110, 25);
        o->type(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_attributeBtn10);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      o->end();
    }
    optVisualizerUIWindow->resize(win_X, win_Y, 956, 482);
    o->end();
  }
}

void OptVisualizerUI::make_chart(P3DControl * ctrl) {
  newChart = new LogManagerChart(chartGrp->x() + 1, chartGrp->y() + 1,
	chartGrp->w() - 2, chartGrp->h() - 2);
    newChart->setControl(ctrl);
}

void OptVisualizerUI::make_plot(P3DControl * ctrl, P3DUserInterfaceCallback * uic) {
  plot3DWrapper = new Plot3DWindowWrapper(plotGrp->x() + 1, plotGrp->y() + 1,
	plotGrp->w() - 2, plotGrp->h() - 2, ctrl);
    plot3DWrapper->setP3DUIC(uic);
    plot3DWrapper->setWidgets(originInput, x1Input, x1MagnitudeInput, x2Input,
	x2MagnitudeInput, projectionInput);
    newChart->setThreedView(plot3DWrapper);
}

void OptVisualizerUI::updateChart() {
  if (newChart) {
	newChart->calculateBounds();
	maxOut->value(newChart->maxY);
	maxOut->redraw();
	minOut->value(newChart->minY);
	minOut->redraw();
	newChart->redraw();
    }
}

void OptVisualizerUI::setP3DUserInterface(P3DUserInterface * ui) {
  p3dUI = ui;
}

void OptVisualizerUI::show() {
  if (callback)
	callback->show();
}

void OptVisualizerUI::hide() {
  if (callback)
	callback->hide();
}

void OptVisualizerUI::init() {
  if (! callback)
	return;
     if (! p3dUI)
	return;
     callback->init();
}
#endif
