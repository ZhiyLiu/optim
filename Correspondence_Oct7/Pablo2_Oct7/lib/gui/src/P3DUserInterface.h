// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef P3DUserInterface_h
#define P3DUserInterface_h
#include <FL/Fl.H>
#include "P3DUserInterfaceCallback.h"
#include "movable_Fl_Window.h"
#include "make_windows.h"
#include <FL/Fl_Text_Display.H>
#include "Fl_Aspect_Ratio_Group.h"
#include "P3DView.h"
#include <FL/Fl_Button.H>
#include "ControlParms.h"
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Return_Button.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Color_Chooser.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Value_Output.H>
#include "P3DCutPlaneView.h"
#include <FL/Fl_File_Browser.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Choice.H>

class P3DUserInterface {
public:
  P3DUserInterface(int windowPropsPosn[WIN_PROPS_LEN][2], bool windowPropsOpen[WIN_PROPS_LEN]);
  movable_Fl_Window *modelWindow;
private:
  void cb_modelWindow_i(movable_Fl_Window*, void*);
  static void cb_modelWindow(movable_Fl_Window*, void*);
public:
  Fl_Aspect_Ratio_Group *taskDisplayGrp;
  Fl_Text_Display *taskDisplayText;
  Fl_Aspect_Ratio_Group *modelDisplayGrp;
  P3DView *modelView;
  Fl_Aspect_Ratio_Group *modelWindowButtonGrp;
  Fl_Button *axialViewBtn;
private:
  void cb_axialViewBtn_i(Fl_Button*, void*);
  static void cb_axialViewBtn(Fl_Button*, void*);
public:
  Fl_Button *saggitalViewBtn;
private:
  void cb_saggitalViewBtn_i(Fl_Button*, void*);
  static void cb_saggitalViewBtn(Fl_Button*, void*);
public:
  Fl_Button *coronalViewBtn;
private:
  void cb_coronalViewBtn_i(Fl_Button*, void*);
  static void cb_coronalViewBtn(Fl_Button*, void*);
public:
  Fl_Button *centerBtn;
private:
  void cb_centerBtn_i(Fl_Button*, void*);
  static void cb_centerBtn(Fl_Button*, void*);
public:
  Fl_Button *rotateLeft90;
private:
  void cb_rotateLeft90_i(Fl_Button*, void*);
  static void cb_rotateLeft90(Fl_Button*, void*);
public:
  Fl_Button *rotateHorizontal180;
private:
  void cb_rotateHorizontal180_i(Fl_Button*, void*);
  static void cb_rotateHorizontal180(Fl_Button*, void*);
public:
  Fl_Button *rotateVertical180;
private:
  void cb_rotateVertical180_i(Fl_Button*, void*);
  static void cb_rotateVertical180(Fl_Button*, void*);
public:
  Fl_Button *rotateRight90;
private:
  void cb_rotateRight90_i(Fl_Button*, void*);
  static void cb_rotateRight90(Fl_Button*, void*);
public:
  movable_Fl_Window *mainWindow;
private:
  void cb_mainWindow_i(movable_Fl_Window*, void*);
  static void cb_mainWindow(movable_Fl_Window*, void*);
public:
  Fl_Menu_Bar *menuBar;
  static Fl_Menu_Item menu_menuBar[];
private:
  void cb_New_i(Fl_Menu_*, void*);
  static void cb_New(Fl_Menu_*, void*);
  void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
  void cb_Load1_i(Fl_Menu_*, void*);
  static void cb_Load1(Fl_Menu_*, void*);
  void cb_Save_i(Fl_Menu_*, void*);
  static void cb_Save(Fl_Menu_*, void*);
  void cb_Save1_i(Fl_Menu_*, void*);
  static void cb_Save1(Fl_Menu_*, void*);
  void cb_Export_i(Fl_Menu_*, void*);
  static void cb_Export(Fl_Menu_*, void*);
  void cb_Export1_i(Fl_Menu_*, void*);
  static void cb_Export1(Fl_Menu_*, void*);
  void cb_Load2_i(Fl_Menu_*, void*);
  static void cb_Load2(Fl_Menu_*, void*);
  void cb_Load3_i(Fl_Menu_*, void*);
  static void cb_Load3(Fl_Menu_*, void*);
  void cb_Clear_i(Fl_Menu_*, void*);
  static void cb_Clear(Fl_Menu_*, void*);
  void cb_Save2_i(Fl_Menu_*, void*);
  static void cb_Save2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *loadDistMap;
private:
  void cb_loadDistMap_i(Fl_Menu_*, void*);
  static void cb_loadDistMap(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *imageToDistanceMap;
private:
  void cb_imageToDistanceMap_i(Fl_Menu_*, void*);
  static void cb_imageToDistanceMap(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *loadLandMarkModel;
private:
  void cb_loadLandMarkModel_i(Fl_Menu_*, void*);
  static void cb_loadLandMarkModel(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *clearLandMarkModel;
private:
  void cb_clearLandMarkModel_i(Fl_Menu_*, void*);
  static void cb_clearLandMarkModel(Fl_Menu_*, void*);
  void cb_Load4_i(Fl_Menu_*, void*);
  static void cb_Load4(Fl_Menu_*, void*);
  void cb_Generate_i(Fl_Menu_*, void*);
  static void cb_Generate(Fl_Menu_*, void*);
  void cb_Save3_i(Fl_Menu_*, void*);
  static void cb_Save3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *fileMenuLoadPCASurface;
private:
  void cb_fileMenuLoadPCASurface_i(Fl_Menu_*, void*);
  static void cb_fileMenuLoadPCASurface(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *fileMenuLoadPCAResidues;
private:
  void cb_fileMenuLoadPCAResidues_i(Fl_Menu_*, void*);
  static void cb_fileMenuLoadPCAResidues(Fl_Menu_*, void*);
  void cb_Exit_i(Fl_Menu_*, void*);
  static void cb_Exit(Fl_Menu_*, void*);
  void cb_Undo_i(Fl_Menu_*, void*);
  static void cb_Undo(Fl_Menu_*, void*);
  void cb_Redo_i(Fl_Menu_*, void*);
  static void cb_Redo(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *addQuadFigurePulldown;
private:
  void cb_addQuadFigurePulldown_i(Fl_Menu_*, void*);
  static void cb_addQuadFigurePulldown(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *attachSubfigurePulldown;
private:
  void cb_attachSubfigurePulldown_i(Fl_Menu_*, void*);
  static void cb_attachSubfigurePulldown(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *detachSubfigurePulldown;
private:
  void cb_detachSubfigurePulldown_i(Fl_Menu_*, void*);
  static void cb_detachSubfigurePulldown(Fl_Menu_*, void*);
  void cb_Remove_i(Fl_Menu_*, void*);
  static void cb_Remove(Fl_Menu_*, void*);
  void cb_Reorder_i(Fl_Menu_*, void*);
  static void cb_Reorder(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *editLandmarksMenuItem;
private:
  void cb_editLandmarksMenuItem_i(Fl_Menu_*, void*);
  static void cb_editLandmarksMenuItem(Fl_Menu_*, void*);
  void cb_Model_i(Fl_Menu_*, void*);
  static void cb_Model(Fl_Menu_*, void*);
  void cb_Select_i(Fl_Menu_*, void*);
  static void cb_Select(Fl_Menu_*, void*);
  void cb_Deselect_i(Fl_Menu_*, void*);
  static void cb_Deselect(Fl_Menu_*, void*);
  void cb_Toggle_i(Fl_Menu_*, void*);
  static void cb_Toggle(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *applyTransMenuItem;
private:
  void cb_applyTransMenuItem_i(Fl_Menu_*, void*);
  static void cb_applyTransMenuItem(Fl_Menu_*, void*);
  void cb_Atom_i(Fl_Menu_*, void*);
  static void cb_Atom(Fl_Menu_*, void*);
  void cb_Figure_i(Fl_Menu_*, void*);
  static void cb_Figure(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *elongationPulldown;
private:
  void cb_elongationPulldown_i(Fl_Menu_*, void*);
  static void cb_elongationPulldown(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *atomEditorPulldown;
private:
  void cb_atomEditorPulldown_i(Fl_Menu_*, void*);
  static void cb_atomEditorPulldown(Fl_Menu_*, void*);
  void cb_Copy_i(Fl_Menu_*, void*);
  static void cb_Copy(Fl_Menu_*, void*);
  void cb_Paste_i(Fl_Menu_*, void*);
  static void cb_Paste(Fl_Menu_*, void*);
  void cb_Mirror_i(Fl_Menu_*, void*);
  static void cb_Mirror(Fl_Menu_*, void*);
  void cb_Gaussian_i(Fl_Menu_*, void*);
  static void cb_Gaussian(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *constraintsPulldown;
private:
  void cb_constraintsPulldown_i(Fl_Menu_*, void*);
  static void cb_constraintsPulldown(Fl_Menu_*, void*);
  void cb_Preferences_i(Fl_Menu_*, void*);
  static void cb_Preferences(Fl_Menu_*, void*);
  void cb_Display_i(Fl_Menu_*, void*);
  static void cb_Display(Fl_Menu_*, void*);
  void cb_Model1_i(Fl_Menu_*, void*);
  static void cb_Model1(Fl_Menu_*, void*);
  void cb_Atom1_i(Fl_Menu_*, void*);
  static void cb_Atom1(Fl_Menu_*, void*);
  void cb_Visibility_i(Fl_Menu_*, void*);
  static void cb_Visibility(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *windowsOptControlWin;
private:
  void cb_windowsOptControlWin_i(Fl_Menu_*, void*);
  static void cb_windowsOptControlWin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *windowsOptSettingsWin;
private:
  void cb_windowsOptSettingsWin_i(Fl_Menu_*, void*);
  static void cb_windowsOptSettingsWin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *windowsOptVisWin;
private:
  void cb_windowsOptVisWin_i(Fl_Menu_*, void*);
  static void cb_windowsOptVisWin(Fl_Menu_*, void*);
  void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *runScriptMenuItem;
private:
  void cb_runScriptMenuItem_i(Fl_Menu_*, void*);
  static void cb_runScriptMenuItem(Fl_Menu_*, void*);
  void cb_Output_i(Fl_Menu_*, void*);
  static void cb_Output(Fl_Menu_*, void*);
  void cb_Export2_i(Fl_Menu_*, void*);
  static void cb_Export2(Fl_Menu_*, void*);
  void cb_Model2_i(Fl_Menu_*, void*);
  static void cb_Model2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *makeMovieToggle;
private:
  void cb_makeMovieToggle_i(Fl_Menu_*, void*);
  static void cb_makeMovieToggle(Fl_Menu_*, void*);
  void cb_Model3_i(Fl_Menu_*, void*);
  static void cb_Model3(Fl_Menu_*, void*);
  void cb_PGA_i(Fl_Menu_*, void*);
  static void cb_PGA(Fl_Menu_*, void*);
  void cb_CPNS_i(Fl_Menu_*, void*);
  static void cb_CPNS(Fl_Menu_*, void*);

  void cb_optAngle_i(Fl_Menu_*, void*);
  static void cb_optAngle(Fl_Menu_*, void*);
  void cb_optLength_i(Fl_Menu_*, void*);
  static void cb_optLength(Fl_Menu_*, void*);
  void cb_optAll_i(Fl_Menu_*, void*);
  static void cb_optAll(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *toolsMenuPCA_Deformation;
private:
  void cb_toolsMenuPCA_Deformation_i(Fl_Menu_*, void*);
  static void cb_toolsMenuPCA_Deformation(Fl_Menu_*, void*);
  void cb_Transformation_i(Fl_Menu_*, void*);
  static void cb_Transformation(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *test_debug_menu;
private:
  void cb_Load5_i(Fl_Menu_*, void*);
  static void cb_Load5(Fl_Menu_*, void*);
  void cb_Export3_i(Fl_Menu_*, void*);
  static void cb_Export3(Fl_Menu_*, void*);
  void cb_Regularize_i(Fl_Menu_*, void*);
  static void cb_Regularize(Fl_Menu_*, void*);
  void cb_Interpolate_i(Fl_Menu_*, void*);
  static void cb_Interpolate(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *debugSubfigureTransWin;
private:
  void cb_debugSubfigureTransWin_i(Fl_Menu_*, void*);
  static void cb_debugSubfigureTransWin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *debugTestConstrsWin;
private:
  void cb_debugTestConstrsWin_i(Fl_Menu_*, void*);
  static void cb_debugTestConstrsWin(Fl_Menu_*, void*);
  void cb_Export4_i(Fl_Menu_*, void*);
  static void cb_Export4(Fl_Menu_*, void*);
  void cb_Test_i(Fl_Menu_*, void*);
  static void cb_Test(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *useFlatTiles;
private:
  void cb_useFlatTiles_i(Fl_Menu_*, void*);
  static void cb_useFlatTiles(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *showBlendingRegion;
private:
  void cb_showBlendingRegion_i(Fl_Menu_*, void*);
  static void cb_showBlendingRegion(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *openLoadSurfaceValuesWindow;
private:
  void cb_openLoadSurfaceValuesWindow_i(Fl_Menu_*, void*);
  static void cb_openLoadSurfaceValuesWindow(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *openLoadSurfaceColormapWindow;
private:
  void cb_openLoadSurfaceColormapWindow_i(Fl_Menu_*, void*);
  static void cb_openLoadSurfaceColormapWindow(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *openSurfaceVisualizationWindow;
private:
  void cb_openSurfaceVisualizationWindow_i(Fl_Menu_*, void*);
  static void cb_openSurfaceVisualizationWindow(Fl_Menu_*, void*);
  void cb_Print_i(Fl_Menu_*, void*);
  static void cb_Print(Fl_Menu_*, void*);
  void cb_Print1_i(Fl_Menu_*, void*);
  static void cb_Print1(Fl_Menu_*, void*);
  void cb_Print2_i(Fl_Menu_*, void*);
  static void cb_Print2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *alignModel0Moment;
private:
  void cb_alignModel0Moment_i(Fl_Menu_*, void*);
  static void cb_alignModel0Moment(Fl_Menu_*, void*);
public:
  Fl_Button *secretButton;
private:
  void cb_secretButton_i(Fl_Button*, void*);
  static void cb_secretButton(Fl_Button*, void*);
public:
  movable_Fl_Window* make_DisplayControl(int win_X, int win_Y, bool open);
  movable_Fl_Window *displayControlWindow;
private:
  void cb_displayControlWindow_i(movable_Fl_Window*, void*);
  static void cb_displayControlWindow(movable_Fl_Window*, void*);
public:
  Fl_Tabs *displayControlTabs;
  Fl_Group *displayControlGeneralTab;
  Fl_Check_Button *unitCubeCheckBox;
private:
  void cb_unitCubeCheckBox_i(Fl_Check_Button*, void*);
  static void cb_unitCubeCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *stdAxesCheckBox;
private:
  void cb_stdAxesCheckBox_i(Fl_Check_Button*, void*);
  static void cb_stdAxesCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *stdRockingCheckBox;
private:
  void cb_stdRockingCheckBox_i(Fl_Check_Button*, void*);
  static void cb_stdRockingCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Output *modelPathOutput;
  Fl_Output *imagePathOutput;
  Fl_Output *tilesetPathOutput;
  Fl_Check_Button *visibilityWindowCheckBox;
private:
  void cb_visibilityWindowCheckBox_i(Fl_Check_Button*, void*);
  static void cb_visibilityWindowCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *cutPlaneWindowCheckBox;
private:
  void cb_cutPlaneWindowCheckBox_i(Fl_Check_Button*, void*);
  static void cb_cutPlaneWindowCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Group *displayControlSurfaceTab;
  Fl_Check_Button *SurfaceLevel_0Btn;
private:
  void cb_SurfaceLevel_0Btn_i(Fl_Check_Button*, void*);
  static void cb_SurfaceLevel_0Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *SurfaceLevel_1Btn;
private:
  void cb_SurfaceLevel_1Btn_i(Fl_Check_Button*, void*);
  static void cb_SurfaceLevel_1Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *SurfaceLevel_2Btn;
private:
  void cb_SurfaceLevel_2Btn_i(Fl_Check_Button*, void*);
  static void cb_SurfaceLevel_2Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *SurfaceLevel_3Btn;
private:
  void cb_SurfaceLevel_3Btn_i(Fl_Check_Button*, void*);
  static void cb_SurfaceLevel_3Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *noneBtn;
private:
  void cb_noneBtn_i(Fl_Check_Button*, void*);
  static void cb_noneBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *pointcloudBtn;
private:
  void cb_pointcloudBtn_i(Fl_Check_Button*, void*);
  static void cb_pointcloudBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *wireframeBtn;
private:
  void cb_wireframeBtn_i(Fl_Check_Button*, void*);
  static void cb_wireframeBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *solidBtn;
private:
  void cb_solidBtn_i(Fl_Check_Button*, void*);
  static void cb_solidBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *blendFiguresBtn;
private:
  void cb_blendFiguresBtn_i(Fl_Check_Button*, void*);
  static void cb_blendFiguresBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *drawBoundaryBtn;
private:
  void cb_drawBoundaryBtn_i(Fl_Check_Button*, void*);
  static void cb_drawBoundaryBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *drawFigureNamesBtn;
private:
  void cb_drawFigureNamesBtn_i(Fl_Check_Button*, void*);
  static void cb_drawFigureNamesBtn(Fl_Check_Button*, void*);
public:
  Fl_Group *displayControlImageTab;
  Fl_Check_Button *drawBoundaryBtn2;
private:
  void cb_drawBoundaryBtn2_i(Fl_Check_Button*, void*);
  static void cb_drawBoundaryBtn2(Fl_Check_Button*, void*);
public:
  Fl_Group *xPosition;
  Fl_Check_Button *xImagePlaneCheckBox;
private:
  void cb_xImagePlaneCheckBox_i(Fl_Check_Button*, void*);
  static void cb_xImagePlaneCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Roller *xImagePlanePositionRoller;
private:
  void cb_xImagePlanePositionRoller_i(Fl_Roller*, void*);
  static void cb_xImagePlanePositionRoller(Fl_Roller*, void*);
public:
  Fl_Button *xImagePlaneSlice;
  Fl_Button *xImagePlanePosition;
  Fl_Progress *xImagePlanePositionGraph;
  Fl_Group *yPosition;
  Fl_Check_Button *yImagePlaneCheckBox;
private:
  void cb_yImagePlaneCheckBox_i(Fl_Check_Button*, void*);
  static void cb_yImagePlaneCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Roller *yImagePlanePositionRoller;
private:
  void cb_yImagePlanePositionRoller_i(Fl_Roller*, void*);
  static void cb_yImagePlanePositionRoller(Fl_Roller*, void*);
public:
  Fl_Button *yImagePlaneSlice;
  Fl_Button *yImagePlanePosition;
  Fl_Progress *yImagePlanePositionGraph;
  Fl_Group *zPosition;
  Fl_Check_Button *zImagePlaneCheckBox;
private:
  void cb_zImagePlaneCheckBox_i(Fl_Check_Button*, void*);
  static void cb_zImagePlaneCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Roller *zImagePlanePositionRoller;
private:
  void cb_zImagePlanePositionRoller_i(Fl_Roller*, void*);
  static void cb_zImagePlanePositionRoller(Fl_Roller*, void*);
public:
  Fl_Button *zImagePlaneSlice;
  Fl_Button *zImagePlanePosition;
  Fl_Progress *zImagePlanePositionGraph;
  Fl_Group *intensityMin;
  Fl_Button *intensityMinOutput;
  Fl_Slider *intensityMinSlider;
private:
  void cb_intensityMinSlider_i(Fl_Slider*, void*);
  static void cb_intensityMinSlider(Fl_Slider*, void*);
public:
  Fl_Value_Input *intensityMinValuator;
private:
  void cb_intensityMinValuator_i(Fl_Value_Input*, void*);
  static void cb_intensityMinValuator(Fl_Value_Input*, void*);
public:
  Fl_Group *intensityMax;
  Fl_Button *intensityMaxOutput;
  Fl_Slider *intensityMaxSlider;
private:
  void cb_intensityMaxSlider_i(Fl_Slider*, void*);
  static void cb_intensityMaxSlider(Fl_Slider*, void*);
public:
  Fl_Value_Input *intensityMaxValuator;
private:
  void cb_intensityMaxValuator_i(Fl_Value_Input*, void*);
  static void cb_intensityMaxValuator(Fl_Value_Input*, void*);
public:
  Fl_Group *displayControlTilesetTab;
  Fl_Check_Button *viewTileSetCheckBox;
private:
  void cb_viewTileSetCheckBox_i(Fl_Check_Button*, void*);
  static void cb_viewTileSetCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *tileSetColorCheckBox;
private:
  void cb_tileSetColorCheckBox_i(Fl_Check_Button*, void*);
  static void cb_tileSetColorCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *tileAlphaSlider;
private:
  void cb_tileAlphaSlider_i(Fl_Value_Slider*, void*);
  static void cb_tileAlphaSlider(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *tileSetSolidCheckBox;
private:
  void cb_tileSetSolidCheckBox_i(Fl_Check_Button*, void*);
  static void cb_tileSetSolidCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Round_Button *tileSetBrightCheckBox;
private:
  void cb_tileSetBrightCheckBox_i(Fl_Round_Button*, void*);
  static void cb_tileSetBrightCheckBox(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *tileSetNormalCheckBox;
private:
  void cb_tileSetNormalCheckBox_i(Fl_Round_Button*, void*);
  static void cb_tileSetNormalCheckBox(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *tileSetDarkCheckBox;
private:
  void cb_tileSetDarkCheckBox_i(Fl_Round_Button*, void*);
  static void cb_tileSetDarkCheckBox(Fl_Round_Button*, void*);
public:
  Fl_Check_Button *tileSetMobileCheckBox;
private:
  void cb_tileSetMobileCheckBox_i(Fl_Check_Button*, void*);
  static void cb_tileSetMobileCheckBox(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *tileMobileFig0;
private:
  void cb_tileMobileFig0_i(Fl_Check_Button*, void*);
  static void cb_tileMobileFig0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *tileMobileFig1;
private:
  void cb_tileMobileFig1_i(Fl_Check_Button*, void*);
  static void cb_tileMobileFig1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *tileMobileFig2;
private:
  void cb_tileMobileFig2_i(Fl_Check_Button*, void*);
  static void cb_tileMobileFig2(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *tileMobileFig3;
private:
  void cb_tileMobileFig3_i(Fl_Check_Button*, void*);
  static void cb_tileMobileFig3(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *tileMobileFig4;
private:
  void cb_tileMobileFig4_i(Fl_Check_Button*, void*);
  static void cb_tileMobileFig4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *tileMobileFig5;
private:
  void cb_tileMobileFig5_i(Fl_Check_Button*, void*);
  static void cb_tileMobileFig5(Fl_Check_Button*, void*);
public:
  Fl_Group *displayControlClipTab;
  Fl_Button *clipCapture0;
private:
  void cb_clipCapture0_i(Fl_Button*, void*);
  static void cb_clipCapture0(Fl_Button*, void*);
public:
  Fl_Button *clipCapture1;
private:
  void cb_clipCapture1_i(Fl_Button*, void*);
  static void cb_clipCapture1(Fl_Button*, void*);
public:
  Fl_Button *clipCapture2;
private:
  void cb_clipCapture2_i(Fl_Button*, void*);
  static void cb_clipCapture2(Fl_Button*, void*);
public:
  Fl_Check_Button *clipEnable0;
private:
  void cb_clipEnable0_i(Fl_Check_Button*, void*);
  static void cb_clipEnable0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnable1;
private:
  void cb_clipEnable1_i(Fl_Check_Button*, void*);
  static void cb_clipEnable1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnable2;
private:
  void cb_clipEnable2_i(Fl_Check_Button*, void*);
  static void cb_clipEnable2(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *clipA0;
private:
  void cb_clipA0_i(Fl_Value_Input*, void*);
  static void cb_clipA0(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipB0;
private:
  void cb_clipB0_i(Fl_Value_Input*, void*);
  static void cb_clipB0(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipC0;
private:
  void cb_clipC0_i(Fl_Value_Input*, void*);
  static void cb_clipC0(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipD0;
private:
  void cb_clipD0_i(Fl_Value_Input*, void*);
  static void cb_clipD0(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipA1;
private:
  void cb_clipA1_i(Fl_Value_Input*, void*);
  static void cb_clipA1(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipB1;
private:
  void cb_clipB1_i(Fl_Value_Input*, void*);
  static void cb_clipB1(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipC1;
private:
  void cb_clipC1_i(Fl_Value_Input*, void*);
  static void cb_clipC1(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipD1;
private:
  void cb_clipD1_i(Fl_Value_Input*, void*);
  static void cb_clipD1(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipA2;
private:
  void cb_clipA2_i(Fl_Value_Input*, void*);
  static void cb_clipA2(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipB2;
private:
  void cb_clipB2_i(Fl_Value_Input*, void*);
  static void cb_clipB2(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipC2;
private:
  void cb_clipC2_i(Fl_Value_Input*, void*);
  static void cb_clipC2(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipD2;
private:
  void cb_clipD2_i(Fl_Value_Input*, void*);
  static void cb_clipD2(Fl_Value_Input*, void*);
public:
  Fl_Button *clipFlip0;
private:
  void cb_clipFlip0_i(Fl_Button*, void*);
  static void cb_clipFlip0(Fl_Button*, void*);
public:
  Fl_Button *clipFlip1;
private:
  void cb_clipFlip1_i(Fl_Button*, void*);
  static void cb_clipFlip1(Fl_Button*, void*);
public:
  Fl_Button *clipFlip2;
private:
  void cb_clipFlip2_i(Fl_Button*, void*);
  static void cb_clipFlip2(Fl_Button*, void*);
public:
  Fl_Button *clipCapture3;
private:
  void cb_clipCapture3_i(Fl_Button*, void*);
  static void cb_clipCapture3(Fl_Button*, void*);
public:
  Fl_Button *clipCapture4;
private:
  void cb_clipCapture4_i(Fl_Button*, void*);
  static void cb_clipCapture4(Fl_Button*, void*);
public:
  Fl_Button *clipCapture5;
private:
  void cb_clipCapture5_i(Fl_Button*, void*);
  static void cb_clipCapture5(Fl_Button*, void*);
public:
  Fl_Check_Button *clipEnable3;
private:
  void cb_clipEnable3_i(Fl_Check_Button*, void*);
  static void cb_clipEnable3(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnable4;
private:
  void cb_clipEnable4_i(Fl_Check_Button*, void*);
  static void cb_clipEnable4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnable5;
private:
  void cb_clipEnable5_i(Fl_Check_Button*, void*);
  static void cb_clipEnable5(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *clipA3;
private:
  void cb_clipA3_i(Fl_Value_Input*, void*);
  static void cb_clipA3(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipB3;
private:
  void cb_clipB3_i(Fl_Value_Input*, void*);
  static void cb_clipB3(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipC3;
private:
  void cb_clipC3_i(Fl_Value_Input*, void*);
  static void cb_clipC3(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipD3;
private:
  void cb_clipD3_i(Fl_Value_Input*, void*);
  static void cb_clipD3(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipA4;
private:
  void cb_clipA4_i(Fl_Value_Input*, void*);
  static void cb_clipA4(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipB4;
private:
  void cb_clipB4_i(Fl_Value_Input*, void*);
  static void cb_clipB4(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipC4;
private:
  void cb_clipC4_i(Fl_Value_Input*, void*);
  static void cb_clipC4(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipD4;
private:
  void cb_clipD4_i(Fl_Value_Input*, void*);
  static void cb_clipD4(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipA5;
private:
  void cb_clipA5_i(Fl_Value_Input*, void*);
  static void cb_clipA5(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipB5;
private:
  void cb_clipB5_i(Fl_Value_Input*, void*);
  static void cb_clipB5(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipC5;
private:
  void cb_clipC5_i(Fl_Value_Input*, void*);
  static void cb_clipC5(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *clipD5;
private:
  void cb_clipD5_i(Fl_Value_Input*, void*);
  static void cb_clipD5(Fl_Value_Input*, void*);
public:
  Fl_Button *clipFlip3;
private:
  void cb_clipFlip3_i(Fl_Button*, void*);
  static void cb_clipFlip3(Fl_Button*, void*);
public:
  Fl_Button *clipFlip4;
private:
  void cb_clipFlip4_i(Fl_Button*, void*);
  static void cb_clipFlip4(Fl_Button*, void*);
public:
  Fl_Button *clipFlip5;
private:
  void cb_clipFlip5_i(Fl_Button*, void*);
  static void cb_clipFlip5(Fl_Button*, void*);
public:
  Fl_Check_Button *clipEnableModel0;
private:
  void cb_clipEnableModel0_i(Fl_Check_Button*, void*);
  static void cb_clipEnableModel0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableModel1;
private:
  void cb_clipEnableModel1_i(Fl_Check_Button*, void*);
  static void cb_clipEnableModel1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableModel2;
private:
  void cb_clipEnableModel2_i(Fl_Check_Button*, void*);
  static void cb_clipEnableModel2(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableTile0;
private:
  void cb_clipEnableTile0_i(Fl_Check_Button*, void*);
  static void cb_clipEnableTile0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableTile1;
private:
  void cb_clipEnableTile1_i(Fl_Check_Button*, void*);
  static void cb_clipEnableTile1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableTile2;
private:
  void cb_clipEnableTile2_i(Fl_Check_Button*, void*);
  static void cb_clipEnableTile2(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableImagePlane0;
private:
  void cb_clipEnableImagePlane0_i(Fl_Check_Button*, void*);
  static void cb_clipEnableImagePlane0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableImagePlane1;
private:
  void cb_clipEnableImagePlane1_i(Fl_Check_Button*, void*);
  static void cb_clipEnableImagePlane1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableImagePlane2;
private:
  void cb_clipEnableImagePlane2_i(Fl_Check_Button*, void*);
  static void cb_clipEnableImagePlane2(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableScene0;
private:
  void cb_clipEnableScene0_i(Fl_Check_Button*, void*);
  static void cb_clipEnableScene0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableScene1;
private:
  void cb_clipEnableScene1_i(Fl_Check_Button*, void*);
  static void cb_clipEnableScene1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableScene2;
private:
  void cb_clipEnableScene2_i(Fl_Check_Button*, void*);
  static void cb_clipEnableScene2(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableView0;
private:
  void cb_clipEnableView0_i(Fl_Check_Button*, void*);
  static void cb_clipEnableView0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableView1;
private:
  void cb_clipEnableView1_i(Fl_Check_Button*, void*);
  static void cb_clipEnableView1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableView2;
private:
  void cb_clipEnableView2_i(Fl_Check_Button*, void*);
  static void cb_clipEnableView2(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableModel3;
private:
  void cb_clipEnableModel3_i(Fl_Check_Button*, void*);
  static void cb_clipEnableModel3(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableModel4;
private:
  void cb_clipEnableModel4_i(Fl_Check_Button*, void*);
  static void cb_clipEnableModel4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableModel5;
private:
  void cb_clipEnableModel5_i(Fl_Check_Button*, void*);
  static void cb_clipEnableModel5(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableTile3;
private:
  void cb_clipEnableTile3_i(Fl_Check_Button*, void*);
  static void cb_clipEnableTile3(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableTile4;
private:
  void cb_clipEnableTile4_i(Fl_Check_Button*, void*);
  static void cb_clipEnableTile4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableTile5;
private:
  void cb_clipEnableTile5_i(Fl_Check_Button*, void*);
  static void cb_clipEnableTile5(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableImagePlane3;
private:
  void cb_clipEnableImagePlane3_i(Fl_Check_Button*, void*);
  static void cb_clipEnableImagePlane3(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableImagePlane4;
private:
  void cb_clipEnableImagePlane4_i(Fl_Check_Button*, void*);
  static void cb_clipEnableImagePlane4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableImagePlane5;
private:
  void cb_clipEnableImagePlane5_i(Fl_Check_Button*, void*);
  static void cb_clipEnableImagePlane5(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableScene3;
private:
  void cb_clipEnableScene3_i(Fl_Check_Button*, void*);
  static void cb_clipEnableScene3(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableScene4;
private:
  void cb_clipEnableScene4_i(Fl_Check_Button*, void*);
  static void cb_clipEnableScene4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableScene5;
private:
  void cb_clipEnableScene5_i(Fl_Check_Button*, void*);
  static void cb_clipEnableScene5(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableView3;
private:
  void cb_clipEnableView3_i(Fl_Check_Button*, void*);
  static void cb_clipEnableView3(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableView4;
private:
  void cb_clipEnableView4_i(Fl_Check_Button*, void*);
  static void cb_clipEnableView4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *clipEnableView5;
private:
  void cb_clipEnableView5_i(Fl_Check_Button*, void*);
  static void cb_clipEnableView5(Fl_Check_Button*, void*);
  void cb_Reset_i(Fl_Button*, void*);
  static void cb_Reset(Fl_Button*, void*);
public:
  movable_Fl_Window* make_AboutPabloWindow(int win_X, int win_Y, bool open);
  movable_Fl_Window *aboutPabloWindow;
private:
  void cb_aboutPabloWindow_i(movable_Fl_Window*, void*);
  static void cb_aboutPabloWindow(movable_Fl_Window*, void*);
public:
  Fl_Button *aboutPabloHeader;
  Fl_Button *aboutPabloAuthors;
  Fl_Check_Button *aboutPabloDontShowButton;
private:
  void cb_aboutPabloDontShowButton_i(Fl_Check_Button*, void*);
  static void cb_aboutPabloDontShowButton(Fl_Check_Button*, void*);
public:
  Fl_Button *aboutPabloRelease;
  Fl_Button *aboutPabloVersion;
  movable_Fl_Window* make_AboutBinaryPabloWindow(int win_X, int win_Y, bool open);
  movable_Fl_Window *aboutBinaryPabloWindow;
private:
  void cb_aboutBinaryPabloWindow_i(movable_Fl_Window*, void*);
  static void cb_aboutBinaryPabloWindow(movable_Fl_Window*, void*);
public:
  Fl_Group *aboutBinaryPabloSplashGrp;
  Fl_Button *aboutBinaryPabloVersionLabel;
  Fl_Button *aboutBinaryPabloVersion;
  Fl_Button *aboutBinaryPabloRelease;
  Fl_Button *aboutBinaryPabloReleaseLabel;
  Fl_Check_Button *aboutBinaryPabloDontShowButton;
private:
  void cb_aboutBinaryPabloDontShowButton_i(Fl_Check_Button*, void*);
  static void cb_aboutBinaryPabloDontShowButton(Fl_Check_Button*, void*);
public:
  movable_Fl_Window* make_PreferencesEditor(int win_X, int win_Y, int subwin_X, int subwin_Y);
  movable_Fl_Window *preferencesEditorWindow;
private:
  void cb_preferencesEditorWindow_i(movable_Fl_Window*, void*);
  static void cb_preferencesEditorWindow(movable_Fl_Window*, void*);
  void cb_Close_i(Fl_Return_Button*, void*);
  static void cb_Close(Fl_Return_Button*, void*);
public:
  Fl_Tabs *prefsEditorTabsGrp;
  Fl_Value_Slider *displayPrefsRockingAngle;
private:
  void cb_displayPrefsRockingAngle_i(Fl_Value_Slider*, void*);
  static void cb_displayPrefsRockingAngle(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *displayPrefsRockingIncrement;
private:
  void cb_displayPrefsRockingIncrement_i(Fl_Value_Slider*, void*);
  static void cb_displayPrefsRockingIncrement(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *displayPrefsRememberPosn;
private:
  void cb_displayPrefsRememberPosn_i(Fl_Check_Button*, void*);
  static void cb_displayPrefsRememberPosn(Fl_Check_Button*, void*);
public:
  Fl_Button *displayPrefsRememberPosnText;
  Fl_Check_Button *displayPrefsRememberOpen;
private:
  void cb_displayPrefsRememberOpen_i(Fl_Check_Button*, void*);
  static void cb_displayPrefsRememberOpen(Fl_Check_Button*, void*);
public:
  Fl_Button *displayPrefsRememberOpenText;
  static Fl_Menu_Item menu_Background[];
private:
  void cb_Black_i(Fl_Menu_*, void*);
  static void cb_Black(Fl_Menu_*, void*);
  void cb_White_i(Fl_Menu_*, void*);
  static void cb_White(Fl_Menu_*, void*);
  void cb_Slate_i(Fl_Menu_*, void*);
  static void cb_Slate(Fl_Menu_*, void*);
  void cb_Indigo_i(Fl_Menu_*, void*);
  static void cb_Indigo(Fl_Menu_*, void*);
  void cb_Custom_i(Fl_Menu_*, void*);
  static void cb_Custom(Fl_Menu_*, void*);
public:
  Fl_Box *displayPrefsCurrentBkgColor;
  Fl_Check_Button *displayPrefsStandardAxes;
private:
  void cb_displayPrefsStandardAxes_i(Fl_Check_Button*, void*);
  static void cb_displayPrefsStandardAxes(Fl_Check_Button*, void*);
public:
  Fl_Button *displayPrefsStandardAxesText;
  Fl_Check_Button *displayPrefsIconifyIndepButton;
private:
  void cb_displayPrefsIconifyIndepButton_i(Fl_Check_Button*, void*);
  static void cb_displayPrefsIconifyIndepButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *displayPrefsIconifyMainButton;
private:
  void cb_displayPrefsIconifyMainButton_i(Fl_Check_Button*, void*);
  static void cb_displayPrefsIconifyMainButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *displayPrefsIconifyAnyButton;
private:
  void cb_displayPrefsIconifyAnyButton_i(Fl_Check_Button*, void*);
  static void cb_displayPrefsIconifyAnyButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *atomPrefsShowAtomVectors;
private:
  void cb_atomPrefsShowAtomVectors_i(Fl_Check_Button*, void*);
  static void cb_atomPrefsShowAtomVectors(Fl_Check_Button*, void*);
public:
  Fl_Button *atomPrefsShowAtomVectorsText;
  Fl_Check_Button *atomPrefsUseFigureColors;
private:
  void cb_atomPrefsUseFigureColors_i(Fl_Check_Button*, void*);
  static void cb_atomPrefsUseFigureColors(Fl_Check_Button*, void*);
public:
  Fl_Button *atomPrefsUseFigureColorsText;
  Fl_Check_Button *atomPrefsAtomVectorsType;
private:
  void cb_atomPrefsAtomVectorsType_i(Fl_Check_Button*, void*);
  static void cb_atomPrefsAtomVectorsType(Fl_Check_Button*, void*);
public:
  Fl_Button *atomPrefsAtomVectorsTypeText;
  Fl_Check_Button *atomPrefsExtraAtomVectors;
private:
  void cb_atomPrefsExtraAtomVectors_i(Fl_Check_Button*, void*);
  static void cb_atomPrefsExtraAtomVectors(Fl_Check_Button*, void*);
public:
  Fl_Button *atomPrefsExtraAtomVectorsText;
  Fl_Value_Slider *atomPrefsAtomVectorsWidth;
private:
  void cb_atomPrefsAtomVectorsWidth_i(Fl_Value_Slider*, void*);
  static void cb_atomPrefsAtomVectorsWidth(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *atomPrefsShowAtoms;
private:
  void cb_atomPrefsShowAtoms_i(Fl_Check_Button*, void*);
  static void cb_atomPrefsShowAtoms(Fl_Check_Button*, void*);
public:
  Fl_Button *atomPrefsShowAtomsText;
  Fl_Check_Button *atomPrefsNoBVectorsButton;
private:
  void cb_atomPrefsNoBVectorsButton_i(Fl_Check_Button*, void*);
  static void cb_atomPrefsNoBVectorsButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *atomPrefsCrestBVectorsButton;
private:
  void cb_atomPrefsCrestBVectorsButton_i(Fl_Check_Button*, void*);
  static void cb_atomPrefsCrestBVectorsButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *atomPrefsAllBVectorsButton;
private:
  void cb_atomPrefsAllBVectorsButton_i(Fl_Check_Button*, void*);
  static void cb_atomPrefsAllBVectorsButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *meshPrefsShowMesh;
private:
  void cb_meshPrefsShowMesh_i(Fl_Check_Button*, void*);
  static void cb_meshPrefsShowMesh(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *meshPrefsMeshType;
private:
  void cb_meshPrefsMeshType_i(Fl_Check_Button*, void*);
  static void cb_meshPrefsMeshType(Fl_Check_Button*, void*);
public:
  Fl_Button *meshPrefsMeshTypeText;
  Fl_Button *meshPrefsShowMeshText;
  Fl_Value_Slider *meshPrefsMeshConnectorsWidth;
private:
  void cb_meshPrefsMeshConnectorsWidth_i(Fl_Value_Slider*, void*);
  static void cb_meshPrefsMeshConnectorsWidth(Fl_Value_Slider*, void*);
  static Fl_Menu_Item menu_Connectors[];
  void cb_Red_i(Fl_Menu_*, void*);
  static void cb_Red(Fl_Menu_*, void*);
  void cb_Green_i(Fl_Menu_*, void*);
  static void cb_Green(Fl_Menu_*, void*);
  void cb_Blue_i(Fl_Menu_*, void*);
  static void cb_Blue(Fl_Menu_*, void*);
  void cb_Yellow_i(Fl_Menu_*, void*);
  static void cb_Yellow(Fl_Menu_*, void*);
  void cb_Magenta_i(Fl_Menu_*, void*);
  static void cb_Magenta(Fl_Menu_*, void*);
  void cb_Cyan_i(Fl_Menu_*, void*);
  static void cb_Cyan(Fl_Menu_*, void*);
  void cb_Gray_i(Fl_Menu_*, void*);
  static void cb_Gray(Fl_Menu_*, void*);
  void cb_Custom1_i(Fl_Menu_*, void*);
  static void cb_Custom1(Fl_Menu_*, void*);
public:
  Fl_Box *meshPrefsCurrentMeshColor;
  Fl_Check_Button *surfacePrefsNoneBtn;
private:
  void cb_surfacePrefsNoneBtn_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsNoneBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *surfacePrefsPointcloudBtn;
private:
  void cb_surfacePrefsPointcloudBtn_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsPointcloudBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *surfacePrefsWireframeBtn;
private:
  void cb_surfacePrefsWireframeBtn_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsWireframeBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *surfacePrefsSolidBtn;
private:
  void cb_surfacePrefsSolidBtn_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsSolidBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *surfacePrefsLevel_0Btn;
private:
  void cb_surfacePrefsLevel_0Btn_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsLevel_0Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *surfacePrefsLevel_1Btn;
private:
  void cb_surfacePrefsLevel_1Btn_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsLevel_1Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *surfacePrefsLevel_2Btn;
private:
  void cb_surfacePrefsLevel_2Btn_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsLevel_2Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *surfacePrefsLevel_3Btn;
private:
  void cb_surfacePrefsLevel_3Btn_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsLevel_3Btn(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *surfacePrefsLineWidth;
private:
  void cb_surfacePrefsLineWidth_i(Fl_Value_Slider*, void*);
  static void cb_surfacePrefsLineWidth(Fl_Value_Slider*, void*);
public:
  Fl_Value_Input *surfacePrefsSmoothness;
private:
  void cb_surfacePrefsSmoothness_i(Fl_Value_Input*, void*);
  static void cb_surfacePrefsSmoothness(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *surfacePrefsUseTwoLights;
private:
  void cb_surfacePrefsUseTwoLights_i(Fl_Check_Button*, void*);
  static void cb_surfacePrefsUseTwoLights(Fl_Check_Button*, void*);
public:
  Fl_Button *surfacePrefsUseTwoLightsText;
  Fl_Group *prefsEditorImageTab;
  Fl_Check_Button *imagePrefsSmoothImages;
private:
  void cb_imagePrefsSmoothImages_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsSmoothImages(Fl_Check_Button*, void*);
public:
  Fl_Button *imagePrefsSmoothImagesText;
  Fl_Button *imagePrefsCutPlaneBoundaryText;
  Fl_Check_Button *imagePrefsCutPlaneBoundary;
private:
  void cb_imagePrefsCutPlaneBoundary_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsCutPlaneBoundary(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *imagePrefsCutPlaneBdryWidth;
private:
  void cb_imagePrefsCutPlaneBdryWidth_i(Fl_Value_Slider*, void*);
  static void cb_imagePrefsCutPlaneBdryWidth(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *imagePrefsXSliceDefault;
private:
  void cb_imagePrefsXSliceDefault_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsXSliceDefault(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *imagePrefsYSliceDefault;
private:
  void cb_imagePrefsYSliceDefault_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsYSliceDefault(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *imagePrefsZSliceDefault;
private:
  void cb_imagePrefsZSliceDefault_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsZSliceDefault(Fl_Check_Button*, void*);
public:
  Fl_Button *imagePrefsCutPlaneMode;
private:
  void cb_imagePrefsCutPlaneMode_i(Fl_Button*, void*);
  static void cb_imagePrefsCutPlaneMode(Fl_Button*, void*);
public:
  Fl_Button *imagePrefsCutPlaneModeText;
  Fl_Check_Button *imagePrefsRangeDisplayed;
private:
  void cb_imagePrefsRangeDisplayed_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsRangeDisplayed(Fl_Check_Button*, void*);
public:
  Fl_Button *imagePrefsRangeDisplayedText;
  Fl_Check_Button *imagePrefsCoordsDisplayed;
private:
  void cb_imagePrefsCoordsDisplayed_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsCoordsDisplayed(Fl_Check_Button*, void*);
public:
  Fl_Button *imagePrefsCoordsDisplayedText;
  Fl_Check_Button *imagePrefsDrawBoundary;
private:
  void cb_imagePrefsDrawBoundary_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsDrawBoundary(Fl_Check_Button*, void*);
  void cb_Image_i(Fl_Button*, void*);
  static void cb_Image(Fl_Button*, void*);
  static Fl_Menu_Item menu_Tiles[];
  void cb_Deep_i(Fl_Menu_*, void*);
  static void cb_Deep(Fl_Menu_*, void*);
  void cb_Forest_i(Fl_Menu_*, void*);
  static void cb_Forest(Fl_Menu_*, void*);
  void cb_Slate1_i(Fl_Menu_*, void*);
  static void cb_Slate1(Fl_Menu_*, void*);
  void cb_Gold_i(Fl_Menu_*, void*);
  static void cb_Gold(Fl_Menu_*, void*);
  void cb_Brick_i(Fl_Menu_*, void*);
  static void cb_Brick(Fl_Menu_*, void*);
  void cb_Aquamarine_i(Fl_Menu_*, void*);
  static void cb_Aquamarine(Fl_Menu_*, void*);
  void cb_Beige_i(Fl_Menu_*, void*);
  static void cb_Beige(Fl_Menu_*, void*);
  void cb_Custom2_i(Fl_Menu_*, void*);
  static void cb_Custom2(Fl_Menu_*, void*);
public:
  Fl_Box *tilePrefsCurrentTilesColor;
  Fl_Group *tilePrefsBYUOutput;
  Fl_Group *BYUTileGrp;
  Fl_Check_Button *otherPrefsBYUTrianglesButton;
private:
  void cb_otherPrefsBYUTrianglesButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsBYUTrianglesButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsBYUQuadsButton;
private:
  void cb_otherPrefsBYUQuadsButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsBYUQuadsButton(Fl_Check_Button*, void*);
public:
  Fl_Group *BYUCoordsGrp;
  Fl_Check_Button *otherPrefsBYUModelCoordButton;
private:
  void cb_otherPrefsBYUModelCoordButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsBYUModelCoordButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsBYUWorldCoordButton;
private:
  void cb_otherPrefsBYUWorldCoordButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsBYUWorldCoordButton(Fl_Check_Button*, void*);
public:
  Fl_Group *prefsEditorConstraintsTab;
  Fl_Check_Button *constraintPrefsShowConstraints;
private:
  void cb_constraintPrefsShowConstraints_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsShowConstraints(Fl_Check_Button*, void*);
public:
  Fl_Button *constraintPrefsShowConstraintsText;
  Fl_Check_Button *constraintPrefsNoneBtn;
private:
  void cb_constraintPrefsNoneBtn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsNoneBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsPointcloudBtn;
private:
  void cb_constraintPrefsPointcloudBtn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsPointcloudBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsWireframeBtn;
private:
  void cb_constraintPrefsWireframeBtn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsWireframeBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsSolidBtn;
private:
  void cb_constraintPrefsSolidBtn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsSolidBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsLevel_0Btn;
private:
  void cb_constraintPrefsLevel_0Btn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsLevel_0Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsLevel_1Btn;
private:
  void cb_constraintPrefsLevel_1Btn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsLevel_1Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsLevel_2Btn;
private:
  void cb_constraintPrefsLevel_2Btn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsLevel_2Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsLevel_3Btn;
private:
  void cb_constraintPrefsLevel_3Btn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsLevel_3Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsPartiallyBtn;
private:
  void cb_constraintPrefsPartiallyBtn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsPartiallyBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *constraintPrefsFullyBtn;
private:
  void cb_constraintPrefsFullyBtn_i(Fl_Check_Button*, void*);
  static void cb_constraintPrefsFullyBtn(Fl_Check_Button*, void*);
  static Fl_Menu_Item menu_Partial[];
  void cb_Pink_i(Fl_Menu_*, void*);
  static void cb_Pink(Fl_Menu_*, void*);
  void cb_Tan_i(Fl_Menu_*, void*);
  static void cb_Tan(Fl_Menu_*, void*);
  void cb_Light_i(Fl_Menu_*, void*);
  static void cb_Light(Fl_Menu_*, void*);
  void cb_Lime_i(Fl_Menu_*, void*);
  static void cb_Lime(Fl_Menu_*, void*);
  void cb_Olive_i(Fl_Menu_*, void*);
  static void cb_Olive(Fl_Menu_*, void*);
  void cb_Orange_i(Fl_Menu_*, void*);
  static void cb_Orange(Fl_Menu_*, void*);
  void cb_Gray1_i(Fl_Menu_*, void*);
  static void cb_Gray1(Fl_Menu_*, void*);
  void cb_Custom3_i(Fl_Menu_*, void*);
  static void cb_Custom3(Fl_Menu_*, void*);
public:
  Fl_Box *constraintPrefsPartialSurfaceColor;
  Fl_Check_Button *landmarkPrefsShowLandmarks;
private:
  void cb_landmarkPrefsShowLandmarks_i(Fl_Check_Button*, void*);
  static void cb_landmarkPrefsShowLandmarks(Fl_Check_Button*, void*);
public:
  Fl_Button *landmarkPrefsShowLandmarksText;
  Fl_Value_Slider *landmarkPrefsNarrowWidth;
private:
  void cb_landmarkPrefsNarrowWidth_i(Fl_Value_Slider*, void*);
  static void cb_landmarkPrefsNarrowWidth(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *landmarkPrefsWideWidth;
private:
  void cb_landmarkPrefsWideWidth_i(Fl_Value_Slider*, void*);
  static void cb_landmarkPrefsWideWidth(Fl_Value_Slider*, void*);
  static Fl_Menu_Item menu_Landmarks[];
  void cb_Orange1_i(Fl_Menu_*, void*);
  static void cb_Orange1(Fl_Menu_*, void*);
  void cb_Sea_i(Fl_Menu_*, void*);
  static void cb_Sea(Fl_Menu_*, void*);
  void cb_Cornflower_i(Fl_Menu_*, void*);
  static void cb_Cornflower(Fl_Menu_*, void*);
  void cb_Rosy_i(Fl_Menu_*, void*);
  static void cb_Rosy(Fl_Menu_*, void*);
  void cb_Purple_i(Fl_Menu_*, void*);
  static void cb_Purple(Fl_Menu_*, void*);
  void cb_Chartreuse_i(Fl_Menu_*, void*);
  static void cb_Chartreuse(Fl_Menu_*, void*);
  void cb_Gray2_i(Fl_Menu_*, void*);
  static void cb_Gray2(Fl_Menu_*, void*);
  void cb_Custom4_i(Fl_Menu_*, void*);
  static void cb_Custom4(Fl_Menu_*, void*);
public:
  Fl_Box *landmarkPrefsLandmarksColor;
  Fl_Value_Input *otherPrefsUndoLength;
private:
  void cb_otherPrefsUndoLength_i(Fl_Value_Input*, void*);
  static void cb_otherPrefsUndoLength(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *otherPrefsLeftHandedButton;
private:
  void cb_otherPrefsLeftHandedButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsLeftHandedButton(Fl_Check_Button*, void*);
public:
  Fl_Button *otherPrefsLeftHandedText;
  Fl_Output *otherPrefsLeftComment;
  Fl_Check_Button *otherPrefsAboutPabloButton;
private:
  void cb_otherPrefsAboutPabloButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsAboutPabloButton(Fl_Check_Button*, void*);
public:
  Fl_Button *otherPrefsAboutPabloText;
  Fl_Check_Button *otherPrefsReorderAlwaysButton;
private:
  void cb_otherPrefsReorderAlwaysButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsReorderAlwaysButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsReorderNeverButton;
private:
  void cb_otherPrefsReorderNeverButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsReorderNeverButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsReorderPromptButton;
private:
  void cb_otherPrefsReorderPromptButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsReorderPromptButton(Fl_Check_Button*, void*);
public:
  Fl_Group *simTransOutput;
  Fl_Group *simTransGrp;
  Fl_Check_Button *otherPrefsSimTransVectorsButton;
private:
  void cb_otherPrefsSimTransVectorsButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsSimTransVectorsButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsSimTransMatrixButton;
private:
  void cb_otherPrefsSimTransMatrixButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsSimTransMatrixButton(Fl_Check_Button*, void*);
public:
  Fl_Group *simTransFilesGrp;
  Fl_Check_Button *otherPrefsSimTransModelButton;
private:
  void cb_otherPrefsSimTransModelButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsSimTransModelButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsSimTransSeparateButton;
private:
  void cb_otherPrefsSimTransSeparateButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsSimTransSeparateButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsQuietVerbosityButton;
private:
  void cb_otherPrefsQuietVerbosityButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsQuietVerbosityButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsNormalVerbosityButton;
private:
  void cb_otherPrefsNormalVerbosityButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsNormalVerbosityButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *otherPrefsLoudVerbosityButton;
private:
  void cb_otherPrefsLoudVerbosityButton_i(Fl_Check_Button*, void*);
  static void cb_otherPrefsLoudVerbosityButton(Fl_Check_Button*, void*);
public:
  movable_Fl_Window *prefsImageFilesWindow;
  Fl_Check_Button *imagePrefsReverseOrder;
private:
  void cb_imagePrefsReverseOrder_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsReverseOrder(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *imagePrefsNativeOrder;
private:
  void cb_imagePrefsNativeOrder_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsNativeOrder(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *imagePrefsNormalOrder;
private:
  void cb_imagePrefsNormalOrder_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsNormalOrder(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *imagePrefsRetainOrder;
private:
  void cb_imagePrefsRetainOrder_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsRetainOrder(Fl_Check_Button*, void*);
public:
  Fl_Button *byteOrder_Caret0;
  Fl_Button *byteOrder_Caret1;
  Fl_Check_Button *imagePrefsScaleInput;
private:
  void cb_imagePrefsScaleInput_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsScaleInput(Fl_Check_Button*, void*);
public:
  Fl_Button *imagePrefsScaleInputText;
  Fl_Check_Button *imagePrefsCompressImages;
private:
  void cb_imagePrefsCompressImages_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsCompressImages(Fl_Check_Button*, void*);
public:
  Fl_Button *imagePrefsCompressImagesText;
  Fl_Check_Button *imagePrefsConvertImages;
private:
  void cb_imagePrefsConvertImages_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsConvertImages(Fl_Check_Button*, void*);
public:
  Fl_Button *imagePrefsConvertImagesText;
  Fl_Button *imagePrefsConvertImagesType;
private:
  void cb_Close1_i(Fl_Return_Button*, void*);
  static void cb_Close1(Fl_Return_Button*, void*);
public:
  Fl_Check_Button *imagePrefsConvertFormat;
private:
  void cb_imagePrefsConvertFormat_i(Fl_Check_Button*, void*);
  static void cb_imagePrefsConvertFormat(Fl_Check_Button*, void*);
public:
  Fl_Button *imagePrefsConvertFormatText;
  Fl_Counter *imagePrefsImageFormat;
private:
  void cb_imagePrefsImageFormat_i(Fl_Counter*, void*);
  static void cb_imagePrefsImageFormat(Fl_Counter*, void*);
public:
  Fl_Double_Window* make_ReorderPopup();
  Fl_Double_Window *reorderPopupWindow;
private:
  void cb_reorderPopupWindow_i(Fl_Double_Window*, void*);
  static void cb_reorderPopupWindow(Fl_Double_Window*, void*);
  void cb_Reorder1_i(Fl_Return_Button*, void*);
  static void cb_Reorder1(Fl_Return_Button*, void*);
  void cb_Save4_i(Fl_Return_Button*, void*);
  static void cb_Save4(Fl_Return_Button*, void*);
  void cb_Cancel_i(Fl_Return_Button*, void*);
  static void cb_Cancel(Fl_Return_Button*, void*);
public:
  Fl_Check_Button *reorderAutomaticButton;
private:
  void cb_reorderAutomaticButton_i(Fl_Check_Button*, void*);
  static void cb_reorderAutomaticButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *reorderNeverButton;
private:
  void cb_reorderNeverButton_i(Fl_Check_Button*, void*);
  static void cb_reorderNeverButton(Fl_Check_Button*, void*);
public:
  movable_Fl_Window* make_addQuadFigureDlg(int win_X, int win_Y, bool open);
  movable_Fl_Window *addQuadFigureDlg;
private:
  void cb_addQuadFigureDlg_i(movable_Fl_Window*, void*);
  static void cb_addQuadFigureDlg(movable_Fl_Window*, void*);
public:
  Fl_Value_Input *addQuadFigureRowInput;
  Fl_Value_Input *addQuadFigureColumnInput;
  Fl_Return_Button *addQuadFigureBtn;
private:
  void cb_addQuadFigureBtn_i(Fl_Return_Button*, void*);
  static void cb_addQuadFigureBtn(Fl_Return_Button*, void*);
public:
  Fl_Input *addQuadFigureNameInput;
  Fl_Menu_Button *addQuadFigureColorBtn;
  static Fl_Menu_Item menu_addQuadFigureColorBtn[];
private:
  void cb_Red1_i(Fl_Menu_*, void*);
  static void cb_Red1(Fl_Menu_*, void*);
  void cb_Green1_i(Fl_Menu_*, void*);
  static void cb_Green1(Fl_Menu_*, void*);
  void cb_Yellow1_i(Fl_Menu_*, void*);
  static void cb_Yellow1(Fl_Menu_*, void*);
  void cb_Blue1_i(Fl_Menu_*, void*);
  static void cb_Blue1(Fl_Menu_*, void*);
  void cb_Magenta1_i(Fl_Menu_*, void*);
  static void cb_Magenta1(Fl_Menu_*, void*);
  void cb_Cyan1_i(Fl_Menu_*, void*);
  static void cb_Cyan1(Fl_Menu_*, void*);
  void cb_Gray3_i(Fl_Menu_*, void*);
  static void cb_Gray3(Fl_Menu_*, void*);
  void cb_Custom5_i(Fl_Menu_*, void*);
  static void cb_Custom5(Fl_Menu_*, void*);
public:
  Fl_Box *addQuadFigureCurrentColor;
  movable_Fl_Window* make_VisibilityControl(int win_X, int win_Y, bool open);
  movable_Fl_Window *visibilityControlWindow;
private:
  void cb_visibilityControlWindow_i(movable_Fl_Window*, void*);
  static void cb_visibilityControlWindow(movable_Fl_Window*, void*);
public:
  Fl_Button *visibilityAllOn;
private:
  void cb_visibilityAllOn_i(Fl_Button*, void*);
  static void cb_visibilityAllOn(Fl_Button*, void*);
public:
  Fl_Button *visibilityAllOff;
private:
  void cb_visibilityAllOff_i(Fl_Button*, void*);
  static void cb_visibilityAllOff(Fl_Button*, void*);
public:
  Fl_Round_Button *atomVectorsVisible;
private:
  void cb_atomVectorsVisible_i(Fl_Round_Button*, void*);
  static void cb_atomVectorsVisible(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *meshConnectorsVisible;
private:
  void cb_meshConnectorsVisible_i(Fl_Round_Button*, void*);
  static void cb_meshConnectorsVisible(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *atomsVisible;
private:
  void cb_atomsVisible_i(Fl_Round_Button*, void*);
  static void cb_atomsVisible(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Figure0;
private:
  void cb_Figure0_i(Fl_Round_Button*, void*);
  static void cb_Figure0(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Figure1;
private:
  void cb_Figure1_i(Fl_Round_Button*, void*);
  static void cb_Figure1(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Figure2;
private:
  void cb_Figure2_i(Fl_Round_Button*, void*);
  static void cb_Figure2(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Figure3;
private:
  void cb_Figure3_i(Fl_Round_Button*, void*);
  static void cb_Figure3(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Figure4;
private:
  void cb_Figure4_i(Fl_Round_Button*, void*);
  static void cb_Figure4(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Figure5;
private:
  void cb_Figure5_i(Fl_Round_Button*, void*);
  static void cb_Figure5(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Figure6;
private:
  void cb_Figure6_i(Fl_Round_Button*, void*);
  static void cb_Figure6(Fl_Round_Button*, void*);
public:
  Fl_Box *figureNumber0;
  Fl_Box *figureNumber1;
  Fl_Box *figureNumber2;
  Fl_Box *figureNumber3;
  Fl_Box *figureNumber4;
  Fl_Box *figureNumber5;
  Fl_Box *figureNumber6;
  Fl_Button *visibilityAllInvert;
private:
  void cb_visibilityAllInvert_i(Fl_Button*, void*);
  static void cb_visibilityAllInvert(Fl_Button*, void*);
public:
  Fl_Round_Button *constraintsVisible;
private:
  void cb_constraintsVisible_i(Fl_Round_Button*, void*);
  static void cb_constraintsVisible(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *landmarksVisible;
private:
  void cb_landmarksVisible_i(Fl_Round_Button*, void*);
  static void cb_landmarksVisible(Fl_Round_Button*, void*);
public:
  Fl_Roller *visibilityFigureRoller;
private:
  void cb_visibilityFigureRoller_i(Fl_Roller*, void*);
  static void cb_visibilityFigureRoller(Fl_Roller*, void*);
public:
  movable_Fl_Window* make_ConstraintsWindow(int win_X, int win_Y);
  movable_Fl_Window *constraintsWindow;
private:
  void cb_constraintsWindow_i(movable_Fl_Window*, void*);
  static void cb_constraintsWindow(movable_Fl_Window*, void*);
public:
  Fl_Slider *interObjectDistanceSlider;
private:
  void cb_interObjectDistanceSlider_i(Fl_Slider*, void*);
  static void cb_interObjectDistanceSlider(Fl_Slider*, void*);
public:
  Fl_Value_Output *interObjectDistanceValue;
  Fl_Button *contraintsDoneBtn;
private:
  void cb_contraintsDoneBtn_i(Fl_Button*, void*);
  static void cb_contraintsDoneBtn(Fl_Button*, void*);
public:
  Fl_Button *viewPartialSurfaces;
private:
  void cb_viewPartialSurfaces_i(Fl_Button*, void*);
  static void cb_viewPartialSurfaces(Fl_Button*, void*);
public:
  Fl_Check_Button *renderFullyBtn;
private:
  void cb_renderFullyBtn_i(Fl_Check_Button*, void*);
  static void cb_renderFullyBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *renderPartiallyBtn;
private:
  void cb_renderPartiallyBtn_i(Fl_Check_Button*, void*);
  static void cb_renderPartiallyBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *partialNoneBtn;
private:
  void cb_partialNoneBtn_i(Fl_Check_Button*, void*);
  static void cb_partialNoneBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *partialPointcloudBtn;
private:
  void cb_partialPointcloudBtn_i(Fl_Check_Button*, void*);
  static void cb_partialPointcloudBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *partialWireframeBtn;
private:
  void cb_partialWireframeBtn_i(Fl_Check_Button*, void*);
  static void cb_partialWireframeBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *partialSolidBtn;
private:
  void cb_partialSolidBtn_i(Fl_Check_Button*, void*);
  static void cb_partialSolidBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *PartialSurfaceLevel_0Btn;
private:
  void cb_PartialSurfaceLevel_0Btn_i(Fl_Check_Button*, void*);
  static void cb_PartialSurfaceLevel_0Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *PartialSurfaceLevel_1Btn;
private:
  void cb_PartialSurfaceLevel_1Btn_i(Fl_Check_Button*, void*);
  static void cb_PartialSurfaceLevel_1Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *PartialSurfaceLevel_2Btn;
private:
  void cb_PartialSurfaceLevel_2Btn_i(Fl_Check_Button*, void*);
  static void cb_PartialSurfaceLevel_2Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *PartialSurfaceLevel_3Btn;
private:
  void cb_PartialSurfaceLevel_3Btn_i(Fl_Check_Button*, void*);
  static void cb_PartialSurfaceLevel_3Btn(Fl_Check_Button*, void*);
public:
  Fl_Button *fullClear;
private:
  void cb_fullClear_i(Fl_Button*, void*);
  static void cb_fullClear(Fl_Button*, void*);
public:
  Fl_Button *partialClear;
private:
  void cb_partialClear_i(Fl_Button*, void*);
  static void cb_partialClear(Fl_Button*, void*);
public:
  Fl_Value_Output *constraintCount;
  Fl_Value_Slider *constraintsFigureSlider;
private:
  void cb_constraintsFigureSlider_i(Fl_Value_Slider*, void*);
  static void cb_constraintsFigureSlider(Fl_Value_Slider*, void*);
public:
  Fl_Output *constraintsFigureSliderText;
  Fl_Button *SetFigureNumber;
private:
  void cb_SetFigureNumber_i(Fl_Button*, void*);
  static void cb_SetFigureNumber(Fl_Button*, void*);
public:
  Fl_Value_Output *Governor;
  movable_Fl_Window* make_PrimitiveEditor(int win_X, int win_Y, bool open);
  movable_Fl_Window *primitiveEditorWindow;
private:
  void cb_primitiveEditorWindow_i(movable_Fl_Window*, void*);
  static void cb_primitiveEditorWindow(movable_Fl_Window*, void*);
public:
  Fl_Value_Slider *atomEditorThetaSlider;
private:
  void cb_atomEditorThetaSlider_i(Fl_Value_Slider*, void*);
  static void cb_atomEditorThetaSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *atomEditorElongationSlider;
private:
  void cb_atomEditorElongationSlider_i(Fl_Value_Slider*, void*);
  static void cb_atomEditorElongationSlider(Fl_Value_Slider*, void*);
public:
  Fl_Button *atomEditor1stMessageBtn;
  Fl_Button *atomEditor2ndMessageBtn;
  Fl_Group *atomEditorOutputGrp;
  Fl_Value_Output *atomEditorFigureOutput;
  Fl_Value_Output *atomEditorAtomIdOutput;
  Fl_Output *atomEditorUVOutput;
  movable_Fl_Window* make_CutPlaneControl(int win_X, int win_Y, bool open);
  movable_Fl_Window *cutPlanesControlWindow;
private:
  void cb_cutPlanesControlWindow_i(movable_Fl_Window*, void*);
  static void cb_cutPlanesControlWindow(movable_Fl_Window*, void*);
public:
  Fl_Check_Button *cutPlaneBtn0;
private:
  void cb_cutPlaneBtn0_i(Fl_Check_Button*, void*);
  static void cb_cutPlaneBtn0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *cutPlaneBtn1;
private:
  void cb_cutPlaneBtn1_i(Fl_Check_Button*, void*);
  static void cb_cutPlaneBtn1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *cutPlaneBtn2;
private:
  void cb_cutPlaneBtn2_i(Fl_Check_Button*, void*);
  static void cb_cutPlaneBtn2(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *cutPlaneBtn3;
private:
  void cb_cutPlaneBtn3_i(Fl_Check_Button*, void*);
  static void cb_cutPlaneBtn3(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *cutPlaneBtn4;
private:
  void cb_cutPlaneBtn4_i(Fl_Check_Button*, void*);
  static void cb_cutPlaneBtn4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *cutPlaneBtn5;
private:
  void cb_cutPlaneBtn5_i(Fl_Check_Button*, void*);
  static void cb_cutPlaneBtn5(Fl_Check_Button*, void*);
public:
  Fl_Button *cutPlaneAtomModeBtn;
private:
  void cb_cutPlaneAtomModeBtn_i(Fl_Button*, void*);
  static void cb_cutPlaneAtomModeBtn(Fl_Button*, void*);
public:
  Fl_Button *cutPlaneCrestModeBtn;
private:
  void cb_cutPlaneCrestModeBtn_i(Fl_Button*, void*);
  static void cb_cutPlaneCrestModeBtn(Fl_Button*, void*);
public:
  Fl_Button *cutPlaneBPerpNModeBtn;
private:
  void cb_cutPlaneBPerpNModeBtn_i(Fl_Button*, void*);
  static void cb_cutPlaneBPerpNModeBtn(Fl_Button*, void*);
public:
  Fl_Button *cutPlaneStarboardModeBtn;
private:
  void cb_cutPlaneStarboardModeBtn_i(Fl_Button*, void*);
  static void cb_cutPlaneStarboardModeBtn(Fl_Button*, void*);
public:
  Fl_Button *cutPlanePortModeBtn;
private:
  void cb_cutPlanePortModeBtn_i(Fl_Button*, void*);
  static void cb_cutPlanePortModeBtn(Fl_Button*, void*);
public:
  Fl_Button *cutPlaneInvolutesModeBtn;
private:
  void cb_cutPlaneInvolutesModeBtn_i(Fl_Button*, void*);
  static void cb_cutPlaneInvolutesModeBtn(Fl_Button*, void*);
public:
  movable_Fl_Window* make_CutPlaneWindows(int windowPropsPosn[WIN_PROPS_LEN][2]);
  movable_Fl_Window *bNCutPlaneWindow;
private:
  void cb_bNCutPlaneWindow_i(movable_Fl_Window*, void*);
  static void cb_bNCutPlaneWindow(movable_Fl_Window*, void*);
public:
  P3DCutPlaneView *bNCutPlaneView;
  movable_Fl_Window *bBPerpCutPlaneWindow;
private:
  void cb_bBPerpCutPlaneWindow_i(movable_Fl_Window*, void*);
  static void cb_bBPerpCutPlaneWindow(movable_Fl_Window*, void*);
public:
  P3DCutPlaneView *bBPerpCutPlaneView;
  movable_Fl_Window *bPerpNCutPlaneWindow;
private:
  void cb_bPerpNCutPlaneWindow_i(movable_Fl_Window*, void*);
  static void cb_bPerpNCutPlaneWindow(movable_Fl_Window*, void*);
public:
  P3DCutPlaneView *bPerpNCutPlaneView;
  movable_Fl_Window *bPerpY0CutPlaneWindow;
private:
  void cb_bPerpY0CutPlaneWindow_i(movable_Fl_Window*, void*);
  static void cb_bPerpY0CutPlaneWindow(movable_Fl_Window*, void*);
public:
  P3DCutPlaneView *bPerpY0CutPlaneView;
  movable_Fl_Window *bPerpY1CutPlaneWindow;
private:
  void cb_bPerpY1CutPlaneWindow_i(movable_Fl_Window*, void*);
  static void cb_bPerpY1CutPlaneWindow(movable_Fl_Window*, void*);
public:
  P3DCutPlaneView *bPerpY1CutPlaneView;
  movable_Fl_Window *InvoluteCutPlaneWindow;
private:
  void cb_InvoluteCutPlaneWindow_i(movable_Fl_Window*, void*);
  static void cb_InvoluteCutPlaneWindow(movable_Fl_Window*, void*);
public:
  P3DCutPlaneView *InvoluteCutPlaneView;
  movable_Fl_Window* make_editLandmarksWindow(int win_X, int win_Y);
  movable_Fl_Window *editLandmarksWindow;
private:
  void cb_editLandmarksWindow_i(movable_Fl_Window*, void*);
  static void cb_editLandmarksWindow(movable_Fl_Window*, void*);
  void cb_Done_i(Fl_Button*, void*);
  static void cb_Done(Fl_Button*, void*);
public:
  Fl_Button *landmarksClearSurface;
private:
  void cb_landmarksClearSurface_i(Fl_Button*, void*);
  static void cb_landmarksClearSurface(Fl_Button*, void*);
public:
  Fl_Button *landmarksClearImage;
private:
  void cb_landmarksClearImage_i(Fl_Button*, void*);
  static void cb_landmarksClearImage(Fl_Button*, void*);
public:
  Fl_Button *landmarksNextBtn;
private:
  void cb_landmarksNextBtn_i(Fl_Button*, void*);
  static void cb_landmarksNextBtn(Fl_Button*, void*);
public:
  Fl_Button *landmarksPreviousBtn;
private:
  void cb_landmarksPreviousBtn_i(Fl_Button*, void*);
  static void cb_landmarksPreviousBtn(Fl_Button*, void*);
public:
  Fl_Button *landmarkDeleteBtn;
private:
  void cb_landmarkDeleteBtn_i(Fl_Button*, void*);
  static void cb_landmarkDeleteBtn(Fl_Button*, void*);
public:
  Fl_Group *editLandmarkNames;
  Fl_Value_Output *landmarksSurfaceNumber;
  Fl_Check_Button *landmarksEditMode_0Btn;
private:
  void cb_landmarksEditMode_0Btn_i(Fl_Check_Button*, void*);
  static void cb_landmarksEditMode_0Btn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *landmarksEditMode_1Btn;
private:
  void cb_landmarksEditMode_1Btn_i(Fl_Check_Button*, void*);
  static void cb_landmarksEditMode_1Btn(Fl_Check_Button*, void*);
public:
  Fl_Button *editLandmarks_Caret0;
  Fl_Button *editLandmarks_Caret1;
  Fl_Button *editLandmarks_Caret2;
  Fl_Button *editLandmarks_Caret3;
  Fl_Button *editLandmarks_Caret4;
  Fl_Button *editLandmarks_Caret5;
  Fl_Value_Output *landmarksImageNumber;
private:
  void cb_Apply_i(Fl_Button*, void*);
  static void cb_Apply(Fl_Button*, void*);
public:
  Fl_Button *landmarkGotoBtn;
private:
  void cb_landmarkGotoBtn_i(Fl_Button*, void*);
  static void cb_landmarkGotoBtn(Fl_Button*, void*);
public:
  movable_Fl_Window* make_editModelWindow(int win_X, int win_Y);
  movable_Fl_Window *editModelWindow;
private:
  void cb_editModelWindow_i(movable_Fl_Window*, void*);
  static void cb_editModelWindow(movable_Fl_Window*, void*);
public:
  Fl_Input *editNameInput;
  Fl_Menu_Button *editFigureColorSelector;
  static Fl_Menu_Item menu_editFigureColorSelector[];
private:
  void cb_Red2_i(Fl_Menu_*, void*);
  static void cb_Red2(Fl_Menu_*, void*);
  void cb_Green2_i(Fl_Menu_*, void*);
  static void cb_Green2(Fl_Menu_*, void*);
  void cb_Yellow2_i(Fl_Menu_*, void*);
  static void cb_Yellow2(Fl_Menu_*, void*);
  void cb_Blue2_i(Fl_Menu_*, void*);
  static void cb_Blue2(Fl_Menu_*, void*);
  void cb_Magenta2_i(Fl_Menu_*, void*);
  static void cb_Magenta2(Fl_Menu_*, void*);
  void cb_Cyan2_i(Fl_Menu_*, void*);
  static void cb_Cyan2(Fl_Menu_*, void*);
  void cb_Gray4_i(Fl_Menu_*, void*);
  static void cb_Gray4(Fl_Menu_*, void*);
  void cb_Custom6_i(Fl_Menu_*, void*);
  static void cb_Custom6(Fl_Menu_*, void*);
public:
  Fl_Box *editCurrentColorOutput;
private:
  void cb_Done1_i(Fl_Button*, void*);
  static void cb_Done1(Fl_Button*, void*);
public:
  Fl_Group *editModelFigureNames;
  Fl_Counter *editModelFigureNumber;
private:
  void cb_editModelFigureNumber_i(Fl_Counter*, void*);
  static void cb_editModelFigureNumber(Fl_Counter*, void*);
public:
  Fl_Counter *editModelFigureTolerance;
private:
  void cb_editModelFigureTolerance_i(Fl_Counter*, void*);
  static void cb_editModelFigureTolerance(Fl_Counter*, void*);
public:
  Fl_Group *editModelFigureBlendGroup;
  Fl_Counter *editModelFigureBlendExtent;
private:
  void cb_editModelFigureBlendExtent_i(Fl_Counter*, void*);
  static void cb_editModelFigureBlendExtent(Fl_Counter*, void*);
public:
  Fl_Counter *editModelFigureBlendAmount;
private:
  void cb_editModelFigureBlendAmount_i(Fl_Counter*, void*);
  static void cb_editModelFigureBlendAmount(Fl_Counter*, void*);
public:
  Fl_Button *editModelFigureApplyBlend;
private:
  void cb_editModelFigureApplyBlend_i(Fl_Button*, void*);
  static void cb_editModelFigureApplyBlend(Fl_Button*, void*);
public:
  Fl_Check_Button *editModelAttachmentMode;
private:
  void cb_editModelAttachmentMode_i(Fl_Check_Button*, void*);
  static void cb_editModelAttachmentMode(Fl_Check_Button*, void*);
public:
  Fl_Group *editModelPolarityGroup;
  Fl_Check_Button *editModelPolarity;
private:
  void cb_editModelPolarity_i(Fl_Check_Button*, void*);
  static void cb_editModelPolarity(Fl_Check_Button*, void*);
public:
  Fl_Button *editModelDimensionsOutput;
  movable_Fl_Window* make_AttachFigureDialog(int win_X, int win_Y, bool open);
  movable_Fl_Window *attachSubfigureDialog;
private:
  void cb_attachSubfigureDialog_i(movable_Fl_Window*, void*);
  static void cb_attachSubfigureDialog(movable_Fl_Window*, void*);
public:
  Fl_Button *attachStepTextOutput;
  Fl_Output *attachInstructionsTextOutput;
  Fl_Button *attachNextButton;
private:
  void cb_attachNextButton_i(Fl_Button*, void*);
  static void cb_attachNextButton(Fl_Button*, void*);
public:
  Fl_Button *attachCancelButton;
private:
  void cb_attachCancelButton_i(Fl_Button*, void*);
  static void cb_attachCancelButton(Fl_Button*, void*);
public:
  Fl_Group *attachModeGroup;
  Fl_Round_Button *attachProtrusionButton;
private:
  void cb_attachProtrusionButton_i(Fl_Round_Button*, void*);
  static void cb_attachProtrusionButton(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *attachIndentationButton;
private:
  void cb_attachIndentationButton_i(Fl_Round_Button*, void*);
  static void cb_attachIndentationButton(Fl_Round_Button*, void*);
public:
  movable_Fl_Window* make_ElongationDialog(int win_X, int win_Y, bool open);
  movable_Fl_Window *elongationDialog;
private:
  void cb_elongationDialog_i(movable_Fl_Window*, void*);
  static void cb_elongationDialog(movable_Fl_Window*, void*);
public:
  Fl_Slider *elongateRowSlider;
private:
  void cb_elongateRowSlider_i(Fl_Slider*, void*);
  static void cb_elongateRowSlider(Fl_Slider*, void*);
public:
  Fl_Slider *elongateColumnSlider;
private:
  void cb_elongateColumnSlider_i(Fl_Slider*, void*);
  static void cb_elongateColumnSlider(Fl_Slider*, void*);
public:
  Fl_Button *elongation1stMessageBtn;
  Fl_Button *elongation2ndMessageBtn;
  Fl_Button *elongationFigureBtn;
  Fl_Value_Output *elongationFigureNumberOutput;
  movable_Fl_Window* make_OptimizerControlDialog(int win_X, int win_Y, bool open);
  movable_Fl_Window *optimizerControlDialog;
private:
  void cb_optimizerControlDialog_i(movable_Fl_Window*, void*);
  static void cb_optimizerControlDialog(movable_Fl_Window*, void*);
public:
  Fl_Group *optimizerControl;
  Fl_Button *nextOptimizationBtn;
private:
  void cb_nextOptimizationBtn_i(Fl_Button*, void*);
  static void cb_nextOptimizationBtn(Fl_Button*, void*);
public:
  Fl_Button *optimizationCancelBtn;
private:
  void cb_optimizationCancelBtn_i(Fl_Button*, void*);
  static void cb_optimizationCancelBtn(Fl_Button*, void*);
public:
  Fl_Button *previewOptimizationBtn;
private:
  void cb_previewOptimizationBtn_i(Fl_Button*, void*);
  static void cb_previewOptimizationBtn(Fl_Button*, void*);
public:
  Fl_Button *continuousOptimizationBtn;
private:
  void cb_continuousOptimizationBtn_i(Fl_Button*, void*);
  static void cb_continuousOptimizationBtn(Fl_Button*, void*);
public:
  Fl_Button *startNextInteractiveStageBtn;
private:
  void cb_startNextInteractiveStageBtn_i(Fl_Button*, void*);
  static void cb_startNextInteractiveStageBtn(Fl_Button*, void*);
public:
  Fl_Group *optimizerSetupStage;
  Fl_Group *optimizerMatchMethod;
  Fl_Round_Button *gaussDerivMatchRadioBtn;
  Fl_Round_Button *negGaussDerivMatchRadioBtn;
  Fl_Round_Button *simpleMaskMatchRadioBtn;
  Fl_Round_Button *binaryMatchRadioBtn;
  Fl_Round_Button *histogramMatchRadioBtn;
  Fl_Check_Button *optimizerWindowedIntensities;
private:
  void cb_optimizerWindowedIntensities_i(Fl_Check_Button*, void*);
  static void cb_optimizerWindowedIntensities(Fl_Check_Button*, void*);
public:
  Fl_Group *optimizerObjectStage;
  Fl_Button *objectStartBtn;
private:
  void cb_objectStartBtn_i(Fl_Button*, void*);
  static void cb_objectStartBtn(Fl_Button*, void*);
public:
  Fl_Button *objectStopBtn;
private:
  void cb_objectStopBtn_i(Fl_Button*, void*);
  static void cb_objectStopBtn(Fl_Button*, void*);
public:
  Fl_Button *objectResetBtn;
private:
  void cb_objectResetBtn_i(Fl_Button*, void*);
  static void cb_objectResetBtn(Fl_Button*, void*);
public:
  Fl_Value_Output *objectIterationOutput;
  Fl_Value_Output *objectMatchValueOutput;
  Fl_Value_Output *objectPenaltyValueOutput;
  Fl_Value_Slider *objectPenaltyWeightSlider;
  Fl_Group *optimizerEnsembleStage;
  Fl_Button *modelStartBtn;
private:
  void cb_modelStartBtn_i(Fl_Button*, void*);
  static void cb_modelStartBtn(Fl_Button*, void*);
public:
  Fl_Button *modelStopBtn;
private:
  void cb_modelStopBtn_i(Fl_Button*, void*);
  static void cb_modelStopBtn(Fl_Button*, void*);
public:
  Fl_Button *modelResetBtn;
private:
  void cb_modelResetBtn_i(Fl_Button*, void*);
  static void cb_modelResetBtn(Fl_Button*, void*);
public:
  Fl_Value_Output *modelIterationOutput;
  Fl_Value_Output *modelMatchValueOutput;
  Fl_Value_Output *modelPenaltyValueOutput;
  Fl_Value_Slider *modelPenaltyWeightSlider;
  Fl_Group *optimizerFigureStage;
  Fl_Button *figureStageStartBtn;
private:
  void cb_figureStageStartBtn_i(Fl_Button*, void*);
  static void cb_figureStageStartBtn(Fl_Button*, void*);
public:
  Fl_Button *figureStageStopBtn;
private:
  void cb_figureStageStopBtn_i(Fl_Button*, void*);
  static void cb_figureStageStopBtn(Fl_Button*, void*);
public:
  Fl_Output *figureStageFigureName;
  Fl_Value_Output *figureStageIterationOutput;
  Fl_Value_Output *figureStageImageMatchValueOutput;
  Fl_Value_Output *figureStagePenaltyValueOutput;
  Fl_Value_Slider *figureStagePenaltyWeightSlider;
  Fl_Value_Slider *figureStageConstraintsPenaltyWeightSlider;
  Fl_Value_Output *figureStageObjectiveFunctionValueOutput;
  Fl_Group *optimizerMainFigureStage;
  Fl_Button *mainFigureStartBtn;
private:
  void cb_mainFigureStartBtn_i(Fl_Button*, void*);
  static void cb_mainFigureStartBtn(Fl_Button*, void*);
public:
  Fl_Button *mainFigureStopBtn;
private:
  void cb_mainFigureStopBtn_i(Fl_Button*, void*);
  static void cb_mainFigureStopBtn(Fl_Button*, void*);
public:
  Fl_Output *mainFigureName;
  Fl_Value_Output *mainFigureIterationOutput;
  Fl_Value_Output *mainFigureImageMatchValueOutput;
  Fl_Value_Output *mainFigurePenaltyValueOutput;
  Fl_Value_Slider *mainFigurePenaltyWeightSlider;
  Fl_Value_Slider *mainFigureConstraintsPenaltyWeightSlider;
  Fl_Value_Output *mainFigureObjectiveFunctionValueOutput;
  Fl_Group *optimizerSubfigureStage;
  Fl_Button *subfigureStartBtn;
private:
  void cb_subfigureStartBtn_i(Fl_Button*, void*);
  static void cb_subfigureStartBtn(Fl_Button*, void*);
public:
  Fl_Button *subfigureStopBtn;
private:
  void cb_subfigureStopBtn_i(Fl_Button*, void*);
  static void cb_subfigureStopBtn(Fl_Button*, void*);
public:
  Fl_Output *subFigureName;
  Fl_Value_Output *subfigureIterationOutput;
  Fl_Value_Output *subfigureMatchValueOutput;
  Fl_Value_Output *subfigurePenaltyValueOutput;
  Fl_Value_Slider *subfigurePenaltyWeightSlider;
private:
  void cb_subfigurePenaltyWeightSlider_i(Fl_Value_Slider*, void*);
  static void cb_subfigurePenaltyWeightSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *subfigureConstraintsPenaltyWeightSlider;
private:
  void cb_subfigureConstraintsPenaltyWeightSlider_i(Fl_Value_Slider*, void*);
  static void cb_subfigureConstraintsPenaltyWeightSlider(Fl_Value_Slider*, void*);
public:
  Fl_Group *optimizerPrimitiveStage;
  Fl_Button *primitiveStartBtn;
private:
  void cb_primitiveStartBtn_i(Fl_Button*, void*);
  static void cb_primitiveStartBtn(Fl_Button*, void*);
public:
  Fl_Button *primitiveStopBtn;
private:
  void cb_primitiveStopBtn_i(Fl_Button*, void*);
  static void cb_primitiveStopBtn(Fl_Button*, void*);
public:
  Fl_Output *primitiveFigureName;
  Fl_Value_Output *primitiveIterationOutput;
  Fl_Value_Output *primitiveObjectiveFunctionValueOutput;
  Fl_Value_Output *primativePenaltyValueOutput;
  Fl_Value_Output *primitiveImageMatchValueOutput;
  Fl_Value_Slider *primitivePenaltyWeightSlider;
  Fl_Value_Slider *primitiveConstraintsPenaltyWeightSlider;
  Fl_Value_Slider *primitiveNeighborPenaltyWeightSlider;
  Fl_Group *optimizerVoxelStage;
  Fl_Button *voxelStageStartBtn;
private:
  void cb_voxelStageStartBtn_i(Fl_Button*, void*);
  static void cb_voxelStageStartBtn(Fl_Button*, void*);
public:
  Fl_Button *voxelStageStopBtn;
private:
  void cb_voxelStageStopBtn_i(Fl_Button*, void*);
  static void cb_voxelStageStopBtn(Fl_Button*, void*);
public:
  Fl_Output *voxelStageFigureName;
  Fl_Value_Output *voxelStageIterationOutput;
  Fl_Value_Output *voxelStageMatchValueOutput;
  Fl_Value_Output *voxelStagePenaltyValueOutput;
  Fl_Value_Slider *voxelStagePenaltyWeightSlider;
private:
  void cb_voxelStagePenaltyWeightSlider_i(Fl_Value_Slider*, void*);
  static void cb_voxelStagePenaltyWeightSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *voxelStageConstraintsPenaltyWeightSlider;
private:
  void cb_voxelStageConstraintsPenaltyWeightSlider_i(Fl_Value_Slider*, void*);
  static void cb_voxelStageConstraintsPenaltyWeightSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Output *voxelStageObjectiveFunctionValueOutput;
  Fl_Group *optimizerEndStage;
  movable_Fl_Window* make_OptimizerSettingsDialog(int win_X, int win_Y, bool open);
  movable_Fl_Window *optimizerSettingsDialog;
private:
  void cb_optimizerSettingsDialog_i(movable_Fl_Window*, void*);
  static void cb_optimizerSettingsDialog(movable_Fl_Window*, void*);
public:
  Fl_Return_Button *setPenaltyWeightsBtn;
private:
  void cb_setPenaltyWeightsBtn_i(Fl_Return_Button*, void*);
  static void cb_setPenaltyWeightsBtn(Fl_Return_Button*, void*);
public:
  Fl_Button *revertPenaltyWeightsBtn;
private:
  void cb_revertPenaltyWeightsBtn_i(Fl_Button*, void*);
  static void cb_revertPenaltyWeightsBtn(Fl_Button*, void*);
public:
  Fl_Value_Input *slidingPenaltyInput;
  Fl_Value_Input *normalPenaltyInput;
  Fl_Value_Input *penetrationPenaltyInput;
  Fl_Value_Input *creasingPenaltyInput;
  Fl_Value_Input *conjGradIterInput;
  Fl_Value_Input *skipThresholdInput;
  Fl_Value_Input *skipMultiplierInput;
  Fl_Check_Button *usePGABtn;
  Fl_Button *loadPGAFileBtn;
private:
  void cb_loadPGAFileBtn_i(Fl_Button*, void*);
  static void cb_loadPGAFileBtn(Fl_Button*, void*);
public:
  Fl_Output *pgaFileOutput;
  movable_Fl_Window* make_ModelSlideShowWindow(int win_X, int win_Y, bool open);
  movable_Fl_Window *modelSlideShowDialog;
private:
  void cb_modelSlideShowDialog_i(movable_Fl_Window*, void*);
  static void cb_modelSlideShowDialog(movable_Fl_Window*, void*);
public:
  Fl_File_Browser *modelSlideShowFileBrowser;
private:
  void cb_modelSlideShowFileBrowser_i(Fl_File_Browser*, void*);
  static void cb_modelSlideShowFileBrowser(Fl_File_Browser*, void*);
  void cb_8_i(Fl_Button*, void*);
  static void cb_8(Fl_Button*, void*);
  void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
  void cb_Add_i(Fl_Button*, void*);
  static void cb_Add(Fl_Button*, void*);
public:
  Fl_Counter *modelSlideShowCounter;
private:
  void cb_modelSlideShowCounter_i(Fl_Counter*, void*);
  static void cb_modelSlideShowCounter(Fl_Counter*, void*);
  void cb_Remove1_i(Fl_Button*, void*);
  static void cb_Remove1(Fl_Button*, void*);
  void cb_Clear1_i(Fl_Button*, void*);
  static void cb_Clear1(Fl_Button*, void*);
public:
  Fl_Check_Button *slideShowSync;
  Fl_File_Browser *tileSlideShowFileBrowser;
private:
  void cb_tileSlideShowFileBrowser_i(Fl_File_Browser*, void*);
  static void cb_tileSlideShowFileBrowser(Fl_File_Browser*, void*);
  void cb_81_i(Fl_Button*, void*);
  static void cb_81(Fl_Button*, void*);
  void cb_21_i(Fl_Button*, void*);
  static void cb_21(Fl_Button*, void*);
  void cb_Add1_i(Fl_Button*, void*);
  static void cb_Add1(Fl_Button*, void*);
public:
  Fl_Counter *tileSlideShowCounter;
private:
  void cb_tileSlideShowCounter_i(Fl_Counter*, void*);
  static void cb_tileSlideShowCounter(Fl_Counter*, void*);
  void cb_Remove2_i(Fl_Button*, void*);
  static void cb_Remove2(Fl_Button*, void*);
  void cb_Clear2_i(Fl_Button*, void*);
  static void cb_Clear2(Fl_Button*, void*);
public:
  Fl_Check_Button *slideShowCenter;
  movable_Fl_Window* make_PGAWindow(int win_X, int win_Y, bool open);
  movable_Fl_Window *pgaDialog;
private:
  void cb_pgaDialog_i(movable_Fl_Window*, void*);
  static void cb_pgaDialog(movable_Fl_Window*, void*);
public:
  Fl_Button *pgaNextBtn;
private:
  void cb_pgaNextBtn_i(Fl_Button*, void*);
  static void cb_pgaNextBtn(Fl_Button*, void*);
public:
  Fl_Button *pgaStageOutput;
  Fl_Button *pgaStageNameLabel;
  Fl_Button *pgaDoneBtn;
private:
  void cb_pgaDoneBtn_i(Fl_Button*, void*);
  static void cb_pgaDoneBtn(Fl_Button*, void*);
public:
  Fl_Button *pgaMeanResBtn;
private:
  void cb_pgaMeanResBtn_i(Fl_Button*, void*);
  static void cb_pgaMeanResBtn(Fl_Button*, void*);
public:
  Fl_Slider *pgaSlider1;
private:
  void cb_pgaSlider1_i(Fl_Slider*, void*);
  static void cb_pgaSlider1(Fl_Slider*, void*);
public:
  Fl_Slider *pgaSlider2;
private:
  void cb_pgaSlider2_i(Fl_Slider*, void*);
  static void cb_pgaSlider2(Fl_Slider*, void*);
public:
  Fl_Slider *pgaSlider3;
private:
  void cb_pgaSlider3_i(Fl_Slider*, void*);
  static void cb_pgaSlider3(Fl_Slider*, void*);
public:
  Fl_Slider *pgaSlider4;
private:
  void cb_pgaSlider4_i(Fl_Slider*, void*);
  static void cb_pgaSlider4(Fl_Slider*, void*);
public:
  Fl_Slider *pgaSlider5;
private:
  void cb_pgaSlider5_i(Fl_Slider*, void*);
  static void cb_pgaSlider5(Fl_Slider*, void*);
public:
  Fl_Button *pgaZeroBtn;
private:
  void cb_pgaZeroBtn_i(Fl_Button*, void*);
  static void cb_pgaZeroBtn(Fl_Button*, void*);
  // ----------------------------------------------------------------
public:
  movable_Fl_Window* make_CPNSWindow(int win_X, int win_Y, bool open);
  movable_Fl_Window *cpnsDialog;
private:
  void cb_cpnsDialog_i(movable_Fl_Window*, void*);
  static void cb_cpnsDialog(movable_Fl_Window*, void*);
public:
  Fl_Button *cpnsDoneBtn;
private:
  void cb_cpnsDoneBtn_i(Fl_Button*, void*);
  static void cb_cpnsDoneBtn(Fl_Button*, void*);
// ----
public:
  Fl_Slider *cpnsSlider1;
private:
  void cb_cpnsSlider1_i(Fl_Slider*, void*);
  static void cb_cpnsSlider1(Fl_Slider*, void*);
public:
  Fl_Slider *cpnsSlider2;
private:
  void cb_cpnsSlider2_i(Fl_Slider*, void*);
  static void cb_cpnsSlider2(Fl_Slider*, void*);
public:
  Fl_Slider *cpnsSlider3;
private:
  void cb_cpnsSlider3_i(Fl_Slider*, void*);
  static void cb_cpnsSlider3(Fl_Slider*, void*);
public:
  Fl_Slider *cpnsSlider4;
private:
  void cb_cpnsSlider4_i(Fl_Slider*, void*);
  static void cb_cpnsSlider4(Fl_Slider*, void*);
public:
  Fl_Slider *cpnsSlider5;
private:
  void cb_cpnsSlider5_i(Fl_Slider*, void*);
  static void cb_cpnsSlider5(Fl_Slider*, void*);
public:
  Fl_Button *cpnsZeroBtn;
private:
  void cb_cpnsZeroBtn_i(Fl_Button*, void*);
  static void cb_cpnsZeroBtn(Fl_Button*, void*);
// ------------------------------------------------------------

public:
  movable_Fl_Window* make_PCAWindow(int win_X, int win_Y);
  movable_Fl_Window *pcaDialog;
private:
  void cb_pcaDialog_i(movable_Fl_Window*, void*);
  static void cb_pcaDialog(movable_Fl_Window*, void*);
public:
  Fl_Slider *pcaSlider1;
private:
  void cb_pcaSlider1_i(Fl_Slider*, void*);
  static void cb_pcaSlider1(Fl_Slider*, void*);
public:
  Fl_Slider *pcaSlider2;
private:
  void cb_pcaSlider2_i(Fl_Slider*, void*);
  static void cb_pcaSlider2(Fl_Slider*, void*);
public:
  Fl_Slider *pcaSlider3;
private:
  void cb_pcaSlider3_i(Fl_Slider*, void*);
  static void cb_pcaSlider3(Fl_Slider*, void*);
public:
  Fl_Slider *pcaSlider4;
private:
  void cb_pcaSlider4_i(Fl_Slider*, void*);
  static void cb_pcaSlider4(Fl_Slider*, void*);
public:
  Fl_Slider *pcaSlider5;
private:
  void cb_pcaSlider5_i(Fl_Slider*, void*);
  static void cb_pcaSlider5(Fl_Slider*, void*);
public:
  Fl_Double_Window* make_TransformationRecordingTestDialog();
  Fl_Double_Window *transformationRecordingTestDialog;
private:
  void cb_transformationRecordingTestDialog_i(Fl_Double_Window*, void*);
  static void cb_transformationRecordingTestDialog(Fl_Double_Window*, void*);
public:
  Fl_Button *startRecordingButton;
private:
  void cb_startRecordingButton_i(Fl_Button*, void*);
  static void cb_startRecordingButton(Fl_Button*, void*);
public:
  Fl_Button *endRecordingButton;
private:
  void cb_endRecordingButton_i(Fl_Button*, void*);
  static void cb_endRecordingButton(Fl_Button*, void*);
public:
  Fl_Button *resetRecordingButton;
private:
  void cb_resetRecordingButton_i(Fl_Button*, void*);
  static void cb_resetRecordingButton(Fl_Button*, void*);
public:
  Fl_Button *testRecordingButton;
private:
  void cb_testRecordingButton_i(Fl_Button*, void*);
  static void cb_testRecordingButton(Fl_Button*, void*);
public:
  void show();
private:
  friend class P3DUserInterfaceCallback;
public:
  P3DUserInterfaceCallback * callback;
private:
  P3DControl * control;
public:
  void setSurfaceLevelBtns(int button);
  void setSurfaceTypeBtns(int button);
  void setPartialSurfaceLevelBtns(int button);
  void setPartialSurfaceTypeBtns(int button);
  void setOptimizerMatchBtns(int button);
  void setPrefsSurfaceLevelBtns(int button);
  void setPrefsSurfaceTypeBtns(int button);
  void setPrefsPartialSurfaceLevelBtns(int button);
  void setPrefsPartialSurfaceTypeBtns(int button);
  void setPrefsAtomBVectorsBtns(int button);
  void setPartialSurfaceRendering(int button);
  void setPrefsPartialSurfaceRendering(int button);
  void setPrefsIconifyBtns(int button);
  void setPrefsByteOrderBtns(int button);
  void setPrefsReorderBtns(int button);
  void setPrefsVerbosityBtns(int button);
  void setPrefsBYUOutputBtns(int type);
private:
  void * landmarkCells;
  void * modelNameCells;
public:
  movable_Fl_Window* make_InterpolatedPrimitiveWindow(int win_X, int win_Y, bool open);
  movable_Fl_Window *interpolatedPrimitiveWindow;
private:
  void cb_interpolatedPrimitiveWindow_i(movable_Fl_Window*, void*);
  static void cb_interpolatedPrimitiveWindow(movable_Fl_Window*, void*);
public:
  Fl_Value_Slider *uSlider;
private:
  void cb_uSlider_i(Fl_Value_Slider*, void*);
  static void cb_uSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vSlider;
private:
  void cb_vSlider_i(Fl_Value_Slider*, void*);
  static void cb_vSlider(Fl_Value_Slider*, void*);
  void cb_Done2_i(Fl_Return_Button*, void*);
  static void cb_Done2(Fl_Return_Button*, void*);
public:
  Fl_Double_Window* make_SubfigureTransformationTestDialog();
  Fl_Double_Window *subfigureTransformationTestDialog;
private:
  void cb_subfigureTransformationTestDialog_i(Fl_Double_Window*, void*);
  static void cb_subfigureTransformationTestDialog(Fl_Double_Window*, void*);
public:
  Fl_Counter *hingeRotationCounter;
private:
  void cb_hingeRotationCounter_i(Fl_Counter*, void*);
  static void cb_hingeRotationCounter(Fl_Counter*, void*);
public:
  Fl_Counter *surfaceRotationCounter;
private:
  void cb_surfaceRotationCounter_i(Fl_Counter*, void*);
  static void cb_surfaceRotationCounter(Fl_Counter*, void*);
public:
  Fl_Counter *subfigureElongationCounter;
private:
  void cb_subfigureElongationCounter_i(Fl_Counter*, void*);
  static void cb_subfigureElongationCounter(Fl_Counter*, void*);
public:
  Fl_Counter *subfigureScaleCounter;
private:
  void cb_subfigureScaleCounter_i(Fl_Counter*, void*);
  static void cb_subfigureScaleCounter(Fl_Counter*, void*);
public:
  Fl_Counter *uTranslationCounter;
private:
  void cb_uTranslationCounter_i(Fl_Counter*, void*);
  static void cb_uTranslationCounter(Fl_Counter*, void*);
public:
  Fl_Counter *vTranslationCounter;
private:
  void cb_vTranslationCounter_i(Fl_Counter*, void*);
  static void cb_vTranslationCounter(Fl_Counter*, void*);
  void cb_Initialize_i(Fl_Button*, void*);
  static void cb_Initialize(Fl_Button*, void*);
public:
  Fl_Double_Window* make_testConstraintsDialog();
  Fl_Double_Window *testConstraintsDialog;
private:
  void cb_testConstraintsDialog_i(Fl_Double_Window*, void*);
  static void cb_testConstraintsDialog(Fl_Double_Window*, void*);
  void cb_Test1_i(Fl_Button*, void*);
  static void cb_Test1(Fl_Button*, void*);
public:
  Fl_Value_Output *testConstraintsOutput;
  Fl_Value_Input *testConstraintsFigureNumberInput;
private:
  void cb_Setup_i(Fl_Button*, void*);
  static void cb_Setup(Fl_Button*, void*);
public:
  Fl_Double_Window* make_testSeuratDialog();
  Fl_Double_Window *testSeuratDialog;
private:
  void cb_testSeuratDialog_i(Fl_Double_Window*, void*);
  static void cb_testSeuratDialog(Fl_Double_Window*, void*);
  void cb_Print3_i(Fl_Button*, void*);
  static void cb_Print3(Fl_Button*, void*);
public:
  Fl_Value_Input *testSeuratFigureNumberInput;
  Fl_Value_Input *testSeuratLevelInput;
  Fl_Double_Window* make_MatchSurfacesDialog(int win_X, int win_Y, bool open);
  Fl_Double_Window *matchSurfacesDialog;
private:
  void cb_matchSurfacesDialog_i(Fl_Double_Window*, void*);
  static void cb_matchSurfacesDialog(Fl_Double_Window*, void*);
public:
  Fl_Value_Slider *matchIntensityMinSlider;
private:
  void cb_matchIntensityMinSlider_i(Fl_Value_Slider*, void*);
  static void cb_matchIntensityMinSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *matchIntensityMaxSlider;
private:
  void cb_matchIntensityMaxSlider_i(Fl_Value_Slider*, void*);
  static void cb_matchIntensityMaxSlider(Fl_Value_Slider*, void*);
public:
  Fl_Light_Button *showMatchSurfacesButton;
private:
  void cb_showMatchSurfacesButton_i(Fl_Light_Button*, void*);
  static void cb_showMatchSurfacesButton(Fl_Light_Button*, void*);
public:
  Fl_Check_Button *tieToImageSlidersButton;
private:
  void cb_tieToImageSlidersButton_i(Fl_Check_Button*, void*);
  static void cb_tieToImageSlidersButton(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *matchSurfaceNoneBtn;
private:
  void cb_matchSurfaceNoneBtn_i(Fl_Check_Button*, void*);
  static void cb_matchSurfaceNoneBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *matchSurfacePointcloudBtn;
private:
  void cb_matchSurfacePointcloudBtn_i(Fl_Check_Button*, void*);
  static void cb_matchSurfacePointcloudBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *matchSurfaceWireframeBtn;
private:
  void cb_matchSurfaceWireframeBtn_i(Fl_Check_Button*, void*);
  static void cb_matchSurfaceWireframeBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *matchSurfaceSolidBtn;
private:
  void cb_matchSurfaceSolidBtn_i(Fl_Check_Button*, void*);
  static void cb_matchSurfaceSolidBtn(Fl_Check_Button*, void*);
public:
  Fl_Button *matchSurfaceSerialName;
  Fl_Counter *matchSurfaceSerialNumber;
private:
  void cb_matchSurfaceSerialNumber_i(Fl_Counter*, void*);
  static void cb_matchSurfaceSerialNumber(Fl_Counter*, void*);
public:
  Fl_Choice *matchSurfaceColormapChoice;
private:
  void cb_matchSurfaceColormapChoice_i(Fl_Choice*, void*);
  static void cb_matchSurfaceColormapChoice(Fl_Choice*, void*);
  void cb_Discard_i(Fl_Button*, void*);
  static void cb_Discard(Fl_Button*, void*);
public:
  Fl_Light_Button *plainMatchSurfacesButton;
private:
  void cb_plainMatchSurfacesButton_i(Fl_Light_Button*, void*);
  static void cb_plainMatchSurfacesButton(Fl_Light_Button*, void*);
public:
  movable_Fl_Window* make_RegularizerWindow(int win_X, int win_Y, bool open);
  movable_Fl_Window *regularizerWindow;
private:
  void cb_regularizerWindow_i(movable_Fl_Window*, void*);
  static void cb_regularizerWindow(movable_Fl_Window*, void*);
  void cb_Close2_i(Fl_Return_Button*, void*);
  static void cb_Close2(Fl_Return_Button*, void*);
public:
  Fl_Value_Slider *regularizeStepsizeSlider;
  Fl_Value_Slider *regularizeIterationSlider;
private:
  void cb_Regularize1_i(Fl_Button*, void*);
  static void cb_Regularize1(Fl_Button*, void*);
public:
  ~P3DUserInterface();
};
#endif
