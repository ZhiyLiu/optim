#ifndef CALREGULARITYFEATURES_H
#define CALREGULARITYFEATURES_H


#include <iostream>

#include <vtkSmartPointer.h>

#include <vtkCellArray.h>
#include <vtkQuad.h>
#include <vtkLine.h>
#include <vtkLineSource.h>

#include <vtkPolyDataMapper.h>
#include <vtkActor.h>
#include <vtkProperty.h>

#include <vtkRenderer.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkRenderWindow.h>

#include "P3DControl.h"
#include "ControlParms.h"

#include "Vector3D.h"

#include "toolsfunc.h"

#include "uvmap.h"
#include "quadfigattribution.h"

typedef vnl_matrix<double> MatrixType;

class calregularityfeatures
{
public:
    calregularityfeatures();

    calregularityfeatures(quadfigattribution quadAtt,int side,DoubleVecVec subUs, DoubleVecVec subVs);

    ~calregularityfeatures();

    double calculatequadarea(double u0, double v0, double u1, double v1, double u2, double v2, double u3, double v3, int quadtype);
    vector<double> calculateAreas_method1(int quadtype);
    double tetrahedronarea(double a, double b, double c, double d, double e, double f);
    double calculatetriangularprismvolume(Vector3D a, Vector3D b, Vector3D c, Vector3D a1, Vector3D b1, Vector3D c1 );
    double calculatequadvolume(double u0, double v0, double u1, double v1, double u2, double v2, double u3, double v3);
    double lengthofedges(Vector3D point[2]);

    VectorTrainingSetFeaturesType transposeMatrix(VectorTrainingSetFeaturesType matrix);

    //get all the vetex hub position of subquad.
    vtkSmartPointer< vtkPoints > getSubQuadsPosition(int quadtype);
    vector<vector<Vector3D> > getSubQuadsPosition_2(int quadtype);
    vector<vtkSmartPointer< vtkPoints > > getSubQuadsPosition_3(int quadtype);

    double quadArea(Vector3D *point);
    vector<double> calculateVolumes_method2(vtkSmartPointer< vtkPoints > boundaryHubpos, vtkSmartPointer< vtkPoints > skeletalHubpos);
    double quadVolume(Vector3D *pointB, Vector3D *pointS);

    //calculate the vertical and horizonal edges' length. each length is sum of some sub-lines.
    void calculateEdges_method2(vtkSmartPointer< vtkPoints > hubPosition, vector<double> &verticaledges, vector<double> &horizonaledges);
    double quadQuadVolume(Vector3D *pointB, Vector3D *pointS);

    void calculateAnglesForStandardSide(vtkSmartPointer< vtkPoints > hubpos, MatrixType &angleFeatureMatrix, int quadType);
    void calculateEdges_method3(vtkSmartPointer< vtkPoints > hubpos, MatrixType &horEdgeFeatureMatrix,
                                                       MatrixType &verEdgeFeatureMatrix, int quadType);

    void calculateEdgesLength(MatrixType &horEdgeFeatureMatrix, MatrixType &verEdgeFeatureMatrix);
    void calculateAvarageAngle(MatrixType &angleFeatureMatrix);

    void calculateEdgesLength_2(vector<vector<Vector3D> > hubposition, MatrixType &horEdgeFeatureMatrix,
                                                     MatrixType &verEdgeFeatureMatrix, int quadType);
    void calculateAnglesForStandardSide_2(vector<vector<Vector3D> > hubposition, MatrixType &angleFeatureMatrix, int quadType);

    double pointsDistance(double * p1, double * p2);

    void calculateEdgesLength_3(vector<vtkSmartPointer< vtkPoints > > hubposition, MatrixType &horEdgeFeatureMatrix,
                                                     MatrixType &verEdgeFeatureMatrix, int quadType);

    void calculateAnglesForStandardSide_3(vector<vtkSmartPointer< vtkPoints > > hubposition, MatrixType &angleFeatureMatrix, int quadType);




private:

    int side;

//    int brhpi; // the horizontal point used for computing the bottom-right trangular normal.
//    int brvpi; // the vertical point used for computing the bottom-right trangular normal.

    DoubleVecVec subUs;
    DoubleVecVec subVs;

    quadfigattribution quadAtt;
};

#endif // CALREGULARITYFEATURES_H
