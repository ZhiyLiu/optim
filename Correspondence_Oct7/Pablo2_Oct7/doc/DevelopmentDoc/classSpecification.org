* M3DNewuoaOptimizer
** Hierarchy Diagram
@startuml

class M3DNewuoaOptimizer {
}
class OptimizerBase {
}

OptimizerBase <|-- Newuoa

@enduml

** Methods

*** Contructor
    
    M3DNewuoaOptimizer()
    
    M3DNewuoaOptimizer(char* rootDir, const std::vector< std::string > &inputSreps, int interpolationLevel, int spokeType): 
    @rootDir points to the path of var.txt file
    @inputSreps contains s-reps model which need to be optimized
    @interpolationLevel indicates resolution to divide quad 
    @spokeType represents spoke type: 0-upSide 1-downSide 2-crest spoke

*** Public
    initialize(): 
    1. Compute total number of atoms
    2. Initialized the srep quadFig list
    3. Compute subdivision of quad

    getCost(const double *coeff):
    Description: Return a cost value, with hard-coded weight currently. The cost function was iterated automaticly by the optimizer, each time it change the values of coeff, we use the new coeff
    Parameter: coeff is a N*46 dimesion arrary. Store the 46 spoke's u or v of all sreps. We will split this array to get each 46 for one srep.

    getObjectiveFunctionValue(const double *coeff, double w1, double w2) const:
    Description: Return a cost value computed according to pre-defined entropy minimization objective function
    Parameter: @coeff: input coefficients in each iterariton
    @w1/w2: weight for geometric entropy and regularity

    operator () (double *coeff):
    Description: Override operator (). Required by min_newuoa.
    Parameter: @coeff: the pointer to coefficients

    perform(const char* logFileName, bool initialOpt):
    Description: Main entry to invoke this optimizer wrapper. Perform optimization using newuoa.
    Parameter: @logFileName: Output log file.
    @initialOpt: True if this is the first iteration, false otherwise.

*** Private
    isCorrectMove(double *coeff, int length, double moveDis):
    Description: Return true is the coefficients are in valid movement range.

** Fields
    char* mVarFileDir;
    int   mInterpolationLevel;
    int   mSpokeType;
    int   mTotalDimensions;
    int   mIterationCounter;
    M3DQuadFigure*    mShiftingQuadFig;
    std::vector<double> mSubdivisions; // get subdivision ( 2D array) according to interpolation level
    std::vector<std::string> mInputSreps;
    std::vector<M3DQuadFigure *> mQuadFigList; //holding the input sreps. Reading in before iteration.
    std::vector<vtkSmartPointer<vtkSRep> > mSrepFigList; // hoding srepfig, used for crest spoke interpolate.


** Usage