function srepQuadPrim = SrepQuadPrimitive(varargin)

% srepQuadPrim = QuadPrimitive(

switch nargin 
    case 0
        srepQuadPrim = struct(...
              'pos', [0.0; 0.0; 0.0], ...
              'r', [1.0 1.0 1.0], ...
              'U', [1.0 1.0 1.0; 0.0 0.0 0.0; 0.0 0.0 0.0], ...
              'inTangentSpace', false);
        srepQuadPrim = class(srepQuadPrim, 'SrepQuadPrimitive');
    case 1
        if (isa(varargin{1}, 'SrepQuadPrimitive'))
            srepQuadPrim = varargin{1};
        else 
            error('Wrong argument type');
        end
    case 2
        srepQuadPrim = struct(...
              'pos', [0.0; 0.0; 0.0], ...
              'r', [1.0 1.0 1.0], ...
              'U', [1.0 1.0 1.0; 0.0 0.0 0.0; 0.0 0.0 0.0], ...
              'inTangentSpace', false);
        primKeyStr	= varargin{1};
        modelArray	= varargin{2};
        srepQuadPrim.pos = [ ...
            findVal([primKeyStr 'x'], modelArray, ' %f'); ...
            findVal([primKeyStr 'y'], modelArray, ' %f'); ...
            findVal([primKeyStr 'z'], modelArray, ' %f') ];
        for n = 1:3
            indexStr = num2str(n-1);
            radius = findVal([primKeyStr  'r[' indexStr ']'], modelArray, ' %f');
            if length(radius) > 0
                srepQuadPrim.r(n)    = findVal([primKeyStr  'r[' indexStr ']'], modelArray, ' %f');
            end
            srepQuadPrim.U(1, n) = findVal([primKeyStr 'ux[' indexStr ']'], modelArray, ' %f');
            srepQuadPrim.U(2, n) = findVal([primKeyStr 'uy[' indexStr ']'], modelArray, ' %f');
            srepQuadPrim.U(3, n) = findVal([primKeyStr 'uz[' indexStr ']'], modelArray, ' %f');
        end
        type = findVal([primKeyStr 'type'], modelArray, ' %s' );
        srepQuadPrim = class(srepQuadPrim, 'SrepQuadPrimitive');
    case 3
        if size(varargin{3}, 1) == 2
            srepQuadPrim = struct(...
                  'pos', varargin{1} , ...
                  'r', varargin{2}, ...
                  'U', varargin{3}, ...
                  'inTangentSpace', true);
        elseif size(varargin{3}, 1) == 3
            srepQuadPrim = struct(...
                  'pos', varargin{1} , ...
                  'r', varargin{2}, ...
                  'U', varargin{3}, ...
                  'inTangentSpace', false);
        else
            error('Wrong argument');
        end
        srepQuadPrim = class(srepQuadPrim, 'SrepQuadPrimitive');
    case 4
        srepQuadPrim = struct(...
              'pos', varargin{1} , ...
              'r', varargin{2}, ...
              'U', varargin{3}, ...
              'inTangentSpace', varargin{4});
        srepQuadPrim = class(srepQuadPrim, 'SrepQuadPrimitive');
    otherwise
        error('Wrong number of input arguments')
end
    
